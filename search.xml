<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信小程序开发</title>
      <link href="/2025/07/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2025/07/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2025/07/28/Vue/"/>
      <url>/2025/07/28/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>Vue是一款用于构建用户界面的JavaScript框架（&#x3D;&#x3D;渐进式框架&#x3D;&#x3D;）。它基于标准HTML、CSS和JavaScript构建，并提供了一套声明式的、组件化的编程模型，帮助高效地开发用户界面。根据需求场景，可以用不同的方式使用Vue：</p><ul><li>无需构建步骤，渐进式增强静态地HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页应用（SPA）</li><li>全栈 &#x2F; 服务端渲染 （SSR）</li><li>Jamstack &#x2F; 静态站点生成 （SSG）</li><li>开发桌面端、移动端、WebGL、甚至是命令行终端中地界面</li></ul><blockquote><p>官方文档</p><p><a href="https://cn.vuejs.org/">地址</a></p></blockquote><p>Vue API风格</p><p>Vue的组件可以按照两种不同的风格书写：&#x3D;&#x3D;选项式 API （Vue2）&#x3D;&#x3D;和&#x3D;&#x3D;组合式 API（Vue3）&#x3D;&#x3D;</p><p>大部分的核心概念在这两种风格之间都是通用的</p><p><strong>选项式 API （Options API）</strong></p><p>使用选项式 API，我们可以使用包含多个选项的对象来描述组件的逻辑，例如<code>data</code>、<code>methods</code>、<code>mounted</code>。选项所定义的属性都会暴露在函数内部的<code>this</code>上，它会指向当前的组件实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods() &#123;</span><br><span class="line">increment() &#123;</span><br><span class="line">this.count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(`The initial count is $&#123;this.count&#125;.`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125; &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>组合式 API （Composition API）</strong></p><p>通过组合式 API，我们可以使用导入的 API 函数来描述组件逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">function increment() &#123;</span><br><span class="line">    count.value++</span><br><span class="line">&#125;</span><br><span class="line">onMounted(()=&gt; &#123;</span><br><span class="line">    console.log(`The initial count is $&#123;this.count&#125;.`)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125; &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>两种 API 风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。实际上，选项式 API 是在组合式 API 的基础上实现的！关于 Vue 的基础概念和知识在它们之间都是通用的。</p><p>在生产项目中，当不需要使用构建工具，或者打算主要在低复杂度的场景使用 Vue，例如渐进式增强的应用场景，推荐采用选项式 API，当打算用 Vue 构建完整的单页应用，推荐采用组合式 API + 单文件组件</p><p>Vue 开发前的准备</p><p>构建工具让我们能够使用 Vue 单文件组件（SFC）。Vue 官方的构建流程是基于 Vite 的，一个现代、轻量、极速的构建工具。</p><blockquote><p>前提条件</p><ul><li>熟悉命令行</li><li>已安装 15.0 或更高版本的 Node.js</li></ul></blockquote><p>创建 Vue 项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p>这一指令将会安装并执行<code>create-vue</code>，它是 Vue 官方的项目脚手架工具。</p><p>&#x3D;&#x3D;注意的是，创建 Vue 项目时，尽量项目名称不要字母大写&#x3D;&#x3D;</p><p>如果不确定是否要开启某个功能，可以直接选择按下回车键选择<code>No</code>。在项目被创建后，通过以下步骤安装依赖并启动开发服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 创建的Vue项目名称</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>开发环境</p><p>推荐的 IDE 配置是 Visual Studio Code + Volar 扩展</p></blockquote><p>Vue 项目目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.vscode---VSCode工具的配置文件</span><br><span class="line">node_modules     ---Vue项目的运行依赖文件夹</span><br><span class="line">public---资源文件夹（浏览器图标）</span><br><span class="line">src   ---源码文件夹</span><br><span class="line">.gitignore               ---git忽略文件</span><br><span class="line">index.html---入口HTML文件</span><br><span class="line">package.json---信息描述文件</span><br><span class="line">README.md---注释文件</span><br><span class="line">vite.config.js---Vue配置文件</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例地数据绑定到呈现的 DOM 上。所有的 Vue 模板语法都是语法层面合法的浏览器和 HTML 解析器解析。</p><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><p>最基本的数据绑定形式是文本插值，它使用的是<code>Mustache</code>语法（即双大括号）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;模板语法&lt;/h3&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;神奇的语法&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h3><p>每个绑定仅支持&#x3D;&#x3D;单一表达式&#x3D;&#x3D;，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在<code>return</code> 后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;模板语法&lt;/h3&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;num + 1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; ok ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message.split(&#x27; &#x27;).reverse().join(&#x27; &#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;神奇的语法&#x27;,</span><br><span class="line">      num: 10,</span><br><span class="line">      ok: true,</span><br><span class="line">      message: &#x27;大家好&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="无效"><a href="#无效" class="headerlink" title="无效"></a>无效</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这是一个语句，而非表达式 --&gt;</span><br><span class="line"> &#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"> &lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h3><p>双大括号将会将数据插值为纯文本，而不是 HTML。若想要插入 HTML ，需要使用 <code>v-html</code>指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;模板语法&lt;/h3&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;num + 1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; ok ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message.split(&#x27; &#x27;).reverse().join(&#x27; &#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p v-html=&quot;rawHtml&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;神奇的语法&#x27;,</span><br><span class="line">      num: 10,</span><br><span class="line">      ok: true,</span><br><span class="line">      message: &#x27;大家好&#x27;,</span><br><span class="line">      rawHtml: &#x27;&lt;a href=&quot;https://itbaizhan.com&quot;&gt;百战程序员&lt;/a&gt;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h3><p>虽然 vue 的声明性渲染模型抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 对象。要实现这一点，我们可以使用特殊的 <code>ref</code> attribute</p><p>挂载结束后引用都会被暴露在<code>this.$refs</code>上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div ref=&quot;container&quot; class=&quot;container&quot;&gt;&#123;&#123; content &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;getElement&quot;&gt;获取元素&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;username&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 内容改变： &#123;&#123; 模板语法 &#125;&#125;</span><br><span class="line">    // 属性改变：v-bind:指令</span><br><span class="line">    // 事件：v-on:click</span><br><span class="line">    // 如果没有特别的需求，不要操作 DOM</span><br><span class="line">export default&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            content: &quot;内容&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getElement() &#123;</span><br><span class="line">            // innerHTML: 原生JS属性</span><br><span class="line">            console.log(this.$refs.container)</span><br><span class="line">            this.$refs.container.innerHTML = &quot;哈哈哈&quot;</span><br><span class="line">            console.log(this.$refs.username.value)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h2><p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用<code>v-bind</code>指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-bind:class=&quot;msg&quot; v-bind:id=&quot;dynamicId&quot;&gt;测试&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;appClass&#x27;,</span><br><span class="line">        dynamicId:&#x27;appID&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.appClass &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>v-bind</code>指令指示 Vue 将元素的<code>id</code> attribute 与组件的 <code>dynamicId</code>属性保持一致，如果绑定的是<code>null</code>或者<code>undefined</code>，那么该 attribute 将会从渲染的元素上移除</p><p>简写（由于<code>v-bind</code>非常常用，因此提供了特定的简写语法）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :id=&quot;dynamicId&quot; :class=&quot;msg&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="布尔型-Attribute"><a href="#布尔型-Attribute" class="headerlink" title="布尔型 Attribute"></a>布尔型 Attribute</h4><p>布尔型 Attribute 依据 true &#x2F; false 值来决定 attribute 是否应该存在于该元素上，<code>disabled</code>就是最常见的例子之一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button :disabled=&quot;isButtonDisabled&quot;&gt;</span><br><span class="line">        BUtton</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isButtonDisabled: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h4><p> 使用一个包含多个 attribute 的 JavaScript 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-bind=&quot;objectOfattrs&quot;&gt;</span><br><span class="line">        百战程序员</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defalut &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            objectOfattrs: &#123;</span><br><span class="line">                id: &#x27;container&#x27;,</span><br><span class="line">                class: &#x27;wrapper&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>在 <code>Vue</code>中，提供了条件渲染，这类似于<code>JavaScript</code>中的条件语句</p><p>v-if</p><p><code>v-if</code>指令用于条件性地渲染一块内容。这块内容只会在表达式返回真值时才被渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;条件渲染&lt;/h3&gt;</span><br><span class="line">    &lt;div v-if=&quot;flag&quot;&gt;你能看见我吗？&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            flag: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-else</p><p>可以使用<code>v-else</code>为<code>v-if</code>添加一个“ else 区域”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;条件渲染&lt;/h3&gt;</span><br><span class="line">    &lt;div v-if=&quot;flag&quot;&gt;你能看见我吗？&lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;你还能看见我吗？&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            flag: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-else-if</p><p><code>v-else-if</code>提供的是相应于<code>v-if</code>的<code>else if</code>区块，它可以连续多次重复使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;条件渲染&lt;/h3&gt;</span><br><span class="line">    &lt;div v-if=&quot;flag&quot;&gt;你能看见我吗？&lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;你还能看见我吗？&lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;type === &#x27;A&#x27;&quot;&gt;A&lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type === &#x27;B&#x27;&quot;&gt;B&lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type === &#x27;C&#x27;&quot;&gt;C&lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;Not A B C&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            flag: true,</span><br><span class="line">            type: &quot;D&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-show</p><p><code>v-show</code>也可以按照条件显示一个元素，其用法基本一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;条件渲染&lt;/h3&gt;</span><br><span class="line">    &lt;div v-show=&quot;flag&quot;&gt;你能看见我吗？&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            flag: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>v-if</code>与<code>v-show</code>的区别</p><ul><li><code>v-if</code>是真实的按照条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。同时它也是惰性的，如果在初次渲染时条件值为<code>false</code>，则不会做任何事件。条件区块只有当条件首次变为<code>true</code>时才被渲染。</li><li><code>v-show</code>则简单许多，无论元素初始条件如何，始终会被渲染，只有 CSS <code>display</code>属性会被切换。</li><li>总的而言，<code>v-if</code>有更高的切换开销，而<code>v-show</code>有更高的初始渲染开销。因此，1如果需要频繁切换，则使用<code>v-show</code>比较好；如果在运行时绑定条件很少改变，则<code>v-if</code>更加合适</li></ul><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>可以使用<code>v-for</code>指令基于一个数组来渲染一个列表，<code>v-for</code>指令的值需要<code>item in items</code>形式的特殊语法，其中<code>item</code>是源数据的数组，而<code>item</code>是迭代项的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;列表渲染&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in msg&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: [&#x27;中国&#x27;,&#x27;美国&#x27;,&#x27;日本&#x27;,&#x27;韩国&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>复杂数据</p><p>大多数情况下，我们渲染的数据来源于网络请求，也就是 <code>JSON</code> 格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;列表渲染&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in msg&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in result&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; item.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;img :src=&quot;item.avator&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: [&#x27;中国&#x27;,&#x27;美国&#x27;,&#x27;日本&#x27;,&#x27;韩国&#x27;],</span><br><span class="line">            result: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2261677,</span><br><span class="line">                    &quot;title&quot;: &quot;题目1&quot;,</span><br><span class="line">                        &quot;avator&quot;: &quot;https://pic.qyer.com/avatar/002/25/77/30/200?v=1560226451&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2261656,</span><br><span class="line">                    &quot;title&quot;: &quot;题目2&quot;,</span><br><span class="line">                    &quot;avator&quot;: &quot;https://pic.qyer.com/avatar/011/07/08/69/200?v=1572185180&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2261672,</span><br><span class="line">                    &quot;title&quot;: &quot;题目3&quot;,</span><br><span class="line">                    &quot;avator&quot;: &quot;https://pic.qyer.com/avatar/009/88/48/58/200?v=1507386782&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>v-for</code>也支持使用可选的第二个参数表示当前项的位置索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;列表渲染&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item,index) in msg&quot;&gt;&#123;&#123; index &#125;&#125;-&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: [&#x27;中国&#x27;,&#x27;美国&#x27;,&#x27;日本&#x27;,&#x27;韩国&#x27;],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>也可以使用<code>of</code>来代替<code>in</code>，这更接近 JavaScript 的迭代器语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item of items&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>v-for</code>与对象</p><p>也可以通过使用<code>v-for</code>来遍历一个对象的所有属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;列表渲染&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item,index) in msg&quot;&gt;&#123;&#123; index &#125;&#125;-&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p v-for=&quot;(value,key,index) of userInfo&quot;&gt;&#123;&#123; value&#125;&#125; - &#123;&#123; key &#125;&#125; - &#123;&#123; index &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: [&#x27;中国&#x27;,&#x27;美国&#x27;,&#x27;日本&#x27;,&#x27;韩国&#x27;],</span><br><span class="line">            userInfo: &#123;</span><br><span class="line">                name: &#x27;张三&#x27;,</span><br><span class="line">                age: 20,</span><br><span class="line">                sex: &quot;男&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过<code>key</code>管理状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;</span><br><span class="line">        Key属性添加到V-for中</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item,index) of msg&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: [&#x27;第一&#x27;,&#x27;第二&#x27;,&#x27;第三&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p><code>key</code>在这里是一个通过<code>v-bind</code>绑定的特殊 attribute</p><p>推荐在任何可行的时候为<code>v-for</code>提供一个<code>key</code>attribute</p><p><code>key</code>绑定的值期望是一个基础类型的值，例如字符串或者 number 类型</p></blockquote><p>key的来源</p><p>请不要使用<code>index</code>作为<code>key</code>的值，我们要确保每一条数据的唯一索引不会发生变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;列表渲染&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in msg&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div v-for=&quot;item in result&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; item.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;img :src=&quot;item.avator&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: [&#x27;中国&#x27;,&#x27;美国&#x27;,&#x27;日本&#x27;,&#x27;韩国&#x27;],</span><br><span class="line">            result: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2261677,</span><br><span class="line">                    &quot;title&quot;: &quot;题目1&quot;,</span><br><span class="line">                        &quot;avator&quot;: &quot;https://pic.qyer.com/avatar/002/25/77/30/200?v=1560226451&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2261656,</span><br><span class="line">                    &quot;title&quot;: &quot;题目2&quot;,</span><br><span class="line">                    &quot;avator&quot;: &quot;https://pic.qyer.com/avatar/011/07/08/69/200?v=1572185180&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: 2261672,</span><br><span class="line">                    &quot;title&quot;: &quot;题目3&quot;,</span><br><span class="line">                    &quot;avator&quot;: &quot;https://pic.qyer.com/avatar/009/88/48/58/200?v=1507386782&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>我们可以使用<code>v-on</code>指令（简写为<code>@</code>）来监听 DOM 事件，并在事件触发时执行相对应的 JavaScript。用法：<code>v-on:click=&quot;methodName&quot;</code>或<code>@click=handler</code></p><p>事件处理器的值可以是</p><ul><li>内联事件处理器：事件被触发执行时执行的内联 JavaScript语句（与<code>onclick</code>类似）</li><li>方法事件处理器：一个指向组件上定义的方法的属性名或是路径</li></ul><h3 id="内联事件处理器"><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器</h3><p>内联事件处理器通常用于简单场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3&gt;内联事件处理器&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;count++&quot;&gt;</span><br><span class="line">        Add 1</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export defau1t &#123;</span><br><span class="line">    darta() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;方法事件处理器&lt;/h3&gt;</span><br><span class="line">&lt;button v-on:click=&quot;addCount&quot;&gt;</span><br><span class="line">        Add </span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addCount() &#123;</span><br><span class="line">            this.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h3><p>事件参数可以通过<code>event</code>对象和通过事件传递数据</p><p><strong>获取<code>event</code>对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;方法事件处理器&lt;/h3&gt;</span><br><span class="line">&lt;button v-on:click=&quot;addCount&quot;&gt;</span><br><span class="line">        Add </span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addCount(e) &#123;</span><br><span class="line">            // vue 中的event对象，就是原生js的对象</span><br><span class="line">            console.log(e.target)</span><br><span class="line">            this.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>传递参数并获取<code>event</code>对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;事件传参&lt;/h3&gt;</span><br><span class="line">    &lt;p @click=&quot;getname(item,$event)&quot; v-for=&quot;(item,index) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            names: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getname(name,e) &#123;</span><br><span class="line">            console.log(name,e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>在处理事件时调用<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>是很常见的。尽管我们可以直接在方法内调用，但如果方法能更专注于数据逻辑而不用去处理 DOM 事件的细节会更好，为了解决这一问题， Vue 为<code>v-on</code>提供了事件修饰符，常用的有以下几个：</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.once</code></li><li><code>.enter</code></li></ul><blockquote><p>具体参考</p><p><a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p></blockquote><h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;H3&gt;事件修饰符&lt;/H3&gt;</span><br><span class="line">    &lt;a @click.prevent=&quot;clickHandler&quot; href=&quot;https://itbaizhan.com&quot;&gt;百战程序员&lt;/a&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        clickHandler(e) &#123;</span><br><span class="line">            //阻止默认事件</span><br><span class="line">            // e.preventDefault();</span><br><span class="line">            console.log(&#x27;点击了&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;事件修饰符&lt;/h3&gt;</span><br><span class="line">    &lt;a @click.prevent=&quot;clickHandler&quot; href=&quot;https://itbaizhan.com&quot;&gt;百战程序员&lt;/a&gt;</span><br><span class="line">    &lt;div @click=&quot;clickDiv&quot;&gt;</span><br><span class="line">        &lt;p @click.stop=&quot;clickP&quot;&gt;测试冒泡&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        clickHandler(e) &#123;</span><br><span class="line">            //阻止默认事件</span><br><span class="line">            // e.preventDefault();</span><br><span class="line">            console.log(&#x27;点击了&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        clickDiv() &#123;</span><br><span class="line">            console.log(&#x27;DIV&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        clickP(e) &#123;</span><br><span class="line">            //阻止事件冒泡</span><br><span class="line">            // e.stopPropagation()</span><br><span class="line">            console.log(&#x27;P&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="数组变化侦测"><a href="#数组变化侦测" class="headerlink" title="数组变化侦测"></a>数组变化侦测</h4><p><strong>变更方法</strong></p><p>Vue 能够侦听响应式数据的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;数组变化侦测&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&quot;addList&quot;&gt;添加数据&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item,index) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            names: [&#x27;一号&#x27;,&#x27;二号&#x27;,&#x27;三号&#x27;,&#x27;四号&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addList() &#123;</span><br><span class="line">            //引起 UI 自动更新</span><br><span class="line">            // this.names.push(&quot;五号&quot;)</span><br><span class="line">            //不会引起 UI 自动更新</span><br><span class="line">            this.names.concat(&quot;[五号]&quot;)</span><br><span class="line">            console.log(this.names)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>替换一个数组</strong></p><p>变更方法，顾名思义，就是会对调用它们的原数组进行变更，相对地，也有一些不可变的方法，例如<code>filter()</code></p><p>，<code>concat()</code>，<code>slice()</code>，这些都不会更改原数组，而总是<strong>返回一个新数组</strong>。当遇到的是非变更方法时，我们需要将旧的数组替换为新的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;数组变化侦测&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&quot;addList&quot;&gt;添加数据&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item,index) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;concatArray&quot;&gt;合并数组&lt;/button&gt;</span><br><span class="line">    &lt;h3&gt;数组1&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item,index) of nums1&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;数组2&lt;/h3&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item,index) of nums2&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            names: [&#x27;一号&#x27;,&#x27;二号&#x27;,&#x27;三号&#x27;,&#x27;四号&#x27;],</span><br><span class="line">            nums1: [1,2,3,4,5],</span><br><span class="line">            nums2: [6,7,8,9,10]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addList() &#123;</span><br><span class="line">            //引起 UI 自动更新</span><br><span class="line">            // this.names.push(&quot;五号&quot;)</span><br><span class="line">            //不会引起 UI 自动更新</span><br><span class="line">            this.names.concat(&quot;[五号]&quot;)</span><br><span class="line">            console.log(this.names)</span><br><span class="line">        &#125;,</span><br><span class="line">        concatArray() &#123;</span><br><span class="line">            this.nums1 = this.nums1.concat(this.nums2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板中的表达式虽然方便，但也只能用来做简单的操作，如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。因此我们推荐使用<strong>计算属性</strong>来描述依赖响应式状态的复杂逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;计算属性&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; getResult &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            user: &#123;</span><br><span class="line">                name: &quot;xiaobai&quot;,</span><br><span class="line">                content: [&#x27;前端&#x27;,&#x27;Java&#x27;,&#x27;Python&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;,</span><br><span class="line">    //计算属性</span><br><span class="line">    computed: &#123;</span><br><span class="line">        getResult()&#123;</span><br><span class="line">            return this.user.content.length &gt; 0 ? &quot;YES&quot; : &quot;NO&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>计算属性 VS 方法</strong></p><blockquote><p>重点区别：</p><p>计算属性：计算属性值会基于其响应式依赖被缓存。一个计算属性仅在其响应式依赖更新时才重新计算</p><p>方法：方法调用总是在重渲染发生时再次执行函数</p></blockquote><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。因为 <code>class</code> 和 <code>style</code> 都是 attribute，我们可以和其他 attribute 一样使用 <code>v-bind</code> 将它们和动态的字符串绑定。但是，在处理比较复杂的绑定时，通过拼接生成字符串是麻烦且易出错的。因此，Vue 专门为 <code>class</code> 和 <code>style</code> 的 <code>v-bind</code> 用法提供了特殊的功能增强。除了字符串外，表达式的值也可以是对象或数组。</p><h3 id="Class-绑定"><a href="#Class-绑定" class="headerlink" title="Class 绑定"></a>Class 绑定</h3><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式绑定&lt;/h3&gt;</span><br><span class="line">    &lt;div  class=&quot;static&quot; :class=&quot;&#123; &#x27;active&#x27;: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;&gt; 显示&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasError: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="多个对象绑定"><a href="#多个对象绑定" class="headerlink" title="多个对象绑定"></a>多个对象绑定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式绑定&lt;/h3&gt;</span><br><span class="line">    &lt;div :class=&quot;classObject&quot;&gt; 显示2&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            classObject: &#123;</span><br><span class="line">                &#x27;active&#x27;: true,</span><br><span class="line">                &#x27;text-danger&#x27;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="绑定数组"><a href="#绑定数组" class="headerlink" title="绑定数组"></a>绑定数组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式绑定对象&lt;/h3&gt;</span><br><span class="line">    &lt;div :class=&quot;&#123; &#x27;active&#x27;: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;&gt; 显示&lt;/div&gt;</span><br><span class="line">    &lt;div :class=&quot;classObject&quot;&gt; 显示2&lt;/div&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式绑定数组&lt;/h3&gt;</span><br><span class="line">    &lt;div :class=&quot;[activeClass, errorClass]&quot;&gt;显示3&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasError: false,</span><br><span class="line">            classObject: &#123;</span><br><span class="line">                &#x27;active&#x27;: true,</span><br><span class="line">                &#x27;text-danger&#x27;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            activeClass: &quot;active&quot;,</span><br><span class="line">            errorClass: &quot;danger&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>使用三元表达式有条件渲染某个 class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式绑定对象&lt;/h3&gt;</span><br><span class="line">    &lt;div :class=&quot;&#123; &#x27;active&#x27;: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;&gt; 显示1&lt;/div&gt;</span><br><span class="line">    &lt;div :class=&quot;classObject&quot;&gt; 显示2&lt;/div&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式绑定数组&lt;/h3&gt;</span><br><span class="line">    &lt;div :class=&quot;[activeClass, errorClass]&quot;&gt;显示3&lt;/div&gt;</span><br><span class="line">    &lt;h3&gt;Class 样式三元表达式绑定&lt;/h3&gt;</span><br><span class="line">    &lt;div :class=&quot;[isActive ? &#x27;active&#x27; : &#x27;text-danger&#x27;]&quot;&gt;显示4&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isActive: true,</span><br><span class="line">            hasError: false,</span><br><span class="line">            classObject: &#123;</span><br><span class="line">                &#x27;active&#x27;: true,</span><br><span class="line">                &#x27;text-danger&#x27;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            activeClass: &quot;active&quot;,</span><br><span class="line">            errorClass: &quot;danger&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="数组和对象"><a href="#数组和对象" class="headerlink" title="数组和对象"></a>数组和对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div :class=&quot;[&#123;&#x27;active&#x27;:isActive&#125;,errorClass]&quot;&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isActive: true,</span><br><span class="line">            errorClass: &quot;text-danger&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p>数组和对象嵌套过程中，只能是数组嵌套对象，不能反其道而行</p></blockquote><h3 id="Style-绑定"><a href="#Style-绑定" class="headerlink" title="Style 绑定"></a>Style 绑定</h3><h4 id="绑定对象-1"><a href="#绑定对象-1" class="headerlink" title="绑定对象"></a>绑定对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p :style=&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;&gt;Style 绑定1&lt;/p&gt;</span><br><span class="line">    &lt;p :style=&quot;styleObject&quot;&gt;Style 绑定2&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            activeColor: &#x27;red&#x27;,</span><br><span class="line">            fontSize: 30,</span><br><span class="line">            styleObject: &#123;</span><br><span class="line">                color: &#x27;green&#x27;,</span><br><span class="line">                fontSize: &#x27;40px&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>我们可以使用<code>watch</code>选项在每次响应式属性发生变化时触发一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;侦听器&lt;/h3&gt;</span><br><span class="line">    &lt;p &gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;updateMsg&quot;&gt;修改数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &#x27;Hello&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        updateMsg() &#123;</span><br><span class="line">            this.msg = &#x27;World&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        //newValue: 改变之后的数据</span><br><span class="line">        //oldValue: 改变之前的数据</span><br><span class="line">        //函数名必须与侦听的数据对象保持一致</span><br><span class="line">        msg(newValue,oldValue) &#123;</span><br><span class="line">            //数据发生变化时自动执行的函数</span><br><span class="line">            console.log(newValue,oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>在前端处理表单时，我们常常需要将表单输入框的内容同步给 JavaScript 中相应的变量。手动连接值绑定和更改事件监听器可能会很麻烦，<code>v-model</code>指令帮我们简化了这一步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;表单输入绑定&lt;/h3&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>复选框</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;表单输入绑定&lt;/h3&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot; /&gt;</span><br><span class="line">        &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &quot;&quot;,</span><br><span class="line">            checked: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修饰符</p><p><code>v-model</code>也提供了修饰符：<code>.lazy</code>、<code>.number</code>、<code>.trim</code></p><p><code>.lazy</code></p><p>默认情况下，<code>v-model</code> 会在每次 <code>input</code> 事件后更新数据 (<a href="https://cn.vuejs.org/guide/essentials/forms.html#vmodel-ime-tip">IME 拼字阶段的状态</a>例外)。可以添加 <code>lazy</code> 修饰符来改为在每次 <code>change</code> 事件后更新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;表单输入绑定&lt;/h3&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件组成"><a href="#组件组成" class="headerlink" title="组件组成"></a>组件组成</h3><p>组件最大的优势在于可复用性，当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的<code>.vue</code>文件中，这被叫做单文件组件（简称 SFC）</p><p><strong>组件组成结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        承载标签</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> &lt;!-- scoped:让当前样式只在当前组件中生效 --&gt;   </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>组件引用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;TemplateDemo /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> import TemplateDemo from &#x27;./components/TemplateDemo.vue&#x27;</span><br><span class="line"> export default &#123;</span><br><span class="line">     components: &#123;</span><br><span class="line">         TemplateDemo</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件的嵌套关系"><a href="#组件的嵌套关系" class="headerlink" title="组件的嵌套关系"></a>组件的嵌套关系</h3><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构，Vue 实现了自己的组件模型，使得我们可以在每个组件内封装自定义内容与逻辑</p><p><img src="/../images/image-20240915162609977.png" class="lazyload placeholder" data-srcset="/../images/image-20240915162609977.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240915162609977"></p><p><strong>创建组件及引用关系</strong></p><p>Header</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Header&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border: 5px solid #999;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Main&lt;/h3&gt;</span><br><span class="line">        &lt;Article    /&gt;</span><br><span class="line">        &lt;Article    /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Article from &#x27;./Article.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Article</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 400px;</span><br><span class="line">    border: 5px solid #999;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Aside</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;aside&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Aside&lt;/h3&gt;</span><br><span class="line">        &lt;Item   /&gt;</span><br><span class="line">        &lt;Item   /&gt;</span><br><span class="line">        &lt;Item   /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Item from &#x27;./Item.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.aside &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 400px;</span><br><span class="line">    border: 5px solid #999;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Article</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">        &lt;h3&gt;Article&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 &#123;</span><br><span class="line">    width: 80%;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    background-color: #999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Item</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Item&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h3 &#123;</span><br><span class="line">    width: 80%;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    background-color: #999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="组件的组成方式"><a href="#组件的组成方式" class="headerlink" title="组件的组成方式"></a>组件的组成方式</h3><p>一个 Vue 组件在使用前需要先被注册，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册</p><p><strong>全局注册</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import Header from &#x27;./components/pages/Header.vue&#x27;</span><br><span class="line">const app = createApp(App)</span><br><span class="line"></span><br><span class="line">//在这中间写组件的注册</span><br><span class="line">app.component(&quot;Header&quot;,Header)</span><br><span class="line"></span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">//APP.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// import Header from &#x27;./components/pages/Header.vue&#x27;</span><br><span class="line">import Main from &#x27;./components/pages/Main.vue&#x27;</span><br><span class="line">import Aside from &#x27;./components/pages/Aside.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        // Header,</span><br><span class="line">        Main,</span><br><span class="line">        Aside</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;Main   /&gt;</span><br><span class="line">    &lt;Aside  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>局部注册</strong></p><p>全局注册虽然方便，但有以下几个问题：</p><ul><li>全局注册，但并没有被使用的组件无法在生产打包时被自动移除（也叫“tree-shaking”），如果全局注册了一个组件，即使它没有被实际使用，它仍然会出现在打包后的 JS 文件中</li><li>全局注册在大型项目中使项的依赖关系变得不那么明确，在父组件使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用的长期可维护性</li></ul><p>局部注册需要使用<code>components</code>选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;TemplateDemo /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> import TemplateDemo from &#x27;./components/TemplateDemo.vue&#x27;</span><br><span class="line"> export default &#123;</span><br><span class="line">     components: &#123;</span><br><span class="line">         TemplateDemo</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传递数据-Props"><a href="#组件传递数据-Props" class="headerlink" title="组件传递数据_Props"></a>组件传递数据_Props</h3><p>组件与组件之间不是完全独立的，而是有交集的，那就是组件与组件之间是可以传递数据的，传递数据的解决方案是<code>props</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Parent&lt;/h3&gt;</span><br><span class="line">    &lt;Child title=&quot;Parent 数据&quot; Demo=&quot;测试数据&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; Demo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&quot;title&quot;,&quot;Demo&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>动态数据传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Parent&lt;/h3&gt;</span><br><span class="line">    &lt;Child :title=&quot;msg1&quot; :Demo=&quot;msg2&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg1: &quot;Parent 数据&quot;,</span><br><span class="line">            msg2: &quot;测试数据&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><p><code>props</code>传递数据，只能从父级传送到子级，不能反其道而行</p></blockquote><h4 id="组件传递多种数据类型"><a href="#组件传递多种数据类型" class="headerlink" title="组件传递多种数据类型"></a>组件传递多种数据类型</h4><p>通过<code>props</code>传递数据，不仅可以传递字符串类型的数据，还可以是其他类型的数据，例如：数值、对象、数组等，但实际上任何类型的值都可以作为作为<code>props</code>的值被传递</p><p>Number </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Parent&lt;/h3&gt;</span><br><span class="line">    &lt;Child :age=&quot;age&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            age: 18</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&quot;age&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Array</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li  v-for=&quot;(item,index) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&quot;age&quot;,&quot;names&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Parent&lt;/h3&gt;</span><br><span class="line">    &lt;Child :age=&quot;age&quot; :names=&quot;names&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            age: 18,</span><br><span class="line">            names: [&quot;小白&quot;,&quot;小红&quot;,&quot;小黄&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Object</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li  v-for=&quot;(item,index) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; object.age &#125;&#125; - &#123;&#123; object.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&quot;age&quot;,&quot;names&quot;,&quot;object&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Parent&lt;/h3&gt;</span><br><span class="line">    &lt;Child :age=&quot;age&quot; :names=&quot;names&quot; :object=&quot;object&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            age: 18,</span><br><span class="line">            names: [&quot;小白&quot;,&quot;小红&quot;,&quot;小黄&quot;],</span><br><span class="line">            object: &#123;</span><br><span class="line">                name: &#x27;HNU&#x27;,</span><br><span class="line">                age: 18</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="组件传递Props效验"><a href="#组件传递Props效验" class="headerlink" title="组件传递Props效验"></a>组件传递<code>Props</code>效验</h4><p>Vue 组件可以更细致地声明对传入的<code>props</code>的校验要求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;componentA&lt;/h1&gt;</span><br><span class="line">    &lt;componentB :title=&quot;title&quot; :age=&quot;age&quot; :names=&quot;names&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import componentB from &#x27;./componentB.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            title: &quot;标题&quot;,</span><br><span class="line">            age: 20,</span><br><span class="line">            names: [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        componentB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;componentB&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item,index) of names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">            type: [String,Number,Object,Array], //类型限制</span><br><span class="line">            Required: true //必选项，必须传递</span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">            type: Number,</span><br><span class="line">            default: 0</span><br><span class="line">            // 数字和字符串可以直接 default,但是如果是数组和对象，必须通过工厂函数返回默认值</span><br><span class="line">        &#125;,</span><br><span class="line">        names: &#123;</span><br><span class="line">            type: Array,</span><br><span class="line">            default() &#123;</span><br><span class="line">                return [&quot;空&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：</p><p>&#x3D;&#x3D;prop 是只读的！&#x3D;&#x3D;</p><p>即不能通过子级中的方法去修改父级传递给子级的数据</p></blockquote><h3 id="组件事件"><a href="#组件事件" class="headerlink" title="组件事件"></a>组件事件</h3><p>在组件的模板表达式中，可以直接使用<code>$emit</code>方法触发自定义事件，触发自定义事件的目的是组件之间传递数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;组件事件&lt;/h3&gt;</span><br><span class="line">    &lt;Child  @someEvent=&quot;getHandler&quot;/&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getHandler(data) &#123;</span><br><span class="line">            console.log(&quot;触发了&quot;,data)</span><br><span class="line">            this.msg = data</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class="line">    &lt;button @click=&quot;sentData&quot;&gt;传递数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &quot;Child 数据&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sentData() &#123;</span><br><span class="line">            //自定义事件</span><br><span class="line">            this.$emit(&quot;someEvent&quot;,this.msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p>组件之间传递数据的方案：</p><ol><li>父传子：<code>props</code></li><li>子传父：<code>自定义事件（this.$emit）</code></li></ol></blockquote><h4 id="组件事件配合v-model使用"><a href="#组件事件配合v-model使用" class="headerlink" title="组件事件配合v-model使用"></a>组件事件配合<code>v-model</code>使用</h4><p>如果是用户输入，我们希望在获取数据的同时发送数据配合<code>v-model</code>来使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">​```vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    搜索：&lt;input type=&quot;text&quot; v-model=&quot;search&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            search: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 侦听器</span><br><span class="line">    watch: &#123;</span><br><span class="line">        search(newValue,oldValue) &#123;</span><br><span class="line">            this.$emit(&quot;searchEvent&quot;,newValue)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emits: [&quot;searchEvent&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Main&lt;/h3&gt;</span><br><span class="line">    搜索内容为：&lt;p&gt;&#123;&#123; search &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;SearchComponent @searchEvent=&quot;getSearch&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SearchComponent from &#x27;./SearchComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            search: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        SearchComponent</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getSearch(data) &#123;</span><br><span class="line">            this.search = data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>除了上述的方案，<code>props</code>也可以实现子传父</p><p>通过父组件向子组件传递一个函数，而子组件实现函数返回参数给父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;ComponentA&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; onEvent(&quot;传递数据&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        title: String,</span><br><span class="line">        onEvent: Function</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;ComponentB&lt;/h3&gt;</span><br><span class="line">    &lt;ComponentA title=&quot;标题&quot; :onEvent=&quot;dataFn&quot;/&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ComponentA from &#x27;./ComponentA.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        ComponentA</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        dataFn(data) &#123;</span><br><span class="line">            this.msg = data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="透传-Attributes"><a href="#透传-Attributes" class="headerlink" title="透传 Attributes"></a>透传 Attributes</h3><p>“透传 attribute”指的是传递给一个组件，却没有被该组件声明为<code>props</code>或<code>emits</code>的<code>attribute</code>或者<code>v-on</code>事件监听器。最常见的例子就是<code>class</code>、<code>style</code>和<code>id</code>，当一个组件以单个元素为根作渲染时，透彻的<code>attribute</code>会自动被添加到根元素上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 必须是唯一根元素 --&gt;</span><br><span class="line">    &lt;h3&gt;透传属性&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.attr-container &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import ComponentEvent from &#x27;./components/ComponentEvent.vue&#x27;</span><br><span class="line">import Main from &#x27;./components/Main.vue&#x27;</span><br><span class="line">import ComponentB from &#x27;./components/ComponentB.vue&#x27;</span><br><span class="line">import Attribute from &#x27;./components/Attribute.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      ComponentEvent,</span><br><span class="line">      Main,</span><br><span class="line">      ComponentB,</span><br><span class="line">      Attribute</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;ComponentEvent/&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;Main/&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;ComponentB /&gt; --&gt;</span><br><span class="line">  &lt;Attribute class=&quot;attr-container&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>禁止继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;透传属性&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    //禁止继承</span><br><span class="line">    inheritAttrs: false</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.attr-container &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import ComponentEvent from &#x27;./components/ComponentEvent.vue&#x27;</span><br><span class="line">import Main from &#x27;./components/Main.vue&#x27;</span><br><span class="line">import ComponentB from &#x27;./components/ComponentB.vue&#x27;</span><br><span class="line">import Attribute from &#x27;./components/Attribute.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      ComponentEvent,</span><br><span class="line">      Main,</span><br><span class="line">      ComponentB,</span><br><span class="line">      Attribute</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;ComponentEvent/&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;Main/&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;ComponentB /&gt; --&gt;</span><br><span class="line">  &lt;Attribute class=&quot;attr-container&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><h4 id="内容与出口"><a href="#内容与出口" class="headerlink" title="内容与出口"></a>内容与出口</h4><p>我们已经了解到组件能够接收任意类型的 JavaScript 值作为 props，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;slotBase&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;插槽标题&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;插槽内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/slotBase&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slotBase from &quot;./components/slotBase.vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    slotBase</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;插槽基础&lt;/h3&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>slot</code> 元素是一个<strong>插槽出口</strong> (slot outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content) 将在哪里被渲染。</p><p><img src="/../images/image-20240915163621486.png" class="lazyload placeholder" data-srcset="/../images/image-20240915163621486.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240915163621486"></p><h4 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h4><p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;slotBase&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;插槽标题&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;插槽内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/slotBase&gt;</span><br><span class="line">  &lt;slotTwo&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/slotTwo&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slotBase from &quot;./components/slotBase.vue&quot;</span><br><span class="line">import slotTwo from &#x27;./components/slotTwo.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    slotBase,</span><br><span class="line">    slotTwo</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;插槽渲染作用域&lt;/h3&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容</h4><p>在外部没有提供任何内容的情况下，可以为插槽指定默认内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">        默认内容</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">&lt;slot&gt;默认内容值&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>有时在一个组件中包含多个插槽出口是很有用的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;slotBase&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;插槽标题&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;插槽内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/slotBase&gt; --&gt;</span><br><span class="line">  &lt;slotTwo&gt;</span><br><span class="line">     &lt;h3&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">     &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h3&gt;标题3&lt;/h3&gt;</span><br><span class="line">     &lt;/template&gt;</span><br><span class="line">     &lt;template v-slot:main&gt;</span><br><span class="line">        &lt;p&gt;内容&lt;/p&gt;</span><br><span class="line">     &lt;/template&gt;</span><br><span class="line">  &lt;/slotTwo&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slotBase from &quot;./components/slotBase.vue&quot;</span><br><span class="line">import slotTwo from &#x27;./components/slotTwo.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    slotBase,</span><br><span class="line">    slotTwo</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;插槽渲染作用域&lt;/h3&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;插槽1&lt;/slot&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;slot name=&quot;main&quot;&gt;插槽2&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>v-slot</code>有对应的简写<code>#</code>，因此<code>&lt;template v-slot:header&gt;</code>可以简写为<code>&lt;template #header&gt;</code>。其中意思就是“将这部分模板片段传入子组件的 header 插槽中”</p></blockquote><p><img src="/../images/image-20240915212140261.png" class="lazyload placeholder" data-srcset="/../images/image-20240915212140261.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240915212140261"></p><h4 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h4><p>在某些场景下，插槽的内容可能想要同时使用父组件域内和子组件域内的数据，要做到这一点，我们需要使用一种方法来让子组件在渲染时将一部分数据提供给插槽，可以像对组件传递<code>props</code>那样，向一个插槽的出口上传递<code>attributes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;slotBase&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;插槽标题&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;插槽内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/slotBase&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;slotTwo&gt;</span><br><span class="line">     &lt;h3&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">     &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h3&gt;标题3&lt;/h3&gt;</span><br><span class="line">     &lt;/template&gt;</span><br><span class="line">     &lt;template v-slot:main&gt;</span><br><span class="line">        &lt;p&gt;内容&lt;/p&gt;</span><br><span class="line">     &lt;/template&gt;</span><br><span class="line">  &lt;/slotTwo&gt; --&gt;</span><br><span class="line">  &lt;slotAtrr v-slot=&quot;slotProps&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123; currentTest &#125;&#125; - &#123;&#123; slotProps.text &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/slotAtrr&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slotBase from &quot;./components/slotBase.vue&quot;</span><br><span class="line">import slotTwo from &#x27;./components/slotTwo.vue&#x27;</span><br><span class="line">import slotAtrr from &quot;./components/slotAtrr.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    slotBase,</span><br><span class="line">    slotTwo,</span><br><span class="line">    slotAtrr</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello world&quot;,</span><br><span class="line">      currentTest: &quot;AG 夺冠&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;slot 传递数据&lt;/h3&gt;</span><br><span class="line">    &lt;slot :text=&quot;child&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            child: &quot;子元素数据&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>具名插槽传递数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- &lt;slotBase&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;插槽标题&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;插槽内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/slotBase&gt; --&gt;</span><br><span class="line">  &lt;!-- &lt;slotTwo&gt;</span><br><span class="line">     &lt;h3&gt;&#123;&#123; msg &#125;&#125;&lt;/h3&gt;</span><br><span class="line">     &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h3&gt;标题3&lt;/h3&gt;</span><br><span class="line">     &lt;/template&gt;</span><br><span class="line">     &lt;template v-slot:main&gt;</span><br><span class="line">        &lt;p&gt;内容&lt;/p&gt;</span><br><span class="line">     &lt;/template&gt;</span><br><span class="line">  &lt;/slotTwo&gt; --&gt;</span><br><span class="line">  &lt;slotAtrr&gt;</span><br><span class="line">    &lt;template #header=&quot;slotProps&quot;&gt;</span><br><span class="line">      &lt;h3&gt;&#123;&#123; currentTest &#125;&#125; - &#123;&#123; slotProps.text &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #main=&quot;slotProps&quot;&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; slotProps.demo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/slotAtrr&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import slotBase from &quot;./components/slotBase.vue&quot;</span><br><span class="line">import slotTwo from &#x27;./components/slotTwo.vue&#x27;</span><br><span class="line">import slotAtrr from &quot;./components/slotAtrr.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    slotBase,</span><br><span class="line">    slotTwo,</span><br><span class="line">    slotAtrr</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello world&quot;,</span><br><span class="line">      currentTest: &quot;AG 夺冠&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;slot 传递数据&lt;/h3&gt;</span><br><span class="line">    &lt;slot :text=&quot;child&quot; name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot :demo=&quot;demo&quot; name=&quot;main&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            child: &quot;子元素数据&quot;,</span><br><span class="line">            demo: &quot;你好中国！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><img src="../images/image-20240915215938663.png" class="lazyload placeholder" data-srcset="../images/image-20240915215938663.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240915215938663" style="zoom: 50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;组件的生命周期&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;updateMessage&quot;&gt;更新数据&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">/**</span><br><span class="line"> *  生命周期函数</span><br><span class="line"> *   创建期: beforeCreate created</span><br><span class="line"> *   挂载期: beforeMount mounted</span><br><span class="line"> *   更新期: beforeUpdate updated</span><br><span class="line"> *   销毁期: beforeUnmount unmounted</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;更新之前&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage() &#123;</span><br><span class="line">      this.message = &quot;更新之后&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&quot;组件创建之前&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;组件创建之后&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&quot;组件渲染之前&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;组件渲染之后&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&quot;组件更新之前&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&quot;组件更新之后&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUnmount() &#123;</span><br><span class="line">    console.log(&quot;组件销毁之前&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  unmounted() &#123;</span><br><span class="line">    console.log(&quot;组件销毁之后&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>组件的生命周期随着我们对<code>Vue</code>的了解越来越多，也会越来越重要，以下是两个常见的应用：</p><ol><li>通过<code>ref</code>获取元素 DOM 结构</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;组件生命周期函数应用&lt;/h3&gt;</span><br><span class="line">    &lt;p ref=&quot;name&quot;&gt;百战程序员&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount() &#123;</span><br><span class="line">        console.log(this.$refs.name)    // undefined</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(this.$refs.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟网络请求渲染数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;组件生命周期函数应用&lt;/h3&gt;</span><br><span class="line">    &lt;p ref=&quot;name&quot;&gt;百战程序员&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item,index) of banner&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123; item.content &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            banner: []</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount() &#123;</span><br><span class="line">        console.log(this.$refs.name)    // undefined</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(this.$refs.name)</span><br><span class="line">        // 模拟网络请求</span><br><span class="line">        this.banner = [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;title&quot;: &quot;题目A&quot;,</span><br><span class="line">                &quot;content&quot;: &quot;内容A&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;title&quot;: &quot;题目B&quot;,</span><br><span class="line">                &quot;content&quot;: &quot;内容B&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;title&quot;: &quot;题目C&quot;,</span><br><span class="line">                &quot;content&quot;: &quot;内容C&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>有些场景需要在两个组件之间来回切换，比如 Tab 界面</p><p>A、B两个组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;component :is=&quot;tabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;button @click=&quot;changeHandler&quot;&gt;切换组件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import A from &quot;./components/A.vue&quot;</span><br><span class="line">import B from &quot;./components/B.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabComponent: &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeHandler() &#123;</span><br><span class="line">      this.tabComponent = this.tabComponent == &quot;A&quot; ? &quot;B&quot; : &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    A,</span><br><span class="line">    B</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>组件保持存活</strong></p><p>当使用<code> &lt;component :is=&quot;...&quot;&gt;</code>时来在多个组件之间作切换时，被切换掉的组件会被卸载。我们可以通过<code>&lt;keep-alive&gt;</code>组件强制被切换掉的组件仍然保持“存活”的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;keep-alive&gt;</span><br><span class="line">    &lt;component :is=&quot;tabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">  &lt;button @click=&quot;changeHandler&quot;&gt;切换组件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import A from &quot;./components/A.vue&quot;</span><br><span class="line">import B from &quot;./components/B.vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabComponent: &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeHandler() &#123;</span><br><span class="line">      this.tabComponent = this.tabComponent == &quot;A&quot; ? &quot;B&quot; : &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    A,</span><br><span class="line">    B</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;h3&gt;A组件&lt;/h3&gt;</span><br><span class="line"> &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line"> &lt;button @click=&quot;updateMessage&quot;&gt;更新数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &quot;Hello World!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        updateMessage() &#123;</span><br><span class="line">            this.message = &quot;你好中国！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,  </span><br><span class="line">    beforeUnmount() &#123;</span><br><span class="line">        console.log(&quot;组件被卸载之前&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    unmounted() &#123;</span><br><span class="line">        console.log(&quot;组件被卸载之后&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;B组件&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">   </span><br><span class="line">&lt;script&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。Vue 提供了 <a href="https://cn.vuejs.org/api/general.html#defineasynccomponent"><code>defineAsyncComponent</code></a> 方法来实现此功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;keep-alive&gt;</span><br><span class="line">    &lt;component :is=&quot;tabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">  &lt;button @click=&quot;changeHandler&quot;&gt;切换组件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import A from &quot;./components/A.vue&quot;</span><br><span class="line">// import B from &quot;./components/B.vue&quot;</span><br><span class="line">//异步加载组件</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &quot;vue&quot;</span><br><span class="line">const B = defineAsyncComponent(() =&gt;&#123;</span><br><span class="line">  import (&#x27;./components/B.vue&#x27;)</span><br><span class="line">&#125;) </span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tabComponent: &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeHandler() &#123;</span><br><span class="line">      this.tabComponent = this.tabComponent == &quot;A&quot; ? &quot;B&quot; : &quot;A&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    A,</span><br><span class="line">    B</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="Prop-逐级透传问题"><a href="#Prop-逐级透传问题" class="headerlink" title="Prop 逐级透传问题"></a>Prop 逐级透传问题</h4><p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用 <a href="https://cn.vuejs.org/guide/components/props.html">props</a>。想象一下这样的结构：有一些多层级嵌套的组件，形成了一棵巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 <code>props</code> 则必须将其沿着组件链逐级传递下去，这会非常麻烦</p><p><img src="/../images/image-20240916115057499.png" class="lazyload placeholder" data-srcset="/../images/image-20240916115057499.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20240916115057499"></p><p><strong>Provide（提供）</strong></p><p>要为组件后代提供数据，需要用到<code>provide</code>选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;祖宗&lt;/h3&gt;</span><br><span class="line">  &lt;parent /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Parent from &#x27;./components/Parent.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Parent</span><br><span class="line">  &#125;,</span><br><span class="line">  provide: &#123;</span><br><span class="line">    message: &quot;爷爷的财产&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h3&gt;Child&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; fullMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    inject: [&quot;message&quot;],</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            fullMessage: this.message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p><code>provide</code>和<code>inject</code>只能由上到下的传递，不能反向传递</p><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;import&#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">&gt;const app = create(&#123;&#125;)</span><br><span class="line">&gt;app.provide(/* 注入名 */ &#x27;message&#x27;, /* 值 */ &#x27;hello!&#x27;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="Vue-应用"><a href="#Vue-应用" class="headerlink" title="Vue 应用"></a>Vue 应用</h2><p>应用实例</p><p>每个 Vue 应用都是通过<code>createApp</code>函数创建一个新的<strong>应用实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 在一个 Vue 项目中，有且只有一个 Vue 的实例对象</span><br><span class="line">const app = createApp(&#123;</span><br><span class="line">/* 根组件选项 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根组件</p><p>我们传入的<code>createApp</code>的对象实际上是一个组件，每个应用都需要一个“根组件”，其他组件将作为其子组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">//从一个单文件组件中导入根组件</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(app)</span><br></pre></td></tr></table></figure><p>挂载应用</p><p>应用实例必须在调用了<code>.mount()</code>方法后才会被渲染，该方法接收一个“容器参数”，可以是一个实际的 DOM 元素或者是一个 CSS 选择器字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line">//浏览器可执行文件：HTML CSS JavaScript Image </span><br><span class="line">//构建工具：Webpack vite</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>公共资源</p><p>在<code>src</code>目录下的<code>assets</code>文件夹的作用就是存放公共资源，例如：图片、公共 CSS 或者字体图标等</p><h2 id="路由机制-router"><a href="#路由机制-router" class="headerlink" title="路由机制 router"></a>路由机制 router</h2><p>路由：就是根据不同的 URL 地址展示不同的内容或者页面。</p><p>路由的作用：</p><ul><li>单页应用程序（SPA）中，路由可以实现不同视图之间的无刷新切换，提升用户体验；</li><li>路由还可以实现页面的认证和权限控制，保护用户的隐私和安全；</li><li>路由还可以利用浏览器的前进和后退，帮助用户更好地回到之前访问过的页面</li></ul><p>创建项目和导入路由依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite//创建项目cd 项目文件夹 // 进入项目录文件夹</span><br><span class="line">npm install  //安装项目需求依赖</span><br><span class="line">npm install vue-router //安装全局的vue - router </span><br></pre></td></tr></table></figure><h3 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//Add.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Add&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;List&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Home.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;home&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Update.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Update&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 创建路由对象需要使用的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入.vue文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//history属性用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="comment">//用于定义多个不同的路径和组件之间的对应关系</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="comment">//默认也为 Home</span></span><br><span class="line">                <span class="attr">default</span>: <span class="title class_">Home</span>,</span><br><span class="line">                <span class="attr">homeView</span>: <span class="title class_">Home</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/list&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="attr">listView</span>: <span class="title class_">List</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/update&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="attr">updateView</span>: <span class="title class_">Update</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="attr">addView</span>: <span class="title class_">Add</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="attr">homeView</span>: <span class="title class_">Home</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 重定向</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showAll&quot;</span>,</span><br><span class="line">            <span class="attr">components</span>: &#123;</span><br><span class="line">                <span class="attr">listView</span>: <span class="title class_">List</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露 Router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明在整个APP.vue中可以使用路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/router.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">   /* </span><br><span class="line">  使用路由实现页面的切换，需要使用router-view和router-link标签</span><br><span class="line"></span><br><span class="line">  一个视图上是可以存在多个router-view的</span><br><span class="line">  每个router-view都可以设置专门用来展示哪个组件</span><br><span class="line">  但是一般来说，一个.vue文件中只需要使用一个router-view标签即可</span><br><span class="line">*/</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    App 开头的内容&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;home页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/update&quot;&gt;update页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/add&quot;&gt;add页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 该标签会被替换成具体的.vue --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    home页&lt;router-view name=&quot;homeView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    list页&lt;router-view name=&quot;listView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    update页&lt;router-view name=&quot;updateView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    add页&lt;router-view name=&quot;addView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    App 结尾的内容</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>普通路由这种方式，<code>to</code>中的内容目前是固定的，点击后只能切换 &#x2F;list对象组件（声明式路由），而对于编程式路由</p><ul><li>通过<code>useRouter</code>，动态决定向哪个组件切换的路由</li><li>在 Vue3 和 Vue Router 4 中，可以使用<code>useRouter</code>来实现动态路由（编程式路由）</li><li>其中这里的<code>useRouter</code>方法放回的是一个<code>router</code>对象，可以用它来做导航到新页面，返回到上一页面操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    /* </span><br><span class="line">    使用路由实现页面的切换，需要使用router-view和router-link标签</span><br><span class="line"></span><br><span class="line">    一个视图上是可以存在多个router-view的</span><br><span class="line">    每个router-view都可以设置专门用来展示哪个组件</span><br><span class="line">    但是一般来说，一个.vue文件中只需要使用一个router-view标签即可</span><br><span class="line">  */</span><br><span class="line">  import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  const router = useRouter()</span><br><span class="line">  let mypath = ref(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">  // function showList() &#123;</span><br><span class="line">  //   //编程式路由实现页面跳转</span><br><span class="line">  //   // router.push(&quot;/list&quot;)</span><br><span class="line">  //   router.push(&#123;path: &quot;/list&quot;&#125;)</span><br><span class="line">  // &#125;</span><br><span class="line">  function goMypage() &#123;</span><br><span class="line">    router.push(mypath.value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    App 开头的内容&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;home页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/update&quot;&gt;update页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/add&quot;&gt;add页&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 该标签会被替换成具体的.vue --&gt;</span><br><span class="line">    &lt;!-- 声明式路由 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- home页&lt;router-view name=&quot;homeView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    list页&lt;router-view name=&quot;listView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    update页&lt;router-view name=&quot;updateView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    add页&lt;router-view name=&quot;addView&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt; --&gt;</span><br><span class="line">    &lt;!-- 编程式路由 --&gt;</span><br><span class="line">    &lt;!-- &lt;button @click=&quot;showList()&quot;&gt;list&lt;/button&gt; --&gt;</span><br><span class="line">     &lt;button @click=&quot;goMypage()&quot;&gt;Go&lt;/button&gt;&lt;input type=&quot;text&quot; v-model=&quot;mypath&quot;&gt;</span><br><span class="line">     &lt;br&gt;</span><br><span class="line">    App 结尾的内容</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他文件内容大致与普通路由相同</p><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>路径参数：在路径中使用一个动态字段来实现</p><blockquote><p>例查看数据详情<code>/showAll/1</code>，<code>1</code>就是我们要查看详情的 id ，可以动态添值</p></blockquote><p>键值对参数：类似于与 get 请求通过 url 传参，数据就是键值对形式的</p><blockquote><p>例如：查看数据详情：<code>/showAll?hid=1</code>，<code>hid=1</code>就是要传递的键值对参数</p><p>在 Vue3 和 Vue Router 4 中，可以使用<code>useRoute</code>这个函数从 Vue 的组合式 API 中获取路由对象</p><p><code>useRoute</code>方法返回的是当前的 route 对象，可以用它去获取关于当前路由的信息，如当前的路径、查询参数等</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  import ShowDetail from &#x27;./components/ShowDetail.vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const router = useRouter()</span><br><span class="line"></span><br><span class="line">  function showData(id,language) &#123;</span><br><span class="line">    router.push(`/showDetail/$&#123;id&#125;/$&#123;language&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">  function showData2(id,language) &#123;</span><br><span class="line">    // router.push(`/showDetail2?id=$&#123;id&#125;&amp;language=$&#123;language&#125;`)</span><br><span class="line">    router.push(&#123;path:&#x27;/showDetail2&#x27;,query: &#123;id:id,language:language&#125;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    App 开头的内容&lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/showDetail/1/Java&quot;&gt;声明式路由路径传参&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showData(2,&#x27;PHP&#x27;)&quot;&gt;编程式路由路径传参&lt;/button&gt;&lt;br&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;router-link to=&quot;/showDetail2?id=1&amp;language=Java&quot;&gt;声明式路由键值对传参&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;router-link v-bind:to=&quot;&#123;path:&#x27;/showDetail2&#x27;,query:&#123;id:2,language:&#x27;PHP&#x27;&#125;&#125;&quot;&gt;声明式路由键值对传参&lt;/router-link&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showData2(3,&#x27;Python&#x27;)&quot;&gt;编程式路由键值对传参&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    App 结尾的内容</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//ShowDetail.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 接收传递过来的路径参数</span><br><span class="line"></span><br><span class="line">// useRoute 函数用来接收参数</span><br><span class="line">//route.params 表示路径参数</span><br><span class="line">//route.query 表示键值对参数</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; ref,onUpdated &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let languageId = ref(0)</span><br><span class="line">let languageName = ref(&quot;&quot;)</span><br><span class="line">let route = useRoute()</span><br><span class="line">languageId = route.params.id</span><br><span class="line">languageName = route.params.language</span><br><span class="line"></span><br><span class="line"> onUpdated(() =&gt; &#123;</span><br><span class="line">     languageId = route.params.id</span><br><span class="line">     languageName = route.params.language</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;ShowDetail接收路径参数&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123; languageId &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123; languageName &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//ShowDetail2.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 接收传递过来的路径参数</span><br><span class="line"></span><br><span class="line">// useRoute 函数用来接收参数</span><br><span class="line">//route.params 表示路径参数</span><br><span class="line">//route.query 表示键值对参数</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; ref,onUpdated &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let languageId = ref(0)</span><br><span class="line">let languageName = ref(&quot;&quot;)</span><br><span class="line">let route = useRoute()</span><br><span class="line">languageId = route.query.id</span><br><span class="line">languageName = route.query.language</span><br><span class="line"></span><br><span class="line"> onUpdated(() =&gt; &#123;</span><br><span class="line">     languageId = route.query.id</span><br><span class="line">     languageName = route.query.language</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;ShowDetail2接收键值对参数&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123; languageId &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123; languageName &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///router/router.js</span></span><br><span class="line"><span class="comment">// 导入 创建路由对象需要使用的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入.vue文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//history属性用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="comment">//用于定义多个不同的路径和组件之间的对应关系</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/list&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/update&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Update</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Add</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 重定向</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showAll&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showDetail/:id/:language&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">ShowDetail</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/showDetail2&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">ShowDetail2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露 Router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>在 Vue3 中，路由守卫是用于在路由切换期间进行一些特定任务的回调函数，路由守卫可以用于许多任务，例如验证用户是否登录、在路由由切换前提供确认提示，请求数据等。Vue3 为路由守卫提供了全面的支持，并提供了以下几种类型的路由守卫：</p><ol><li>全局前置守卫：在路由切换前被调用，可以用于验证用户是否已登录、中断导航、请求数据等。</li><li>全局后置守卫：在路由切换之后被调用，可以用于处理数据、操作 DOM、记录日志等。</li><li>守卫代码的位置：在 router.js 中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="comment">// 导入 创建路由对象需要使用的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入.vue文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//history属性用于记录路由的历史</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="comment">//用于定义多个不同的路径和组件之间的对应关系</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/list&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/update&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Update</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/add&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Add</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 重定向</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showAll&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/showDetail/:id/:language&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">ShowDetail</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/showDetail2&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">ShowDetail2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全局前置守卫</span></span><br><span class="line"><span class="comment">//每次路由切换页面前，都会执行 beforeEach 中的回调函数</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    from 上一个页面，哪里来</span></span><br><span class="line"><span class="comment">    to 下一个页面，到哪里去</span></span><br><span class="line"><span class="comment">    next 放行的方法，只有执行了该方法，才会放行路由</span></span><br><span class="line"><span class="comment">    next()  放行</span></span><br><span class="line"><span class="comment">    next(&quot;/路径&quot;)   路由的重定向</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEach&quot;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">from</span>.<span class="property">path</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>)</span><br><span class="line">   <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全局后置守卫</span></span><br><span class="line"><span class="comment">//每次路由切换页面后，都会执行 afterEach 中的回调函数</span></span><br><span class="line">router.<span class="title function_">afterEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">from</span>.<span class="property">path</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露 Router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="路由测试案例"><a href="#路由测试案例" class="headerlink" title="路由测试案例"></a><strong>路由测试案例</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span>  <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过路由前置守卫校验登录</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//判断如果要去登录界面，直接放行</span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果是其他任何资源，都要在登录之后才会放行</span></span><br><span class="line">        <span class="comment">//如果未登录，重定向到 /login</span></span><br><span class="line">        <span class="keyword">const</span> username = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(username != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//Login.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123;useRouter&#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">  let router = useRouter()</span><br><span class="line">  let username = ref(&#x27;&#x27;)</span><br><span class="line">  let password = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">  //获取用户名和密码，如果密码是123456并且用户名为root，则登录成功</span><br><span class="line">  //登录成功则自动跳转到 /home</span><br><span class="line">  function login() &#123;</span><br><span class="line">    if(username.value == &#x27;root&#x27; &amp;&amp; password.value == &#x27;123456&#x27;) &#123;</span><br><span class="line">      //路由跳转 /home</span><br><span class="line"></span><br><span class="line">      router.push(&quot;/home&quot;)</span><br><span class="line">      // 将用户名保存再浏览器上</span><br><span class="line">      window.sessionStorage.setItem(&quot;username&quot;,username.value)</span><br><span class="line"></span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      alert(&#x27;用户名或者密码错误&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    账号：&lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=&quot;password&quot; v-model=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;login()&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// Home.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">    import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">    const router = useRouter()</span><br><span class="line">    let username = ref(&#x27;&#x27;)</span><br><span class="line">    username.value = window.sessionStorage.getItem(&#x27;username&#x27;)</span><br><span class="line"></span><br><span class="line">    function logout() &#123;</span><br><span class="line">        //清除sessionStorage中的用户信息</span><br><span class="line">        window.sessionStorage.removeItem(&quot;username&quot;)</span><br><span class="line">        //跳转到 /login页面</span><br><span class="line">        router.push(&#x27;/login&#x27;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Home页面&lt;/h1&gt;</span><br><span class="line">        &lt;h3&gt;欢迎&#123;&#123; username &#125;&#125;登录&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;logout()&quot;&gt;退出登录&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>普通函数：正常调用的函数，一般函数执行完毕后才会执行下一行代码</p><p>回调函数：一些特殊的函数，表示未来才会执行的一些功能，后续代码不会等待该函数执行完毕就开始执行了</p><blockquote><p><code>promise</code>：前端中的异步编程技术，类似于 Java 中的多线程+线程结果回调</p><p>它是一种异步编程的一种解决方案，比传统的解决方案—-回调函数和事件更加合理和强大。ES6将其写入了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上来讲，<code>Promise</code>是一个对象，从它可以获取异步操作的消息。<code>Promise</code>提供了统一的 API ，各种异步操作都可以用同样的方法进行处理。</p><p><code>Promise</code>的对象有以下两个特点：</p><ul><li>Promise 对象代表一个异步操作，有三种状态：<code>Pending(进行中)</code>，<code>Resolved(已完成，又称 FullFilled)</code>，和<code>Rejected(已失败)</code>。只要有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这种状态，这也是<code>promise</code>的名字由来。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolve</code>和从<code>Pending</code>变为<code>Rejected</code>，只要这两种情况发生，状态就凝固了，不会在变了，会一直保持这个结果。</li></ul></blockquote><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promsie 实例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            resolve 函数 在回调函数中，如果调用 resolve 方法，promise 会由 Pending 转换为 resolved</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            reject 函数 在回调函数中，如果调用 reject 方法，promise 会由 Pending 转换为 rejected</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// resolve()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// reject()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// resolve(&quot;YES&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// reject(&quot;No&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise2 = promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//promise 转换为 resolved状态时，会执行的函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise success &quot;</span>+data)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 当 promise状态是reject或者 promise出现异常时会执行的函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise fail &quot;</span>+data)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="await和async的用法"><a href="#await和async的用法" class="headerlink" title="await和async的用法"></a>await和async的用法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// async 帮助我们使用简洁的语法获得一个 promise 对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let promise = new Promise(function() &#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// async function func1() &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// async 用户标识函数的 async函数返回的结果就是一个 promise</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法如果正常return结果，promise状态就是resolved，return后的结果就是成功状态的返回值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 方法中出现异常则返回的promise则是一个失败状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// async函数返回的结果如果是一个promise，则状态由内部的promise决定</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// await 帮助我们获取promise成功状态的返回值的关键字</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// await右边如果是一个普通值，则直接返回该值  如果右边是promise，则返回promise成功状态的结果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  let res = await &quot;张三&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  let res = await.Promise.resolve(&quot;张三&quot;) res = &quot;张三&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// await右边如果是一个失败状态的promise，则await会直接抛异常</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// await关键字必须在async修饰的函数中使用，async函数中可以没有await</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// await 后边的代码会等待await执行完毕后继续执行</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    async function func1() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         // return 10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         // throw new Error(&quot;Something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         let promise = Promise.reject(&quot;HELLO WORLD&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         return promise</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    let promise = func1()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    promise.then(</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     function(value)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(&quot;success &quot; + value)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    ).catch(</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     function(value)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(&quot;Fail &quot; + value )</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    )</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let res = await func1()</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;something wrong&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">catch</span>(e) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch got: &quot;</span>+ res )</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await got: &quot;</span> + res)</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">func2</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>Axios</code>是一个基于<code>promise</code>网络请求库，作用于<code>node.js</code></p><p>随机土味情话网站：<a href="https://api.uomg.com/api/rand.qinghua?format=json">https://api.uomg.com/api/rand.qinghua?format=json</a></p><p>API 测试网站：<a href="https://httpbin.org/">https://httpbin.org</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.uomg·.com/api/rand.qinghua?format=jso</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;reactive, ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // let message = ref(&#x27;&#x27;)</span><br><span class="line">  let message = reactive( &#123;</span><br><span class="line">    &quot;code&quot;: 1,</span><br><span class="line">    &quot;content&quot;: &quot;&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">  function getMessage() &#123;</span><br><span class="line">    // 使用axios发送请求获取土味情话</span><br><span class="line">    // axios(&#123;设置请求的参数&#125;)   url 方式 参数</span><br><span class="line">    let promise = axios(&#123;</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      url: &quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        // 如果请求方式是get 则data中的数据会以键值对的形式放在url后面</span><br><span class="line">        // 如果请求方式为post 则data中的数据会以 JSON形式放入请求体</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    promise.then(</span><br><span class="line">      function(res) &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">        // res代表响应结果对象</span><br><span class="line">        // data 服务端响应回来的数据</span><br><span class="line">        // status 响应状态码 200</span><br><span class="line">        // statusText 响应状态描述 OK</span><br><span class="line">        // headers 本次响应的所有响应头</span><br><span class="line">        // config  本次请求的配置信息</span><br><span class="line">        // require 本次请求发送时所使用的XMLHttpRequest对象</span><br><span class="line">        console.log(res.data)</span><br><span class="line">        console.log(res.data.code)</span><br><span class="line">        console.log(res.data.content)</span><br><span class="line">        // message.content = res.data.content</span><br><span class="line">        // message.code = res.data.code</span><br><span class="line">        Object.assign(message,res.data)</span><br><span class="line">      &#125;</span><br><span class="line">    ).catch(</span><br><span class="line">      function() &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-text=&quot;message.content&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;getMessage()&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;reactive, ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // let message = ref(&#x27;&#x27;)</span><br><span class="line">  let message = reactive( &#123;</span><br><span class="line">    &quot;code&quot;: 1,</span><br><span class="line">    &quot;content&quot;: &quot;&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">  function getMessage() &#123;</span><br><span class="line">    // 使用axios发送请求获取土味情话</span><br><span class="line">    // axios(&#123;设置请求的参数&#125;)   url 方式 参数</span><br><span class="line">    let promise = axios(&#123;</span><br><span class="line">      method: &quot;post&quot;,</span><br><span class="line">      url: &quot;https://api.uomg.com/api/rand.qinghua&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        format: &#x27;json&#x27;,</span><br><span class="line">        username: &#x27;张三&#x27;</span><br><span class="line">        // 如果请求方式是get 需要通过params进行发送</span><br><span class="line">        // 如果请求方式为post 并且使用data 则data中的数据会以 JSON形式放入请求体</span><br><span class="line">        // 这里的数据会放入请求体的前提是 请求方式必须是post</span><br><span class="line">      &#125;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        //都是以键值对的方式将数据放入到url后</span><br><span class="line">        format: &#x27;json&#x27;,</span><br><span class="line">        username: &#x27;张三&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    promise.then(</span><br><span class="line">      function(res) &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">        // res代表响应结果对象</span><br><span class="line">        // data 服务端响应回来的数据</span><br><span class="line">        // status 响应状态码 200</span><br><span class="line">        // statusText 响应状态描述 OK</span><br><span class="line">        // headers 本次响应的所有响应头</span><br><span class="line">        // config  本次请求的配置信息</span><br><span class="line">        // require 本次请求发送时所使用的XMLHttpRequest对象</span><br><span class="line">        console.log(res.data)</span><br><span class="line">        console.log(res.data.code)</span><br><span class="line">        console.log(res.data.content)</span><br><span class="line">        // message.content = res.data.content</span><br><span class="line">        // message.code = res.data.code</span><br><span class="line">        Object.assign(message,res.data)</span><br><span class="line">      &#125;</span><br><span class="line">    ).catch(</span><br><span class="line">      function() &#123;</span><br><span class="line">        console.log(&quot;error&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-text=&quot;message.content&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;getMessage()&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Get和Post方法"><a href="#Get和Post方法" class="headerlink" title="Get和Post方法"></a>Get和Post方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;reactive, ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // let message = ref(&#x27;&#x27;)</span><br><span class="line">  let message = reactive( &#123;</span><br><span class="line">    &quot;code&quot;: 1,</span><br><span class="line">    &quot;content&quot;: &quot;&quot;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">//   function getWords() &#123;</span><br><span class="line">//     return axios(&#123;</span><br><span class="line">//         method: &quot;post&quot;,</span><br><span class="line">//         url: &quot;https://api.uomg.com/api/rand.qinghua&quot;,</span><br><span class="line">//         params: &#123;</span><br><span class="line">//             //都是以键值对的方式将数据放入到url后</span><br><span class="line">//             format: &#x27;json&#x27;,</span><br><span class="line">//             username: &#x27;张三&#x27;</span><br><span class="line">//         &#125;</span><br><span class="line">//     &#125;)</span><br><span class="line">//   &#125;</span><br><span class="line">  function getWords() &#123;</span><br><span class="line">    //发送get请求的方法 返回的也是一个promise对象</span><br><span class="line">    //axios.get(url)</span><br><span class="line">    //axios.get(url,&#123;请求的其他信息&#125;)</span><br><span class="line">    //axios.get(url,&#123;params:&#123;键值对参数&#125;,header:&#123;设置一些特殊的请求头&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    //发送post请求</span><br><span class="line">    //axios.post(url,&#123;要放入请求体的json串&#125;，&#123;请求的其他信息&#125;)</span><br><span class="line"></span><br><span class="line">    // return axios.get(&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;)</span><br><span class="line">    // return axios.get(</span><br><span class="line">    //     &quot;https://api.uomg.com/api/rand.qinghua&quot;,</span><br><span class="line">    //     &#123;</span><br><span class="line">    //         params: &#123;</span><br><span class="line">    //             format: &quot;json&quot;,</span><br><span class="line">    //             username: &quot;zhangsan&quot;,</span><br><span class="line">    //             userpwd: &quot;123456&quot;</span><br><span class="line">    //         &#125;,</span><br><span class="line">    //         headers: &#123;</span><br><span class="line">    //             Accept: &quot;application/json, text/plain, text/html,*/*&quot;</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    // )</span><br><span class="line"></span><br><span class="line">    return axios.post(</span><br><span class="line">        &quot;https://api.uomg.com/api/rand.qinghua&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            username: &quot;zhangsan&quot;,</span><br><span class="line">            userpwd: &quot;123456&quot;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">                format: &quot;json&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                Accept: &quot;application/json, text/plain, text/html,*/*&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    // return axios.post(&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async function getMessage() &#123;</span><br><span class="line">    //解构</span><br><span class="line">    let &#123;data&#125; = await getWords()</span><br><span class="line">    Object.assign(message,data)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-text=&quot;message.content&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;getMessage()&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>如果在 Axios 发送请求之前，或者是数据响应回来再执行 then 方法之前做一些额外的工作，可以通过拦截器完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//axios.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">//请求的基础路径</span></span><br><span class="line">    <span class="comment">// baseURL:&quot;https://api.umog.com/&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求前拦截器&quot;</span>)</span><br><span class="line">        <span class="comment">//请求之前，设置请求信息的方法</span></span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Accept</span> = <span class="string">&quot;application/json, text/plain, text/html,*/*&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置完毕之后必须返回 config</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求前拦截器异常方法&quot;</span>)</span><br><span class="line">        <span class="comment">//返回一个失败状态的 promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;something Wrong&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">//响应码为 200 要执行的方法</span></span><br><span class="line">        <span class="comment">// 处理响应数据</span></span><br><span class="line">        <span class="comment">// 最后要返回 res</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;response Success: &quot;</span>+ res)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="comment">//状态为 非 200 要执行的方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fail response: &quot;</span> + error)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后一定要响应一个 Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;Something Wrong&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用默认导出暴露 instance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><h4 id="浏览器同源禁止策略"><a href="#浏览器同源禁止策略" class="headerlink" title="浏览器同源禁止策略"></a>浏览器同源禁止策略</h4><p>当前端服务器和后端服务器不相同，并且前端需要发送请求给后端，让后端响应数据时，对于浏览器而言，请求来自于前端服务器，数据来自于后端服务器，浏览器会认为该数据不安全，会报错，这个就叫<strong>浏览器同源禁止策略</strong>。</p><p>一种解决方案是利用<strong>代理模式</strong>，即让前端服务器自己去后端服务器拉取数据然后再传递给浏览器。这样做的优点是代码稳健性强，但缺点便是会给前端服务器造成太大压力，性能较差。</p><p>另一种解决方案是让浏览器先给后端服务器发出一个预检请求，确认可以安全跨域。当后端向浏览器响应回可以跨域的信息时，客户端再正式发一个请求过去拿去数据。值得注意的是，预检请求在第一次发出之后可以不在接下来的一段时间重复发送，我们可以设置一个时间，超过了这个时间之后再去发一次预检请求。这样一来，我们需要在浏览器和后端服务器之间放置一个跨域过滤器，用于判断请求信息是否为跨域请求。</p><p>以下代码了解即可，实际开发当中跨域问题的处理在框架里只需要写注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnu.schedule.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hnu.schedule.common.Result;</span><br><span class="line"><span class="keyword">import</span> cn.hnu.schedule.util.WebUtil;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrosFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest,</span></span><br><span class="line"><span class="params">                         ServletResponse servletResponse,</span></span><br><span class="line"><span class="params">                         FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        <span class="comment">//允许任何域进行跨域请求</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//允许POST, GET等请求方式进行跨域</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">                <span class="string">&quot;POST, GET, PUT, OPTIONS, DELETE, HEAD&quot;</span>);</span><br><span class="line">        <span class="comment">//预检请求的有效时间是3600s</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">                <span class="string">&quot;access-control-allow-origin, authority, content-type, version-info, X-Requested-With&quot;</span>);</span><br><span class="line">        <span class="comment">//如果是跨域预检请求，则直接在此响应200状态码</span></span><br><span class="line">        <span class="keyword">if</span>(request.getMethod().equalsIgnoreCase(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//向浏览器写出json串</span></span><br><span class="line">            WebUtil.writeJson(response, Result.ok(<span class="literal">null</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//非预检请求，放行即可</span></span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态管理-Pinia"><a href="#状态管理-Pinia" class="headerlink" title="状态管理-Pinia"></a>状态管理-Pinia</h2><p>如何实现多个组件之间的数据传递？</p><ul><li>方式1：组件传参</li><li>方式2：路由传参</li><li>方式3：通过 pinia 状态管理定义共享属性</li></ul><blockquote><p>当我们有<code>多个组件共享一个共同的状态（数据源）时</code>，多个视图可能都依赖于同一份状态。来自不同视图的交互也可能需要更改同一份状态。虽然我们的手动状态管理方案（props、组件之间的通信，模块化）在简单的场景下够用，但是在大规模的生产应用中还有很多其他事项需要考虑</p></blockquote><p>Pinia 就是一个实现了上述需求的状态管理库，由 Vue 核心团队维护，对 Vue2 和 Vue3 都可用。</p><ul><li>pinia 数据无法进行持久化</li><li>pinia 结合 sessionStorage和 localStorage 可以实现持久化</li></ul><p>在实际开发当中，我们可以利用 Pinia 定义多个公共的共享数据，默认均为响应式数据，这样一来，不同组件就可以使用这些响应式数据了（有点类似于后端的 Session 域对象）。但是光靠 Pinia 本身是无法对数据进行持久化存储的，意味着假设利用 Pinia 进行存储，在浏览器上刷新之后这些存储的数据就会被清空掉。故我们还需要结合 SessionStorage 和 LocalStorage 解决上述无法持久化存储的问题。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>开始创建项目之前我们需要执行 <code>npm install pinia</code> 命令安装对应依赖。</p><p>在 <code>src</code> 中创建一个 <code>store</code> 目录，然后创建一个 <code>store.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义共享的pinia数据 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个person对外共享</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&quot;personPinia&quot;</span>,  <span class="comment">//当前数据的id必须全局唯一，意味着其他store文件里面不能有id重复</span></span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;<span class="comment">//表示状态，其实就是响应式数据，return里面的数据才是最终要使用的数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">username</span>:<span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">hobbies</span>:[<span class="string">&quot;唱歌&quot;</span>, <span class="string">&quot;跳舞&quot;</span>]&#125;</span><br><span class="line">    &#125;,   </span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="comment">//类似于javabean中的getter，不过最终是以属性值的方式呈现出来</span></span><br><span class="line">        <span class="attr">getAge</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;<span class="keyword">return</span> state.<span class="property">age</span>&#125;,<span class="comment">//如果是箭头函数，无法使用this的情况下可以使用state</span></span><br><span class="line">        <span class="title function_">getHobbyCount</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="comment">//类似于javabean中的setter</span></span><br><span class="line">        <span class="title function_">doubleAge</span>(<span class="params"></span>) &#123;<span class="variable language_">this</span>.<span class="property">age</span> *= <span class="number">2</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中需要使用 pinia：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; router &#125; <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启全局的pinia功能</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用pinia</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在组件 <code>.vue</code> 文件中使用 pinia 中定义的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  //导入pinia数据</span><br><span class="line">  import &#123; definedPerson &#125; from &#x27;../store/store.js&#x27;</span><br><span class="line">  //获得共享数据</span><br><span class="line">  let person = definedPerson()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用于修改pinia数据&lt;/h1&gt;</span><br><span class="line">    &#123;&#123; person &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p>上面的基本写法真的是太折磨人了，写起来很别扭，所以，利用 setup 语法糖可以让代码更加简洁。在 setup 语法糖中：ref 就是 state 属性；computed 计算属性就是 getters；function 就是 actions。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMoneyStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;money&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">const</span> money = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="comment">// getters</span></span><br><span class="line">    <span class="keyword">const</span> rmb = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> money.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">const</span> usd = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> money.<span class="property">value</span> * <span class="number">0.14</span>)</span><br><span class="line">    <span class="keyword">const</span> eur = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> money.<span class="property">value</span> * <span class="number">0.13</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setters</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">win</span> = (<span class="params">arg</span>) =&gt; &#123;</span><br><span class="line">        money.<span class="property">value</span> += arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">pay</span> = (<span class="params">arg</span>) =&gt; &#123;</span><br><span class="line">        money.<span class="property">value</span> -= arg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回给外界使用</span></span><br><span class="line">    <span class="keyword">return</span> &#123;money , rmb, usd, eur, win, pay&#125;</span><br><span class="line">&#125;, </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span><span class="comment">// 持久化存储（见pinia持久化一小节）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在路由文件中使用"><a href="#在路由文件中使用" class="headerlink" title="在路由文件中使用"></a>在路由文件中使用</h3><p>在路由文件中使用 Pinia，我们需要对外提供一个 pinia 对象，然后使用这个对象在路由文件中创建对应的共享数据。</p><p>在 <code>src</code> 目录中创建 <code>pinia.js</code> 文件，对外暴露 pinia 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br></pre></td></tr></table></figure><p>路由文件中使用 pinia 对象来创建共享数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入pinia相关文件和函数</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;../pinia.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineUser &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/userStore.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建共享数据时需要额外填入pinia对象</span></span><br><span class="line"><span class="keyword">let</span> sysUser = <span class="title function_">defineUser</span>(pinia)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> &#123; router &#125;</span><br></pre></td></tr></table></figure><h3 id="常见-API"><a href="#常见-API" class="headerlink" title="常见 API"></a>常见 API</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  //导入pinia数据</span><br><span class="line">  import &#123; definedPerson &#125; from &#x27;../store/store.js&#x27;</span><br><span class="line">  //获得共享数据</span><br><span class="line">  let person = definedPerson()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用于修改pinia数据&lt;/h1&gt;</span><br><span class="line">    名字: &lt;input type=&quot;text&quot; v-model=&quot;person.username&quot;&gt;&lt;br&gt;</span><br><span class="line">    年龄: &lt;input type=&quot;text&quot; v-model=&quot;person.age&quot;&gt;&lt;br&gt;</span><br><span class="line">    爱好: &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; value=&quot;吃饭&quot; v-model=&quot;person.hobbies&quot;&gt;吃饭&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; value=&quot;睡觉&quot; v-model=&quot;person.hobbies&quot;&gt;睡觉&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; value=&quot;唱歌&quot; v-model=&quot;person.hobbies&quot;&gt;唱歌&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; value=&quot;跳舞&quot; v-model=&quot;person.hobbies&quot;&gt;跳舞&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; value=&quot;rap&quot; v-model=&quot;person.hobbies&quot;&gt;rap&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;person.doubleAge()&quot;&gt;年龄加倍&lt;/button&gt;</span><br><span class="line">    &lt;!-- 调用$reset方法恢复默认值 --&gt;</span><br><span class="line">    &lt;button @click=&quot;person.$reset()&quot;&gt;恢复默认值&lt;/button&gt;</span><br><span class="line">    &lt;!-- 调用$patch方法一次性修改多个属性值 --&gt;</span><br><span class="line">    &lt;button @click=&quot;person.$patch(&#123;username:&#x27;热心市民灰灰&#x27;, age:19, hobbies:[&#x27;写代码&#x27;]&#125;)&quot;&gt;变身&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;&#123; person &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="pinia-持久化"><a href="#pinia-持久化" class="headerlink" title="pinia 持久化"></a>pinia 持久化</h3><p>Pinia 默认是<strong>内存存储</strong>，当刷新浏览器的时候会丢失数据。我们可以使用插件 Persist 将 pinia 中的数据持久化的存储起来。</p><p>安装 Persist 插件：<code>npm install pinia-persistedstate-plugin</code>。</p><p>接下来，在 pinia 中使用插件（<code>main.js</code> 文件中进行编码）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPersistedState &#125; <span class="keyword">from</span> <span class="string">&quot;pinia-persistedstate-plugin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> persist = <span class="title function_">createPersistedState</span>()</span><br><span class="line"></span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br></pre></td></tr></table></figure><p>然后定义状态 store 时指定持久化配置参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;token&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义状态内容</span></span><br><span class="line">    <span class="comment">// 响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setters</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>) =&gt; &#123;</span><br><span class="line">        token.<span class="property">value</span> = newToken</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;token, setToken, removeToken&#125;</span><br><span class="line">&#125;, </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span><span class="comment">// 持久化存储</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Element-plus"><a href="#Element-plus" class="headerlink" title="Element-plus"></a>Element-plus</h2><blockquote><p>Element Plus 是一套基于 Vue3 的开源 UI 组件库，是由饿了么前端团队开发的升级版本的 Element UI。Element Plus 提供了丰富的 UI 组件（Element UI 组件库是针对于 Vue2 开发的），易于使用的 API 接口和灵活的主题定制功能，可以帮助开发者快速构建高质量的 Web 应用程序。</p></blockquote><p>Element Plus 目前已经推出了大量的常用 UI 组件，如按钮、表单、表格、对话框、选项卡等，此外还提供了一些高级组件，如日期选择器、时间选择器、级联选择器、滑块、颜色选择器等。这些组件具有一致的设计和可靠的代码质量，可以为开发者提供稳定的使用体验。官网<a href="https://element-plus.gitee.io/zh-CN/">戳我</a>。</p><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>在使用前需要利用 <code>npm install element-plus</code> 命令安装对应依赖。</p><p><code>main.ts</code> 配置如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入element-plus相关内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ElementPlus</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接下来，在组件文件中，我们只需要去网站上面复制相关源代码即可。较常用的组件包括但不限于：按钮、图标、提示框、导航、标签页、输入框、单选框、复选框、下拉框、日期选择器、表单、对话框、分页、表格……</p><h3 id="其他组件库"><a href="#其他组件库" class="headerlink" title="其他组件库"></a>其他组件库</h3><p>Ant Designed Vue：<a href="https://www.antdv.com/">https://www.antdv.com/</a></p><p>Naive UI：<a href="http://www.naiveui.com/">www.naiveui.com</a></p><h2 id="Apache-ECharts"><a href="#Apache-ECharts" class="headerlink" title="Apache ECharts"></a>Apache ECharts</h2><p>Apache ECharts 是一款基于 Javascript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。</p><p>官方地址<a href="https://echarts.apache.org/zh/index.html">戳我</a>。</p><h2 id="前后端分离总结"><a href="#前后端分离总结" class="headerlink" title="前后端分离总结"></a>前后端分离总结</h2><h3 id="初始环境准备"><a href="#初始环境准备" class="headerlink" title="初始环境准备"></a>初始环境准备</h3><p>在 src 目录下，asserts 目录是用来存放静态资源的（包括 css 样式，所需要的图片资源等）；新建 api 目录用来封装各种请求函数；新建 util 目录用来存放 <code>reqeust.js</code>（配置 axios 的拦截器）；新建 views 目录用来存放各种页面。</p><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><p>前端经常使用到的就是表单提交，在使用 Element-Plus 组件的前提下，用 <code>el-form</code> 进行表单处理。在使用表单的时候，需要结合接口文档，先声明数据模型。例如，注册页面的所需要的数据模型如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数据模型</span></span><br><span class="line"><span class="keyword">const</span> registerData = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">rePassword</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后不要忘了根据数据模型中的各种参数，进行<strong>表单参数校验</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义校验规则</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">validatePass</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请再次输入密码&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (value !== registerData.<span class="property">value</span>.<span class="property">password</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;两次密码输入不一致&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义表单校验规则</span></span><br><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">&#x27;长度为5-16非空字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">password</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">&#x27;长度为5-16非空字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">rePassword</span>: [</span><br><span class="line">    &#123;<span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>由于<strong>浏览器</strong>的同源策略限制，向不同源（不同协议、不同域名、不同端口）发送 ajax 请求失败。前端服务端口设置在 5173，后端服务端口设置在 8080。当浏览器启动服务时，先向 5173 请求一个注册页面，当我们点击注册按钮时，5173 端口发送 ajax 请求向 8080 请求服务，这个时候对于浏览器来讲就是不同源了。</p><p>跨域问题一般使用<strong>配置代理</strong>解决。即我们发送请求依旧是向 5173，然后再让 5173 把请求转发到 8080。注意：<strong>跨域是针对浏览器而言的，只有浏览器才有同源禁止策略</strong>。</p><p>在 <code>reqeust.js</code> 中更改 <code>baseURL</code> 地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// baseURL: &#x27;http://localhost:8023&#x27;,</span></span><br><span class="line">    <span class="comment">// 更改baseURL</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后更改 <code>vite.config.js</code> 文件进行请求转发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 获取路径中包含/api的请求</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8023&#x27;</span>,  <span class="comment">// 后台服务所在的源</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,               <span class="comment">// 修改源</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 将/api替换为空字符串</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="优化-axios-拦截器"><a href="#优化-axios-拦截器" class="headerlink" title="优化 axios 拦截器"></a>优化 axios 拦截器</h3><p>我们在实现各种服务接口的时候，我们经常需要去处理响应回来的数据。并且，在发送请求的时候，我们常常需要携带 token。结合上述的跨域问题，我们不妨直接配置一个 axios 拦截器，帮助我们进行数据的处理：</p><p><code>request.js</code> 如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTokenStore &#125; <span class="keyword">from</span> <span class="string">&quot;@/stores/token.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/router.js&#x27;</span><span class="comment">// 注意这里的导入方式，不能使用useRouter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// baseURL: &#x27;http://localhost:8023&#x27;,</span></span><br><span class="line">    <span class="comment">// 更改baseURL</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 判断业务状态码</span></span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果响应是文件流，直接返回响应</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 操作成功</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 操作失败</span></span><br><span class="line">        <span class="comment">// alert(response.data.message ? response.data.message : &#x27;服务异常&#x27;)</span></span><br><span class="line">        <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">message</span> ? response.<span class="property">data</span>.<span class="property">message</span> : <span class="string">&#x27;服务异常&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="attr">plain</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码如果为401，则证明未登录</span></span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;请先登录&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                <span class="attr">plain</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;服务异常&#x27;</span>,</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                <span class="attr">plain</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 请求前的回调</span></span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加token</span></span><br><span class="line">        <span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line">        <span class="keyword">if</span> (tokenStore.<span class="property">token</span>) &#123; <span class="comment">// 如果有token则添加token</span></span><br><span class="line">            config.<span class="property">headers</span>.<span class="property">Authorization</span> = tokenStore.<span class="property">token</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求错误的回调</span></span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><p>需要准备好 pinia 状态管理库，对 token 进行管理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTokenStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;token&#x27;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 定义状态内容</span></span><br><span class="line">    <span class="comment">// 响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setters</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">newToken</span>) =&gt; &#123;</span><br><span class="line">        token.<span class="property">value</span> = newToken</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeToken</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        token.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;token, setToken, removeToken&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>服务接口函数只需要接收然后弹出提示即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tokenStore = <span class="title function_">useTokenStore</span>()</span><br><span class="line"><span class="comment">// ---登录表单---</span></span><br><span class="line"><span class="comment">// 复用注册表单的数据模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">userLoginService</span>(registerData.<span class="property">value</span>)</span><br><span class="line">  <span class="comment">// 设置token</span></span><br><span class="line">  tokenStore.<span class="title function_">setToken</span>(result.<span class="property">data</span>)</span><br><span class="line">  <span class="comment">// alert(result.message ? result.message : &#x27;登录成功&#x27;)</span></span><br><span class="line">  <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: result.<span class="property">message</span> ? result.<span class="property">message</span> : <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">plain</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其他的请求也仅仅只是直接发送即可，没必要再额外向请求头中添加 token 信息了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文章分类列表查询</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">articleCategoryListService</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> instance.<span class="title function_">get</span>(<span class="string">&#x27;/category&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot</title>
      <link href="/2025/07/28/springBoot/"/>
      <url>/2025/07/28/springBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><blockquote><p>SpringBoot 是目前流行的微服务框架，其目的是用来简化新 Spring 应用的初始化搭建以及开发过程。SpringBoot 提供了很多核心功能，比如自动化配置 starter（启动器）简化 Maven 配置、内嵌 Servlet 容器、应用监控等功能，让我们可以快速构建企业级应用程序。</p></blockquote><h2 id="SpringBoot-入门"><a href="#SpringBoot-入门" class="headerlink" title="SpringBoot 入门"></a>SpringBoot 入门</h2><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><p>软件工程中的脚手架是用来快速搭建一个小的可用的应用程序的骨架，将开发过程中要用到的工具，环境都配置好，同时生成必要的模板代码。Spring Initializr 是创建 Spring Boot 的脚手架，IDEA 内置了此工具，可以帮助我们快速创建项目。</p><p>Spring Initializr 脚手架的 Web <a href="https://start.spring.io/">地址</a>。</p><p>阿里云<a href="https://start.aliyun.com/">脚手架</a>。</p><p>项目中的<code>.mvn</code>、<code>mvnw.cmd</code>、<code>HELP.md</code>、<code>mvnw</code>可以删除。</p><p>在<code>application.properties</code>配置文件中配置<code>server.port</code>可以解决可能出现的 8080 端口冲突的问题。</p><h3 id="starter-启动器"><a href="#starter-启动器" class="headerlink" title="starter 启动器"></a>starter 启动器</h3><p>starter 是一组依赖描述，应用中包含 starter，可以获取 Spring 相关技术的一站式的依赖和版本。不必复制、粘贴代码，通过 starter 能够快速启动并运行项目。包含了依赖和版本、传递依赖和版本、配置类、配置项。</p><h3 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h3><p>默认的 SpringBoot 项目继承了 SpringBoot 父项目，该父项目包含了 SpringBoot 相关的依赖管理和版本管理，直接继承该父项目可以直接使用 SpringBoot 相对应的依赖和版本。如果不继承父项目，<strong>想要让项目继承自己的父项目</strong>，可以通过以下配置获得相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h2><h3 id="核心注解"><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h3><p>SpringBoot 核心注解：<code>@SpringBootApplication</code>，作用在 main 方法所在的类之上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBootApplication是一个复合注解</span></span><br><span class="line"><span class="comment"> * 包含了以下三个注解：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootConfiguration</span></span></span><br><span class="line"><span class="comment"> *   该注解包含了Configuration注解的功能，有这个注解的类就是配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableAutoConfiguration</span></span></span><br><span class="line"><span class="comment"> *   该注解可以开启自动配置，可以将Spring和第三方库中的对象创建好，注入到容器中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ComponentScan</span></span></span><br><span class="line"><span class="comment"> *   自动扫描器，SpringBoot约定扫描启动类所在的根包，故我们的类必须写在根包下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lession06PackageApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// run方法第一个参数是源类，也就是配置类</span></span><br><span class="line">        <span class="comment">// 从源类开始创建各种对象并注入到容器之中</span></span><br><span class="line">        <span class="comment">// 该方法的返回值是一个容器对象ApplicationContext,可以从容器获取对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SpringApplication.run(Lession06PackageApplication.class, args);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">bean</span> <span class="operator">=</span> ctx.getBean(Date.class)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行-SpringBoot项目方式"><a href="#运行-SpringBoot项目方式" class="headerlink" title="运行 SpringBoot项目方式"></a>运行 SpringBoot项目方式</h3><ul><li><p>开发工具，例如 IEDA 执行 main 方法</p></li><li><p>Maven 插件，mvn spring-boot:run</p></li><li><p>java   -jar myWeb.jar  </p><p>SpringBoot 可以将项目打包为 jar 包 或者 war 文件，因为 SpringBoot 内嵌了 web 服务器，例如 tomcat。能够以 jar 方式运行 web 应用。无需安装 tomcat 程序。</p></li></ul><h3 id="SpringBoot-的-jar-文件和普通-jar-文件的区别"><a href="#SpringBoot-的-jar-文件和普通-jar-文件的区别" class="headerlink" title="SpringBoot 的 jar 文件和普通 jar 文件的区别"></a>SpringBoot 的 jar 文件和普通 jar 文件的区别</h3><table><thead><tr><th align="left">项目</th><th align="left">SpringBoot jar</th><th align="left">普通 jar</th></tr></thead><tbody><tr><td align="left">目录</td><td align="left">BOOT-INF：应用的 class 和依赖 jar、META-INF：清单、org.springframework.boot.loader：spring-boot-loader 模块类</td><td align="left">META-INF：清单、class 的文件夹：jar 中的所有类</td></tr><tr><td align="left">BOOT-INF</td><td align="left">class：应用的类、lib：应用的依赖</td><td align="left">没有BOOT-INF</td></tr><tr><td align="left">spring-boot-loader</td><td align="left">执行 jar 的 SpringBoot 类</td><td align="left">没有此部分</td></tr><tr><td align="left">可执行</td><td align="left">能</td><td align="left">否</td></tr></tbody></table><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><p>应用程序 &#x3D; 代码+数据（数据库，文件，url）</p><p>应用程序的配置文件：SpringBoot 允许在代码之外，提供应用程序运行的数据， 以便在不同的环境中使用相同的应用程序代码，避免硬编码，提供系统的灵活性。项目中常使用 <code>properties</code> 和 <code>yaml</code> 文件进行配置，其次是命令行参数。</p><p>配置文件的名称为<code>application</code>，如果 <code>properties</code> 和 <code>yml</code> 类型都存在，<strong>优先加载 properties</strong>。不过，考虑到阅读性，我们更推荐使用 yml 格式的配置文件。</p><h4 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h4><p>配置文件格式有两种：<code>properties</code> 和 <code>yaml(yml)</code>，<code>properties</code>是 Java 中的常用一种配置文件格式，key &#x3D; value。key 是唯一的，文件扩展名是<code>properties</code>。</p><p><code>yaml</code>也看做是<code>yml</code>，是一种做配置文件的数据格式，基本的语法是key:[空格]值。yml 文件文件扩展名是 yaml 和 yml(常用)。</p><p>yml格式特点：</p><p>YAML基本语法规则：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进可以使用空格，不允许使用 Tab 键</li><li>缩进的空格数目不重要，相同层级的元素左侧对齐即可</li><li>#字符表示注释，只支持单行注释。#放在注释行的第一个字符</li></ul><p>YAML 缩进必须使用空格，而且区分大小写，建议编写YAML文件只用小写和空格。</p><p>YAML支持三种数据结构</p><ul><li>对象：键值对的集合，又称为映射、哈希、字典</li><li>数组：一组按次序排列的值，又称为序列、列表</li><li>标量：单个的、不可再分的值</li></ul><h4 id="properties-配置"><a href="#properties-配置" class="headerlink" title="properties 配置"></a>properties 配置</h4><p>在 properties 文件中指定 key 和 value：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app.owner</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="attr">app.password</span>=<span class="string">040809</span></span><br></pre></td></tr></table></figure><p>利用注解使用 properties 中的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@Value注入值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.owner&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $&#123;key:默认值&#125;，找不到key就使用默认值给属性赋值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app.port:8080&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printValue</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; &quot;</span> + password + <span class="string">&quot; &quot;</span> + port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yml-扁平化"><a href="#yml-扁平化" class="headerlink" title="yml 扁平化"></a>yml 扁平化</h4><p>在 yml 文件中也可以指定配置的 key 和 value：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写配置项，格式 -&gt; key: 值</span></span><br><span class="line"><span class="comment"># 通过换行表示层级关系，这种也叫yml扁平化</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Lession06-package</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">040809</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8023</span></span><br></pre></td></tr></table></figure><p>注意，如果 yml 和 properties 文件同时存在的话，会优先加载 properties 文件的内容。</p><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><p>Environment 是外部化的抽象，是多种数据来源的集合。从中可以<strong>读取 application 配置文件、yml 文件、环境变量，系统属性</strong>。使用方式在 Bean 中注入 Environment，调用它的 <code>getProperty(key)</code> 方法。也就是说，如果我们要读取的配置文件散落在很多地方，那么我们只需要使用 Environment 来读取即可，相当于 Environment 帮助我们把这些散落的文件组织到一起了。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入环境对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断某个key是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(environment.containsProperty(<span class="string">&quot;app.owner&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(environment.getProperty(<span class="string">&quot;app.owner&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取key的值，转为期望类型，同时提供默认值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">password</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;app.password&quot;</span>, Integer.class, <span class="number">666</span>);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组织多文件"><a href="#组织多文件" class="headerlink" title="组织多文件"></a>组织多文件</h4><p>大型集成的第三方框架，中间件比较多。每个框架的配置细节相对复杂，如果都将配置到一个 application 文件中，那么会导致文件的内容非常庞大，不易于阅读。所以，我们要将每个框架都独立出来一个配置文件，最后将多个文件集中到一个 application 文件中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入其他的配置文件，多个文件利用逗号分割</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">conf/db.yml,</span> <span class="string">conf/redis.yml</span></span><br></pre></td></tr></table></figure><h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><p>软件开发中常提到环境这个概念，影响软件运行的因素就叫环境，例如 ip、用户名和密码、端口、配置文件的路径等。Spring Profiles 表示环境，<strong>Profiles 有助于隔离应用程序配置</strong>，并使得它们在某些环境中可用。SpringBoot 规定环境文件名称为<code>application-&#123;profile&#125;.properties(yml)</code>，其中 profile 表示自定义的环境名称，通常我们用 dev 表示开发环境，test 表示测试环境，prod 表示生产环境，feature 表示特性。在加载的时候，是配置文件和环境文件一起加载的。</p><p>环境配置文件（<code>application-dev.yml</code>）示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">myapp:</span></span><br><span class="line">  <span class="attr">memo:</span> <span class="string">开发环境的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定环境名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>在 application 中使用对应的环境配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入其他的配置文件，多个文件利用逗号分割</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span> <span class="string">conf/db.yml,</span> <span class="string">conf/redis.yml</span></span><br><span class="line">  <span class="comment"># 激活环境配置文件</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h3 id="绑定-Bean"><a href="#绑定-Bean" class="headerlink" title="绑定 Bean"></a>绑定 Bean</h3><p>当我们使用 @Value 绑定属性值的时候，一次性只能绑定单个值，比较不方便。SpringBoot 提供了另一种属性的方法，将多个配置项绑定到 Bean 的属性，提供强类型的 Bean。</p><p>基本原则：标准的 JavaBean 有无参数构造方法，包含属性的访问器，配合 @ConfigurationProperties 注解一起使用，<strong>Bean 的 static 属性不支持</strong>。</p><p>SpringBoot 中大量使用绑定 Bean 与 @ConfigurationProperties，提供对框架的定制参数。项目中要使用的数据如果是可变的，推荐在 yml 或 properties 中提供，这样可以让代码具有更加大的灵活性。</p><p>@ConfigurationProperties 注解能够配置多个简单类型属性，同时支持 Map、List、数组类型，对属性还能验证基本格式。</p><h4 id="绑定简单类型数据"><a href="#绑定简单类型数据" class="headerlink" title="绑定简单类型数据"></a>绑定简单类型数据</h4><p>假设 yml 文件中的内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Lession06-package</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">040809</span></span><br></pre></td></tr></table></figure><p>我们使用 @ConfigurationProperties 注解来绑定 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建普通的Bean,非 spring 代理</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">// 默认创建的是代理对象，但如果我们不需要，关掉反而可以提高性能</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;app&quot;)</span> <span class="comment">// 指定前缀，即相同的开始关键字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// key的名称与属性名相同，框架会调用set方法给其赋值，属性不可以用static修饰</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套-Bean"><a href="#嵌套-Bean" class="headerlink" title="嵌套 Bean"></a>嵌套 Bean</h4><p>有些时候我们需要在 Bean 中包含其他 Bean 作为属性，将配置文件中的配置项绑定到 Bean 以及引用类型的成员。</p><p>例如有配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Lession06-package</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">040809</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line">  <span class="comment"># 嵌套的Security类</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>接下来我们使用嵌套 Bean 为属性赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;app&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestAppBean</span> &#123;</span><br><span class="line">    <span class="comment">// NestAppBean的自身原本属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="comment">// 内部嵌套了另一个bean</span></span><br><span class="line">    <span class="keyword">private</span> Security security;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扫描注解"><a href="#扫描注解" class="headerlink" title="扫描注解"></a>扫描注解</h4><p>要想让 <code>@ConfigurationProperties </code>所绑定的 Bean 起作用，我们还需要是用 <code>@EnableConfigurationProperties</code> 或 <code>@ConfigurationPropertiesScan</code>。这些注解是专门寻找 <code>@ConfigurationProperties </code>注解的，将它的对象注入到 Spring 容器。在启动类上使用扫描注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用 ConfigurationProperties 属性是类的名字</span></span><br><span class="line"><span class="comment">//@EnableConfigurationProperties(&#123;NextAppBean.class&#125;)</span></span><br><span class="line"><span class="comment">//扫描注解的包名 其中绑定的 Bean 会被注入 Spring 容器</span></span><br><span class="line"><span class="meta">@ConfigurationPropertiesScan(basePackages = &#123;&quot;com.example.demo.config.pk5&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 以上两种方式都可以使得 @ConfigurationProperties 所绑定的 Bean 起作用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定第三方对象"><a href="#绑定第三方对象" class="headerlink" title="绑定第三方对象"></a>绑定第三方对象</h4><p>有些时候，我们嵌套 Bean 中使用的 Bean 不是我们自己定义的，无源代码，但是我们需要在配置文件中提供属性。此时 @ConfigurationProperties 结合 @Bean 一起在<strong>方法</strong>上面使用可以解决这个问题。</p><p>比如现在有一个 Security 类是<strong>第三方</strong>库中的类，现在要提供它的 username 和 password 属性值。</p><p>在本项目的 application 配置文件中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第三方库对象，没有源代码</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">common</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>创建配置类，注入属性值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Bean对象，属性来自配置文件</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;security&quot;)</span></span><br><span class="line">    <span class="comment">// 标记为Bean的创建方法</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Security <span class="title function_">createSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Security</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来可以使用对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性自动注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Security security;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testApplicationConfig</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Security security = applicationConfig.createSecurity();</span></span><br><span class="line"><span class="comment">//        System.out.println(security);</span></span><br><span class="line">    System.out.println(security);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的绑定"><a href="#集合的绑定" class="headerlink" title="集合的绑定"></a>集合的绑定</h4><p>Map、List、Array 都能提供配置数据。</p><p>保存数据的 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ConfigurationProperties进行配置文件属性赋值，主要在启动类上要进行包扫描</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;MyServer&gt; servers;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; users;</span><br><span class="line">    <span class="keyword">private</span> String[] names;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application 配置文件中编写属性配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置集合</span></span><br><span class="line"><span class="comment"># 数组和List集合的配置格式是一样的，使用 - 表示一个成员</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">华北服务器</span></span><br><span class="line">    <span class="attr">ip:</span> <span class="number">202.12</span><span class="number">.9</span><span class="number">.7</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">西南服务器</span></span><br><span class="line">    <span class="attr">ip:</span> <span class="number">106.23</span><span class="number">.32</span><span class="number">.11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Map集合的成员配置需要指定key和value</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="attr">user1:</span> <span class="comment"># 指定key为user1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">    <span class="attr">gender:</span> <span class="string">男</span></span><br><span class="line">  <span class="attr">user2:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">    <span class="attr">gender:</span> <span class="string">女</span></span><br></pre></td></tr></table></figure><h4 id="指定数据源文件"><a href="#指定数据源文件" class="headerlink" title="指定数据源文件"></a>指定数据源文件</h4><p>一般我们使用 application 作为配置文件，但是，我们通常希望有一个特定的文件配置各个 Bean 的属性值来作为我们的数据来源。在类上使用 @PropertySource 可以指定 <strong>properties 文件</strong>（注意不是 yaml 文件，该注解并不支持这种类型的文件解析）作为数据来源。该注解与 @Configuration 一同使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/groupInfo.properties&quot;)</span> <span class="comment">// 指定类路径下的资源</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;group&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String leader;</span><br><span class="line">    <span class="keyword">private</span> Integer members;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h3><p>将对象注入到 Spring 容器，可以通过如下方式：</p><ul><li>传统的 XML 配置文件。</li><li>Java Config 技术，通过 @Configuration 和 @Bean。</li><li>创建对象的注解：@Component、@Controller、@Service、@Repository。</li></ul><p>SpringBoot 不推荐使用 XML 配置文件的方式，自动配置已经解决了大部分 xml 中的配置工作了。如果需要 xml 提供 bean 的声明，@ImportResource 加载 xml 注册 Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定xml配置文件</span></span><br><span class="line"><span class="meta">@ImportResource(locations = &quot;classpath:/applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lession06PackageApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableAppicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(Lession06PackageApplication.class, args);</span><br><span class="line">        <span class="comment">// 获取bean对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> run.getBean(Person.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>面向切面编程，可以在保持原本代码不变的情况下，给原有的业务逻辑添加二维的功能，对于扩展功能十分有利，Spring 的事务功能就是在 AOP 的基础上去实现的。</p><ul><li>Aspect：表示切面，开发自己编写功能增强代码的地方，这些代码会通过动态代理加入到原有的业务方法中。@Aspect 注解表示当前类是切面类。切面类是一个普通类。</li><li>Joinpoint：表示连接点，连接切面和目标对象。或是一个方法名称，一个包名，类名。在这个特定的位置执行切面中的功能代码。</li><li>切入点（Pointcut）：其实筛选出来的连接点，一个类中的所有方法都可能是 JoinPoint，具体的哪个方法要增加功能，这个方法就是 PointCut。</li><li>Advice：通知，也叫增强。表示增强的功能执行时间。主要包括5个注解：@Before @After @ AFterReturning @AfterThrowing @Around。注解来自 aspectj 框架。</li></ul><p>SpringBoot 中使用 AOP 需要先引入对应依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AOP 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="meta">@Service(&quot;someService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SomeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save &quot;</span> + name + <span class="string">&quot; &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 在类中定义功能增强的方法</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(public void cn.hnu.springboot.lession08.aop.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sysLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;功能增强完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>启用 autoconfigure（自动配置），框架尝试猜测要使用的 Bean，从类路径中查找 <code>xxx.jar</code>，创建这个 jar 中某些需要的 Bean。例如我们使用 MyBatis 访问数据，从我们项目的类路径中寻找 <code>mybatis.jar</code>，进一步创建 SqlSessionFactory，还需要 DataSource 数据源对象，尝试连接数据。这些工作交给<code>XXXAutoConfiguration</code> 类，这些就是自动配置类。在 <code>spring-boot-autoconfigure-3.0.2.jar</code> 定义了很多的<code>XxXAutoConfiguration</code> 类。第三方框架的 starter 里面包含了自己的 <code>XXXAutoConfiguration</code>类。</p><p>例如，在和 Mybatis 框架进行整合的时候，就提供了<code>MybatisAutoConfiguration</code>自动配置类，该类提供了<code>SqlSessionFactory</code>用于创建 SqlSession，还提供了<code>SqlSessionTemplate</code>用于执行 sql 语句，还有<code>MapperFactoryBean</code>用于创建 Dao 接口的代理对象。</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>MyBatis 需要的依赖项有：</p><ul><li>Lombok</li><li>MyBatis Framework</li><li>MySQL Driver</li></ul><h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><p>DataSource 在 application 配置文件中以 <code>spring.datasource.*</code> 作为配置项。DataSourceProperties 是数据源的配置类，更多配置参考这个类的属性。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">MySQL:040809</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/big-event?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">MySQL:040809</span></span><br></pre></td></tr></table></figure><p>除此之外还需要添加 mapper 配置文件扫描、自动驼峰映射、起别名和日志信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">cn.hnu.springboot.lession10.mybatis.pojo</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.hnu.springboot.bigevent.model</span></span><br></pre></td></tr></table></figure><p>启动类配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 启动类需要利用MapperScan扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;cn.hnu.springboot.lession10.mybatis.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lession10MybatisApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Lession10MybatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用的时候<strong>直接利用 @Autowired 对 mapper 接口进行注入即可</strong>，无需手动调用 SqlSession 去创建 mapper 的动态代理类。</p><h3 id="SqlProvider"><a href="#SqlProvider" class="headerlink" title="SqlProvider"></a>SqlProvider</h3><p>MyBatis 提供了 SQL 提供者的功能，将 SQL 以方法的形式定义在单独的类中。Mapper 接口通过引用 SQL 提供者中的方法名称，表示要执行的 SQL。</p><p>SQL 提供者有四类 @SelectProvider，@InsertProvider，@UpdateProvider，@DeleteProvider。</p><p>编写 SQL 提供者类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlProvider</span> &#123;</span><br><span class="line">    <span class="comment">// 定义静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">selectCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;select * from t_car where id = #&#123;id&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 SQL 提供者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMapper</span> &#123;</span><br><span class="line">    <span class="comment">// Sql提供者</span></span><br><span class="line">    <span class="comment">// type填入提供者类的字节码文件，method填入提供者类的方法</span></span><br><span class="line">    <span class="meta">@SelectProvider(type = SqlProvider.class, method = &quot;selectCar&quot;)</span></span><br><span class="line">    Car <span class="title function_">selectById2</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一（多）对一"><a href="#一（多）对一" class="headerlink" title="一（多）对一"></a>一（多）对一</h3><p>MyBatis 支持一对一、一对多、多对多的查询。XML 文件和注解都能实现关系的操作。我们使用注解表示上述的关系：**@One 表示一对一、@Many 表示一对多**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 课程Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClazzMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_clazz where cid = #&#123;cid&#125;&quot;)</span></span><br><span class="line">    Clazz <span class="title function_">getClazzById</span><span class="params">(Integer cid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_stu where sid = #&#123;sid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true, column = &quot;sid&quot;, property = &quot;sid&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;sname&quot;, property = &quot;sname&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;cid&quot;, property = &quot;clazz&quot;,</span></span><br><span class="line"><span class="meta">                // 使用One进行分步查询，同时也支持懒加载</span></span><br><span class="line"><span class="meta">                one=@One(select = &quot;cn.hnu.springboot.lession10.mybatis.mapper.ClazzMapper.getClazzById&quot;, fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    Student <span class="title function_">getStudentById</span><span class="params">(<span class="type">int</span> sid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_stu where cid = #&#123;cid&#125;&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">getStusById</span><span class="params">(<span class="type">int</span> cid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 课程Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClazzMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_clazz where cid = #&#123;cid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true, column = &quot;cid&quot;, property = &quot;cid&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;cname&quot;, property = &quot;cname&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;cid&quot;, property = &quot;stus&quot;,</span></span><br><span class="line"><span class="meta">                    // 使用many进行分步查询</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;cn.hnu.springboot.lession10.mybatis.mapper.StudentMapper.getStusById&quot;, fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    ClazzStus <span class="title function_">getClazzStusById</span><span class="params">(Integer cid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用设置和自动配置"><a href="#常用设置和自动配置" class="headerlink" title="常用设置和自动配置"></a>常用设置和自动配置</h3><p>MyBatis 框架在 SpringBoot 中的自动配置类为：MybatisAutoConfiguration。</p><p>除了之前我们说过的可以直接在 properties 文件中进行 MyBatis 的配置之外，也可以使用 MyBatis 的默认 xml 配置，然后再指定到 properties 文件中，如下指定：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.config-location</span>=<span class="string">classpath:/mybatis-config.xml</span></span><br></pre></td></tr></table></figure><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>HikariCP 连接池，<a href="https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration">MySQL 配置提示</a>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/simpsons</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">test</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">test</span></span><br><span class="line"><span class="attr">dataSource.cachePrepStmts</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.prepStmtCacheSize</span>=<span class="string">250</span></span><br><span class="line"><span class="attr">dataSource.prepStmtCacheSqlLimit</span>=<span class="string">2048</span></span><br><span class="line"><span class="attr">dataSource.useServerPrepStmts</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.useLocalSessionState</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.rewriteBatchedStatements</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.cacheResultSetMetadata</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.cacheServerConfiguration</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.elideSetAutoCommits</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">dataSource.maintainTimeStats</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>在 SpringBoot 的 application 配置文件中，使用下述代码配置连接池：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认连接池</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br></pre></td></tr></table></figure><p>完整实例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql//localhost:3306/news_system</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">MySQL:040809</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># connections = ((cpu 核心数 * 2) + 磁盘数量) 近似值。 默认 10</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment">#最小连接数，默认 10，不建议设置。默认与 maximum-pool-size 一样大小。推荐使用</span></span><br><span class="line">   <span class="comment">#固定大小的连接池</span></span><br><span class="line">      <span class="comment"># 获取连接时，检测语句</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">20000</span></span><br><span class="line">      <span class="comment"># 其他属性</span></span><br><span class="line">      <span class="attr">data-source-properties:</span></span><br><span class="line">        <span class="attr">cachePreStmts:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">dataSource.cachePreStmtst:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">dataSource.preStmtCacheSize:</span> <span class="number">250</span></span><br><span class="line">        <span class="attr">dataSource.preStmtCacheSqlLimit:</span> <span class="number">2048</span></span><br><span class="line">        <span class="attr">dataSource.useServerPrepStmts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务分为全局事务与本地事务，本地事务是特定于资源的，例如与 JDBC 连接关联的事务。本地事务可能更</p><p>容易使用，但有一个显著的缺点:它们不能跨多个事务资源工作。比如在方法中处理连接多个数据库的事务，本</p><p>地事务是无效的。</p><p>Spring 解决了全局和本地事务的缺点。它允许应用程序开发人员在任何环境中使用一致的编程模型。只需编</p><p>写一次代码，就可以从不同环境中的不同事务管理策略中获益。Spring 框架同时提供声明式和编程式事务管理。</p><p>推荐声明式事务管理。</p><p>Spring 事务抽象的关键是事务策略的概念，<code>org.springframework.transaction.PlatformTransactionManager</code> 接口</p><p>定义了事务的策略。</p><p>事务控制的属性：</p><ul><li><p>Propagation : 传播行为。代码可以继续在现有事务中运行(常见情况)，也可以暂停现有事务并创建新事务</p></li><li><p>Isolation: 隔离级别。此事务与其他事务的工作隔离的程度。例如，这个事务能看到其他事务未提交的写吗?</p></li><li><p>Timeout 超时时间:该事务在超时和被底层事务基础结构自动回滚之前运行的时间。</p></li><li><p>Read-only 只读状态:当代码读取但不修改数据时，可以使用只读事务。在某些情况下，例如使用 Hibernate</p></li></ul><p>时，只读事务可能是一种有用的优化。</p><p>AOP：</p><p>Spring Framework 的声明式事务管理是通过 Spring 面向方面编程(AOP)实现的。事务方面的代码以样板的方</p><p>式使用，及时不了解AOP 概念，仍然可以有效地使用这些代码。事务使用AOP的环绕通知（TransactionInterceptor）。</p><p>声明式事务的方式：</p><ul><li><p>XML 配置文件：全局配置</p></li><li><p>@Transactional 注解驱动 ：和代码一起提供，比较直观。&#x3D;&#x3D;和代码的耦合比较高&#x3D;&#x3D;。【Spring 团队建议您只使用</p></li></ul><p>@Transactional 注释具体类(以及具体类的方法)，而不是注释接口。当然，可以将@Transactional 注解放在接</p><p>口(或接口方法)上，但这只有在使用基于接口的代理时才能正常工作】</p><p>方法的可见性：</p><p>公共(public)方法应用@Transactional 主机。如果使用@Transactional 注释了受保护的、私有的或包可见的方法，</p><p>则不会引发错误，但注释的方法不会显示配置的事务设置，事务不生效。如果需要受保护的、私有的方法具有事</p><p>务考虑使用 AspectJ。而不是基于代理的机制。</p><h4 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h4><p>Spring 框架的事务管理是通过 Spring 面向切面编程实现的，事务使用的是环绕通知（TransactionInterceptor）。Spring 团队建议将 @Transactional 注解注释到具体类（以及具体类的方法），而不是注释接口，这样可以降低代码的耦合度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span>   <span class="comment">// 设置事务注解，碰到Exception时回滚</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transform</span><span class="params">(String fromAccount, String toAccount, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountMapper.getByName(fromAccount);</span><br><span class="line">        <span class="keyword">if</span> (fromAct.getMoney() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;账户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountMapper.getByName(toAccount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转账</span></span><br><span class="line">        fromAct.setMoney(fromAct.getMoney() - money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> accountMapper.modifyById(fromAct);</span><br><span class="line"></span><br><span class="line">        toAct.setMoney(toAct.getMoney() + money);</span><br><span class="line">        count += accountMapper.modifyById(toAct);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">// 可选，不加也可以开启事务管理器</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;cn.hnu.springboot.lession11transaction.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lession11TransactionApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Lession11TransactionApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无效事务"><a href="#无效事务" class="headerlink" title="无效事务"></a>无效事务</h4><h5 id="跨方法调用事务"><a href="#跨方法调用事务" class="headerlink" title="跨方法调用事务"></a>跨方法调用事务</h5><p>Spring 事务处理是 AOP 的环绕通知，只有通过<strong>代理对象调用</strong>具有事务的方法才能生效。类中有 A方法，调用带有事务的 B 方法。调用 A方法事务无效。当然 protected, private 方法默认是没有事务功能的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// @Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="comment">// 如果不加入这个事务传播行为，那么这个myTransForm方法没办法开启事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myTransForm</span><span class="params">(String fromAccount, String toAccount, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transform(fromAccount, toAccount, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span>   <span class="comment">// 设置事务注解，碰到Exception时回滚</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transform</span><span class="params">(String fromAccount, String toAccount, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="新线程调用事务"><a href="#新线程调用事务" class="headerlink" title="新线程调用事务"></a>新线程调用事务</h5><p>方法在线程中运行，在同一线程中方法具有事务功能，新的线程中的代码事务无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AtomicInteger <span class="title function_">theadTransForm</span><span class="params">(String fromAccount, String toAccount, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启了一个新的线程，该线程是新线程，调用的方法不会开启事务</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            count.addAndGet(transform(fromAccount, toAccount, money));</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        thread.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span>   <span class="comment">// 设置事务注解，碰到Exception时回滚</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transform</span><span class="params">(String fromAccount, String toAccount, <span class="type">int</span> money)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回滚规则"><a href="#回滚规则" class="headerlink" title="回滚规则"></a>回滚规则</h4><ul><li><p>RuntimeException 的实例或子类时回滚事务</p></li><li><p>Error 会导致回滚</p></li><li><p>已检查异常不会回滚。默认提交事务</p></li><li><p>@Transactional 注解的属性控制回滚</p><p>​rollbackFor</p><p>​noRollbackFor</p><p>​rollbackForClassName</p><p>​noRollbackForClassName</p></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>SpringBoot 可以创建两种类型的 Web 应用：</p><ol><li>基于 Servlet 体系的 Spring Web MVC 应用。</li><li>使用 spring-boot-starter-webflux 模块来构建响应式，非阻塞的 Web 应用程序。</li></ol><p>Web 应用需要的依赖项有：</p><ul><li>Lombok</li><li>Spring Web</li><li>Thymeleaf</li></ul><p>基础使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="comment">// 声明为Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定访问url</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/quick&quot;)</span></span><br><span class="line">    <span class="comment">// 导入的是springframework.ui.Model，用于存储数据，把数据放在request作用域</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">quick</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理参数数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;Web开发&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;time&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定视图，显示数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;quick&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>thymeleaf 拿取 request 作用域的参数语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:text=&quot;$&#123;attribute_name&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>上面的例子以 Html 文件作为视图，可以编写复杂的交互的页面，CSS 美化数据。除了带有页面的数据，还有一种<strong>只需要数据的视图</strong>。比如手机应用 app，app 的数据来自服务器应用处理结果。app 内的数据显示和服务器无关，只需要数据就可以了。主流方式是服务器返回 json 格式数据给手机 app 应用。我们可以通过原始的HttpServletResponse 应该数据给请求方。借助 Spring MVC 能够<strong>无感知的处理 json</strong>。这种视图我们称为 json 视图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonViewController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应json串</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">responseJson</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;lisi\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// 应答，通过HttpServletResponse输出</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SpringMVC支持控制器返回对象，由框架将要使用的对象转为json后输出</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/userJson&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span>   <span class="comment">// 使用@ResponseBody将数据以json格式写出</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserJson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>favicon.ico 是网站的缩略标志，可以显示在浏览器标签、地址栏左边和收藏夹，是展示网站个性的 logo 标志。可以利用这个<a href="https://quanxin.org/favicon">网站</a>快速生成。</p><ol><li>将生成的 favicon.ico 拷贝到项目的 <code>resources/static/</code> 目录。</li><li>在视图的 <code> Header 部分加入</code>。</li></ol><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>SpringMVC 支持多种策略，匹配请求路径到控制器方法。分别为：AntPathMatcher、PathPatternParser。从 SpringBoot3 开始，推荐使用 PathPatternParser，比之前 AntPathMathcer 提升 6-8 倍的吞吐量。</p><p>配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="string">path_pattern_parser</span></span><br></pre></td></tr></table></figure><p>让我们看一下 PathPatternParser 中有关 uri 的定义：</p><ul><li><code>?</code>：一个字符。</li><li><code>*</code>：0 或多个字符。在一个路径段中匹配字符。</li><li><code>**</code>：匹配 0 个或多个路径段，相当于是所有。</li><li>正则表达式：支持正则表达式。</li></ul><p>RESTFul 的支持路径变量：</p><ul><li><code>&#123;变量名&#125;</code>：路径占位符。</li><li><code>&#123;myname:[a-z]+&#125;</code>：正则匹配 a-z 的多个字面，路径变量名称为 myname。（<code>@PathVariable(&quot;myname&quot;)</code>）</li><li><code>&#123;*myname&#125;</code>：匹配多个路径一直到 uri 的结尾。</li></ul><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/file/t?st.html&quot;)</span></span><br><span class="line"><span class="comment">// http://localhost:8080/file/test.html</span></span><br><span class="line"><span class="comment">// http://localhost:8080/file/teest.html 该地址匹配不成功，因为?只能匹配单个字符</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/images/*.gifs&quot;)</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">以下几个url都满足要求</span></span><br><span class="line"><span class="comment">http://localhost:8080/images/user.gifs</span></span><br><span class="line"><span class="comment">http://localhost:8080/images/cat.gifs</span></span><br><span class="line"><span class="comment">http://localhost:8080/images/.gifs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">http://localhost:8080/images/gif/header.gif该地址匹配不成功，因为*不能包括段落</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/pic/**&quot;)</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">以下几个url都满足要求，**适合多段落匹配</span></span><br><span class="line"><span class="comment">http://localhost:8080/pic/p1.gif</span></span><br><span class="line"><span class="comment">http://localhost:8080/pic/2024/p1.gif</span></span><br><span class="line"><span class="comment">http://localhost:8080/pic/user</span></span><br><span class="line"><span class="comment">http://localhost:8080/pic/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/order/&#123;*id&#125;&quot;)</span></span><br><span class="line"><span class="comment">// 匹配/order开始的所有请求，id表示order后面直到路径结束的所有内容</span></span><br><span class="line"><span class="comment">// 可以结合@PathVariable将id的内容拿出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:8080/order/1001    id=/1001</span></span><br><span class="line"><span class="comment">// http://localhost:8080/order/1001/2024-05-01 id=/1001/2024-05-01</span></span><br><span class="line"><span class="comment">// 注意&quot;/order/&#123;*id&#125;/&#123;*date&#125;&quot;是无效的，&#123;*..&#125;后面不能再有匹配规则了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/pages/&#123;fname:\\w+&#125;.log&quot;)</span></span><br><span class="line"><span class="comment">// :\\w+正则匹配，xxx.log</span></span><br><span class="line"><span class="comment">// http://localhost:8080/pages/req.log</span></span><br></pre></td></tr></table></figure><h3 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h3><p>接收参数方式：</p><ul><li>请求参数与形参一一对应，适用于简单类型。</li><li>对象类型，控制器方法形参是对象，请求的多个参数名与属性名相对应。</li><li>@RequestParam 注解，进行请求参数和方法参数的映射。</li><li>@RequestBody，接受前端传递的 json 格式参数。</li><li>HttpServletRequest 使用 request 对象接受参数。</li><li>@RequestHeader，从请求 header 中获取某项值。</li></ul><p>解析参数需要的值，SpringMVC 中专门有个接口来干这个事情，这个接口就是：<code>HandlerMethodArgumentResolver</code>，中文称呼：处理器方法参数解析器，说白了就是解析请求得到 Controller 方法的参数的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单参数直接接收</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p1&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p1?name=zhangsan&amp;age=18&amp;gender=男</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest1</span><span class="params">(String name, Integer age, String gender)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接受参数: name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, gender = &quot;</span> + gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用pojo类接收参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p2&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p2?username=zhangsan&amp;password=123</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest2</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用原生servlet接收参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p3&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p3?name=zhangsan&amp;password=123</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest3</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行方法参数和请求参数的映射</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p4&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p4?user_password=123456</span></span><br><span class="line">    <span class="comment">// required = false意味着这个参数可选，如果没有，默认值是defaultValue的值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest4</span><span class="params">(<span class="meta">@RequestParam(value = &quot;user_name&quot;, required = false, defaultValue = &quot;zhangsan&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(&quot;user_password&quot;)</span> String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收请求头中的参数值</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p5&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p5</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest5</span><span class="params">(<span class="meta">@RequestHeader(&quot;Accept&quot;)</span> String accept)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收前端传递过来的json串（请求体数据）</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p6&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p6</span></span><br><span class="line">    <span class="comment">// Content-Type: application/json</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// &#123;&quot;username&quot;:&quot;张三&quot;, &quot;password&quot;:123&#125;</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest6</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Reader也可以读取请求体中的数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest7</span><span class="params">(Reader reader)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader)) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                buffer.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组作为形参，接收多个参数值</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/param/p8&quot;)</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/param/p8?ids=1&amp;ids=2&amp;ids=3</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parameterTest8</span><span class="params">(Integer[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanValidation"><a href="#BeanValidation" class="headerlink" title="BeanValidation"></a>BeanValidation</h3><p>服务器端程序，Controller 在方法接受了参数，这些参数是由用户提供的，使用之前必须校验参数是我们需要的吗，值是否在允许的范围内，是否符合业务的要求。</p><p>BeanValidation 是提供数据验证 JSR-303 的一个子规范，为 JavaBean 验证定义了相应的元数据模型和 API，其中，hibernate-validator 是一个比较有名的实现。</p><p>BeanValidation 内置的 Constraint：</p><table><thead><tr><th align="left">Constraint</th><th align="left">详细信息</th></tr></thead><tbody><tr><td align="left">@Null</td><td align="left">必须为null</td></tr><tr><td align="left">@NotNull</td><td align="left">必须非null</td></tr><tr><td align="left">@NotBlank</td><td align="left">字符串必须非null和非空字符串</td></tr><tr><td align="left">@AssertTrue</td><td align="left">必须为true</td></tr><tr><td align="left">@AssertFalse</td><td align="left">必须为false</td></tr><tr><td align="left">@Min(value)</td><td align="left">必须是一个数字，值必须大于等于指定最小值</td></tr><tr><td align="left">@Max(value)</td><td align="left">必须是一个数字，值必须小于等于指定最大值</td></tr><tr><td align="left">@DecimalMin(value)</td><td align="left">必须是一个数字，值必须大于等于指定最小值</td></tr><tr><td align="left">@DecimalMax(value)</td><td align="left">必须是一个数字，值必须小于等于指定最大值</td></tr><tr><td align="left">@Size(min, max)</td><td align="left">值必须在指定范围内，一般用于注释集合等</td></tr><tr><td align="left">@Digits(integer, fraction)</td><td align="left">值必须在指定范围内</td></tr><tr><td align="left">@Past</td><td align="left">必须是一个过去的日期</td></tr><tr><td align="left">@Futuret</td><td align="left">必须是一个将来的日期</td></tr><tr><td align="left">@Pattern(value)</td><td align="left">必须符合指定的正则表达式</td></tr></tbody></table><p>hibernate-validator 附加的 constraint：</p><table><thead><tr><th align="left">Constraint</th><th align="left">详细信息</th></tr></thead><tbody><tr><td align="left">@Email</td><td align="left">必须是电子邮箱地址</td></tr><tr><td align="left">@Length</td><td align="left">字符串的大小必须在指定范围内</td></tr><tr><td align="left">@NotEmpty</td><td align="left">被注释的字符串必须非空</td></tr><tr><td align="left">@Range(min, max)</td><td align="left">被注释的元素必须在合适的范围内</td></tr><tr><td align="left">@URL</td><td align="left">被注释的字符串为URL</td></tr></tbody></table><h4 id="普通验证"><a href="#普通验证" class="headerlink" title="普通验证"></a>普通验证</h4><p>需要先加依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在类的变量名上直接使用注解进行规则校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;[a-zA-Z0-9_-]&#123;4,16&#125;&quot;)</span></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;\\S*(?=\\S&#123;6,&#125;)(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&amp;*? ])\\S*&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在 Controller 上使用 @Validated 注解进行规则验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">// 加上@Validated验证Bean，利用BindingResult获取Bean的验证结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/user/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">addUser</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                                       BindingResult bindingResult)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取没有通过验证的结果</span></span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            <span class="comment">// 进行对应处理</span></span><br><span class="line">            List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  i &lt; fieldErrors.size(); i++) &#123;</span><br><span class="line">                <span class="type">FieldError</span> <span class="variable">field</span> <span class="operator">=</span> fieldErrors.get(i);</span><br><span class="line">                <span class="comment">// 将出错的属性和出错原因放入map集合中</span></span><br><span class="line">                map.put(field.getField() + <span class="string">&quot;-&quot;</span> + i, field.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>或者，直接在方法的参数上使用校验用的注解，然后把 @Validated 注解标注在控制器上也是可以的。</strong></p><h4 id="分组验证"><a href="#分组验证" class="headerlink" title="分组验证"></a>分组验证</h4><p>现在碰到一个问题：假设 User 当中有一个 id 属性，这个属性在进行用户插入的时候应该为空，而进行用户修改的时候应该非空，如果直接注解作用在 id 上就会产生矛盾了，这个时候就需要进行分组验证（所谓的组实际上就是一个空接口）。</p><p>如果某个校验项没有指定分组，默认属于 Default 分组。且分组之间可以继承，如果<code>A extends B</code>，那么 A 中就拥有 B 的校验项。</p><p>使用的时候在 @Validated 注解后面标注是哪个组就好了，示例：<code>@Validated(&#123;User.addGroup.class&#125;)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.groups.Default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">addGroup</span> <span class="keyword">extends</span> <span class="title class_">Default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">updateGroup</span> <span class="keyword">extends</span> <span class="title class_">Default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;主键在编辑时必须有值&quot;, groups = &#123;updateGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;id要大于0&quot;, groups = &#123;updateGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@Null(message = &quot;主键在插入时需为空&quot;, groups = &#123;addGroup.class&#125;)</span></span><br><span class="line">    Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank</span><span class="comment">// 默认分组</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h4><p>已有的注解不能满足所有的校验需求的时候，特殊的情况需要自定义校验（自定义校验注解）。步骤如下：</p><ol><li>自定义注解 State。</li><li>自定义校验数据的类 StateValidation 实现 ConstrainValidator 接口。</li><li>在需要校验的地方使用自定义注解。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元注解，用来标识本注解可以抽取到文档中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 元注解，用来标识本注解可以作用在哪些地方</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="comment">// 元注解，用来标识本注解在哪个阶段会被保留，我们这里保留到运行阶段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">// 用来指定谁给注解提供校验规则</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;StateValidation.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> State &#123;</span><br><span class="line">    <span class="comment">// 用来提供校验失败后的信息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;state参数的值只能是 已发布 或者 草稿&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 负载，用于获取到state注解的附加信息</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型的第一个参数指将来给哪个注解提供校验规则，第二个参数指校验的数据类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateValidation</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;State, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供校验规则，value就是将来要校验的数据，如果返回false则校验不通过</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value,</span></span><br><span class="line"><span class="params">                           ConstraintValidatorContext context)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value.equals(<span class="string">&quot;已发布&quot;</span>) || value.equals(<span class="string">&quot;草稿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ValidationAutoConfiguration"><a href="#ValidationAutoConfiguration" class="headerlink" title="ValidationAutoConfiguration"></a>ValidationAutoConfiguration</h4><p>ValidationAutoConfiguration 自动配置类，创建了 LocalValidatorFactoryBean 对象，当有 class 路径中有hibernate.validator。能够创建 hiberate 的约束验证实现对象。<code>@ConditionalOnResource(resources = &quot;classpath:META-INF/services/jakarta.validation.spi.ValidationProvider&quot;)</code></p><h3 id="自定义状态码"><a href="#自定义状态码" class="headerlink" title="自定义状态码"></a>自定义状态码</h3><p>ResponseEntity 包含 HttpStatus Code 和 应答数据的结合体，因为有 Http Code 能表达标准的语义，200成功，404没有发现等。使用 ResponseEntity 自定义状态码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/user/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">returnEntity</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以自定义状态码</span></span><br><span class="line">        ResponseEntity&lt;User&gt; response = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(user, HttpStatus.OK);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC-请求流程"><a href="#SpringMVC-请求流程" class="headerlink" title="SpringMVC 请求流程"></a>SpringMVC 请求流程</h3><p>Spring MVC 框架是基于 Servlet 技术的。以请求为驱动，围绕 Servlet 设计的。Spring MVC 处理用户请求与访问一个 Servlet 是类似的，请求发送给 Servlet，执行 doService 方法，最后响应结果给浏览器完成一次请求处理。</p><p>DispatcherServlet 是核心对象，称为中央调度器（前端控制器 Front Controller）。负责接收所有对 Controller 的请求，调用开发者的 Controller 处理业务逻辑，将 Controller 方法的返回值经过视图处理响应给浏览器。</p><p>DispatcherServlet 作为 SpringMVC 中的 C，职责：</p><ol><li>是一个门面，接收请求，控制请求的处理过程。所有请求都必须有 DispatcherServlet 控制。SpringMVC 对外的入口。可以看做门面设计模式。</li><li>访问其他的控制器，这些控制器处理业务逻辑。</li><li>创建合适的视图，将 2 中得到业务结果放到视图，响应给用户。</li><li>解耦了其他组件，所有组件只与 DispatcherServlet 交互，彼此之间没有关联。</li><li>实现 ApplictionContextAware，每个 DispatcherServlet 都拥自己的 WebApplicationContext，它继承了ApplicationContext（意味着 DispatcherServlet 也可以看作一个容器，可以访问到各种 Bean）。WebApplicationContext 包含了Web 相关的 Bean 对象，比如开发人员注释 @Controller 的类，视图解析器，视图对象等等。DispatcherServlet 访问容器中 Bean 对象。</li><li>Servlet + Spring IoC 组合。</li></ol><h3 id="Web-配置"><a href="#Web-配置" class="headerlink" title="Web 配置"></a>Web 配置</h3><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"># 上下文访问路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"># request，response字符编码</span></span><br><span class="line"><span class="attr">server.servlet.encoding.charset</span>=<span class="string">utf-8</span></span><br><span class="line"><span class="comment"># 强制request，response设置charset字符编码</span></span><br><span class="line"><span class="attr">server.servlet.encoding.force</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志路径</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.directory</span>=<span class="string">D:/logs</span></span><br><span class="line"><span class="comment"># 启用访问日志</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 日志文件名前缀</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.prefix</span>=<span class="string">access_log</span></span><br><span class="line"><span class="comment"># 日志文件日期时间</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.file-date-format</span>=<span class="string">.yyyy-MM-dd</span></span><br><span class="line"><span class="comment"># 日志文件名称后缀</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.suffix</span>=<span class="string">.log</span></span><br><span class="line"><span class="comment"># post请求内容最大值，默认2M</span></span><br><span class="line"><span class="attr">server.tomcat.max-http-form-post-size</span>=<span class="string">2000000</span></span><br><span class="line"><span class="comment"># 服务器最大连接数</span></span><br><span class="line"><span class="attr">server.tomcat.max-connections</span>=<span class="string">8192</span></span><br></pre></td></tr></table></figure><h4 id="DispatcherServlet-配置"><a href="#DispatcherServlet-配置" class="headerlink" title="DispatcherServlet 配置"></a>DispatcherServlet 配置</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置访问路径</span></span><br><span class="line"><span class="attr">spring.mvc.servlet.path</span>=<span class="string">/course</span></span><br><span class="line"><span class="comment"># servlet加载顺序，越小创建时间越早</span></span><br><span class="line"><span class="attr">spring.mvc.servlet.load-on-startup</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 时间格式，可以在接收请求参数时使用</span></span><br><span class="line"><span class="attr">spring.mvc.format.date-time</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置时间格式后接收时间</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/exam/date&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// http://localhost:8023/exam/date?date=2024-05-02 19:18:22</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">date</span><span class="params">(LocalDateTime date)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;时间: &quot;</span> + date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不去使用spring.mvc.format.date-time，也可以使用@DateTimeFormat来指定日期格式</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;exam/date&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">date</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime date)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;时间: &quot;</span> + date;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HttpServlet-的创建"><a href="#HttpServlet-的创建" class="headerlink" title="HttpServlet 的创建"></a>HttpServlet 的创建</h3><h4 id="注解方式创建"><a href="#注解方式创建" class="headerlink" title="注解方式创建"></a>注解方式创建</h4><p>和 JavaWeb 中的操作方式一样，使用注解 @WebServlet 指定映射路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/helloServlet&quot;, name = &quot;HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req,</span></span><br><span class="line"><span class="params">                         HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过还需要在启动类上增加 @ServletComponentScan 注解进行包扫描，注册 Servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// servlet扫描器，可以扫描servlet，filter，listener</span></span><br><span class="line"><span class="meta">@ServletComponentScan(&quot;cn.hnu.springboot.lession13.web&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lession13ServletFilterApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Lession13ServletFilterApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码方式创建"><a href="#编码方式创建" class="headerlink" title="编码方式创建"></a>编码方式创建</h4><p>首先，Serlvet 的创建和 JavaWeb 中的操作一致，不过不再需要注解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req,</span></span><br><span class="line"><span class="params">                         HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&lt;h1&gt;Login Servlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，在编码方式创建中，我们需要创建一个配置类来注册添加 Serlvet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">addSerlvet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建ServletRegistrationBean，登录一个或多个Servlet</span></span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加Serlvet</span></span><br><span class="line">        registrationBean.setServlet(<span class="keyword">new</span> <span class="title class_">LoginServlet</span>());</span><br><span class="line">        <span class="comment">// 指定映射路径</span></span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定创建时间</span></span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回ServletRegistrationBean</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter-的创建"><a href="#Filter-的创建" class="headerlink" title="Filter 的创建"></a>Filter 的创建</h3><p>Fiter 对象使用频率比较高，比如记录日志，权限验证，敏感字符过滤等等。Web 框架中包含内置的 Filter，SpringMVC 中也包含较多的内置 Filter，比如 CommonsRequestLoggingFilter，CorsFilter，FormContentFilter…</p><h4 id="注解方式创建-1"><a href="#注解方式创建-1" class="headerlink" title="注解方式创建"></a>注解方式创建</h4><p>注解方式创建过滤器，和 JavaWeb 中的操作一致，<strong>注意还需要在启动类上加上 @ServletComponentScan 注解进行扫描</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用注解指定要过滤的路径</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest,</span></span><br><span class="line"><span class="params">                         ServletResponse servletResponse,</span></span><br><span class="line"><span class="params">                         FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转换一下servlet的类型</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器执行了，uri: &quot;</span> + uri);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码方式创建-1"><a href="#编码方式创建-1" class="headerlink" title="编码方式创建"></a>编码方式创建</h4><p>原来的 @WebFilter 注解可以去掉，然后在 WebAppConfig 类中添加如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">addSerlvet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">addFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 登录Filter对象</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加Filter</span></span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">LogFilter</span>());</span><br><span class="line">        <span class="comment">// 指定映射路径</span></span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回FilterRegistrationBean</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Filter-的排序"><a href="#Filter-的排序" class="headerlink" title="Filter 的排序"></a>Filter 的排序</h4><p>多个 Filter 对象如果要排序，有两种途径：</p><ol><li>滤器类名称，按字典顺序排列，AuthFilter -&gt; LogFilter。</li><li>FilterRegistrationBean 登记 Filter，设置 order 顺序，数值越小，先执行。</li></ol><p>利用第二种方法进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">addSerlvet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">addLogFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 登录Filter对象</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加Filter</span></span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">LogFilter</span>());</span><br><span class="line">        <span class="comment">// 指定映射路径</span></span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置顺序</span></span><br><span class="line">        registrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回FilterRegistrationBean</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">addAuthFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 登录Filter对象</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加Filter</span></span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">AuthFilter</span>());</span><br><span class="line">        <span class="comment">// 指定映射路径</span></span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置顺序</span></span><br><span class="line">        registrationBean.setOrder(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回FilterRegistrationBean</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用框架内置的-Filter"><a href="#使用框架内置的-Filter" class="headerlink" title="使用框架内置的 Filter"></a>使用框架内置的 Filter</h4><p>SpringBoot 中有许多已经定义好的 Filter，这些 Filter 实现了一些功能，如果我们需要使用他们。可以像自己的Filter一样，通过 FilterRegistrationBean 注册Filter对象。</p><p>假设现在我们想记录每个请求的日志，那么 CommonsRequestLoggingFilter 就能完成简单的请求记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">addSerlvet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">addFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 登记框架内置的Filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">addCommonLogFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建框架内置的Filter对象</span></span><br><span class="line">        <span class="type">CommonsRequestLoggingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsRequestLoggingFilter</span>();</span><br><span class="line">        <span class="comment">// 记录请求的url地址</span></span><br><span class="line">        filter.setIncludeQueryString(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登记Filter</span></span><br><span class="line">        registrationBean.setFilter(filter);</span><br><span class="line">        <span class="comment">// 添加映射路径</span></span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        registrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回registrationBean</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个过滤器时还需要把日志的级别设置成 debug 级别：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.level.web</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="Listener-的创建"><a href="#Listener-的创建" class="headerlink" title="Listener 的创建"></a>Listener 的创建</h3><p>Listener 平时用的比较少，这里不作详细介绍。如果想要创建 Listener，可以继承 HttpSessionListener，并使用 @WebListener 注解进行标记。另一种方式是使用 ServletListenerRegistrationBean 登记 Listener 对象。</p><h3 id="WebMvcConfigurer-配置"><a href="#WebMvcConfigurer-配置" class="headerlink" title="WebMvcConfigurer 配置"></a>WebMvcConfigurer 配置</h3><p>WebMvcConfigurer 作为配置类是，采用 JavaBean 的形式来代替传统的 xml 配置文件形式进行针对框架个性化定制，就是 SpringMVC XML 配置文件的 JavaConfig（编码）实现方式。自定义 Interceptor，ViewResolver，MessageConverter。WebMvcConfigurer 就是JavaConfig 形式的 Spring MVC 的配置文件。</p><p>WebMvcConfigurer 是一个接口，需要自定义某个对象，实现接口并覆盖某个方法。SpringBoot 的自动配置已经设置了很多默认行为，而在一些情况下，我们可能想要对默认配置进行扩展或修改，这个时候，就可以用上 WebMvcConfigurer。</p><h4 id="页面跳转控制器"><a href="#页面跳转控制器" class="headerlink" title="页面跳转控制器"></a>页面跳转控制器</h4><p>SpringBoot 中使用页面视图，比如 Thymeleaf。要跳转显示某个页面，必须通过 Controller 对象。也就是我们需要创建一个 Controller，转发到一个视图才行。如果我们现在<strong>仅仅只需要显示页面</strong>，可以无需这个 Controller。<code>addViewControllers()</code>完成从请求到视图跳转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcSettings</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面跳转控制器，从请求直达视图页面</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// addViewController指定请求路径，setViewName指定视图名称</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h4><p><code>Formatter</code>是数据转换接口，一种数据类型转换为另一种数据类型。与<code>Formatter</code>功能类型的还有<code>Converter</code>。本节我们研究应用更加广泛的<code>Formatter</code>。</p><p><code>Formatter</code>只能将 String 类型转换为其他数据类型，但是在 Web 应用上更广，因为 Web 请求的所有参数都是字符串类型。我们需要把参数转换为其他数据类型来进行处理。</p><p>Spring 中内置了<code>Formatter</code>：</p><ul><li>DateFormatter：String 和 Date 之间的解析和格式化。</li><li>InetAddressFormatter：String 和 InetAddress 之间的解析和格式化。</li><li>PercentStyleFormatter：String 和 Number 之间的解析和格式化，带货币符合。</li><li>NumberFormat：String 和 Number 之间的解析与格式化。</li></ul><p>当上述内置的功能无法实现我们的要求时，我们可以通过<code>Formatter</code>这个扩展点来帮助我们实现我们自己想要的格式转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Formatter</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Printer</span>&lt;T&gt;, Parser&lt;T&gt; &#123;&#125;</span><br><span class="line"><span class="comment">// Formatter&lt;T&gt;是一个组合接口，没有自己的方法，需要继承Printer&lt;T&gt;和Parser&lt;T&gt;</span></span><br><span class="line"><span class="comment">// Printer&lt;T&gt;用于将T类型转为String，格式化输出</span></span><br><span class="line"><span class="comment">// Parser&lt;T&gt;用于将String类型转换为T对象</span></span><br></pre></td></tr></table></figure><p>一些和硬件打交道的项目，数据格式往往不是我们平常见到的那样，可能是一串<code>1111;2222;333,NF;4;561</code>，接下来我们模拟一下如何接收这种数据格式：</p><p>首先，我们需要创建对应的 pojo 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String item1;</span><br><span class="line">    <span class="keyword">private</span> String item2;</span><br><span class="line">    <span class="keyword">private</span> String item3;</span><br><span class="line">    <span class="keyword">private</span> String item4;</span><br><span class="line">    <span class="keyword">private</span> String item5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，实现<code>Formatter</code>接口，进行方法的重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceFormatter</span> <span class="keyword">implements</span> <span class="title class_">Formatter</span>&lt;DeviceInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse是将String转为T对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DeviceInfo <span class="title function_">parse</span><span class="params">(String text, Locale locale)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">DeviceInfo</span> <span class="variable">deviceInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 利用spring框架提供的工具类判断是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(text)) &#123;</span><br><span class="line">            String[] split = text.split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">            deviceInfo = <span class="keyword">new</span> <span class="title class_">DeviceInfo</span>();</span><br><span class="line">            deviceInfo.setItem1(split[<span class="number">0</span>]);</span><br><span class="line">            deviceInfo.setItem2(split[<span class="number">1</span>]);</span><br><span class="line">            deviceInfo.setItem3(split[<span class="number">2</span>]);</span><br><span class="line">            deviceInfo.setItem4(split[<span class="number">3</span>]);</span><br><span class="line">            deviceInfo.setItem5(split[<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deviceInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print是将T对象转为String</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">(DeviceInfo object, Locale locale)</span> &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        joiner.add(object.getItem1());</span><br><span class="line">        joiner.add(object.getItem2());</span><br><span class="line">        joiner.add(object.getItem3());</span><br><span class="line">        joiner.add(object.getItem4());</span><br><span class="line">        joiner.add(object.getItem5());</span><br><span class="line">        <span class="keyword">return</span> joiner.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，告诉 Spring 框架有这么一个转换器，也就是进行转换器的注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcSettings</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据格式转换器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加转换器</span></span><br><span class="line">        registry.addFormatter(<span class="keyword">new</span> <span class="title class_">DeviceFormatter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接接收参数就好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeviceController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exam/formatter&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">// 直接利用pojo类接收即可</span></span><br><span class="line">    <span class="comment">// http://localhost:8023/exam/formatter?deviceInfo=1111;2222;333,NF;4;561</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addDeviceInfo</span><span class="params">(DeviceInfo deviceInfo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deviceInfo.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>Handlerlnterceptor 接口和它的实现类称为拦截器，是 SpringMVC 的一种对象。拦截器是 SpringMVC 框架的对象，与Servlet无关。拦截器能够预先处理发给 Controller 的请求。可以决定请求是否被 Controller 处理。用户请求是先由 DispatcherServlet 接收后，在 Controller 之前执行的拦截器对象。根据拦截器的特点，类似权限验证，记录日志，过滤字符，登录 token 处理都可以使用拦截器。</p><p>拦截器可以深入到方法级别的控制，提供对 Spring 上下文中 bean 的访问能力，允许更精细的控制请求处理流程。</p><p>现在我们使用拦截器对某个用户进行行为限制：只能查看，不能修改和删除。</p><p>准备 Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/article/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addArticle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发布新文章&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/article/edit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">editArticle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改文章&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/article/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryArticle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;查询文章&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设计拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// preHandle，在控制器方法执行前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AuthInterceptor拦截器执行了&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取登录用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取请求uri地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">// 判断用户和操作</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zhangsan&quot;</span>.equals(user) &amp;&amp; (</span><br><span class="line">            uri.startsWith(<span class="string">&quot;/article/add&quot;</span>) ||</span><br><span class="line">            uri.startsWith(<span class="string">&quot;/article/edit&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcSettings</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthInterceptor interceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(interceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/article/**&quot;</span>) <span class="comment">// 拦截哪些地址</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/article/query&quot;</span>); <span class="comment">// 不拦截哪些地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述是单个拦截器的情况，接下来假设我们还需要一个拦截器来进行身份拦截，这种情况下就是多个拦截器，就涉及到拦截器的排序问题。</p><p>再来一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permitUser = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        Collections.addAll(permitUser, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LoginInterceptor执行了&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取登录用户并进行判断</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.hasLength(user) &amp;&amp; permitUser.contains(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcSettings</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 登录拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/article/query&quot;</span>)</span><br><span class="line">                .order(<span class="number">1</span>);  <span class="comment">// 排序，登录拦截器在第一位</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">AuthInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/article/**&quot;</span>) <span class="comment">// 拦截哪些地址</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/article/query&quot;</span>) <span class="comment">// 不拦截哪些地址</span></span><br><span class="line">                .order(<span class="number">2</span>);  <span class="comment">// 拦截器顺序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传解析器"><a href="#文件上传解析器" class="headerlink" title="文件上传解析器"></a>文件上传解析器</h3><p>上传文件首先想到的就是 Apache Commons FileUpload，这个库使用非常广泛。但是在 SpringBoot3 版本中已经不能使用了。代替他的是 SpringBoot 中自己的文件上传实现。</p><p>SpringBoot上传文件现在变得非常简单。提供了封装好的处理上传文件的接口 MultipartResolver，用于解析上传文件的请求，他的内部实现类 StandardServletMultipartResolver。（底层使用的是 Servlet 的 Part 接口实现）之前常用的 CommonsMultipartResolver 不可用了。CommonsMultipartResolver 是使用Apache Commons FileUpload 库时的处理类。</p><p>StandardServletMultipartResolver 内部封装了读取 POST 请求体的请求数据，也就是文件内容。我们现在只需要在 Controller 的方法加入形参 @RequestParam MultipartFile。MultipartFile 表示上传的文件，提供了方便的方法保存文件到磁盘。</p><p>MultipartFile API 如下：</p><table><thead><tr><th align="left">方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>getName()</code></td><td align="left">参数名称（updfile）</td></tr><tr><td align="left"><code>getOriginalFilename()</code></td><td align="left">上传文件原始名称</td></tr><tr><td align="left"><code>isEmpty()</code></td><td align="left">上传文件是否为空</td></tr><tr><td align="left"><code>getSize()</code></td><td align="left">上传文件的字节大小</td></tr><tr><td align="left"><code>getInputStream()</code></td><td align="left">文件的 InputStream，可用于读取部件内容</td></tr><tr><td align="left"><code>transferTo(File dest)</code></td><td align="left">保存上传文件到目标 dest</td></tr></tbody></table><p>前端页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;margin-left: 200px&quot;&gt;</span><br><span class="line">    &lt;h3&gt;上传文件&lt;/h3&gt;</span><br><span class="line">    &lt;form method=&quot;post&quot; action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        选择文件:&lt;input type=&quot;file&quot; name=&quot;upfile&quot; value=&quot;上传&quot;/&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;确定&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>后端控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;upfile&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                         HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始处理上传文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">finalFileName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!multipartFile.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 获取文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 截取后缀名，注意从后方开始截取，防止文件名本身出现.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="comment">// 获取随机uuid</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">            <span class="comment">// 拼凑文件名</span></span><br><span class="line">            finalFileName = uuid + suffix;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (finalFileName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取路径</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;multipartFile&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建上传路径文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        finalFileName = path + File.separator + finalFileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传</span></span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalFileName));</span><br><span class="line">        <span class="comment">// 重定向视图，防止重复上传</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot 中默认单个文件最大支持 1M，一次请求最大 10M。如果要改变默认值，需要修改配置项：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">1MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="comment"># 文件超过file-size-threshold时，直接写入磁盘，不在内存处理</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.file-size-threshold</span>=<span class="string">0KB</span></span><br></pre></td></tr></table></figure><p>如果要实现多个文件上传，只需要在前端多做几个 input 按钮（name 属性要保持相同），后端把 MultipartFile 改成一个数组即可。</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在 Controller 处理请求过程中发生了异常，DispatcherServlet 将异常处理委托给异常处理器（处理异常的类）。实现 HandlerExceptionResolver 接口的都是异常处理类。</p><h4 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h4><p>项目的<strong>异常一般集中处理，定义全局异常处理器</strong>。在结合框架提供的注解，诸如：@ExceptionHandler，@ControllerAdvice（控制器增强，给 Controller 增加异常处理功能），@RestControllerAdvice 一起完成异常的处理。@ControllerAdvice 与 @RestControllerAdvice 区别在于：@RestControllerAdvice 加了 @RepsonseBody。</p><p>前端页面和控制器如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;/divide&quot;&gt;</span><br><span class="line">    输入第一个数：&lt;input type=&quot;text&quot; name=&quot;number1&quot;&gt;&lt;br&gt;</span><br><span class="line">    输入第二个数：&lt;input type=&quot;text&quot; name=&quot;number2&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;确定&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/divide&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">divide</span><span class="params">(Integer number1, Integer number2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(number1 / number2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们处理除以 0 的情况，建议在 @ExceptionHandler 注解后添加具体的异常类，而不是异常的父类，提高匹配准确度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RestControllerAdvice是包括了@ResponseBody的</span></span><br><span class="line"><span class="comment">// 但是@ControllerAdvice灵活性相对更高点</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义方法处理数学异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class&#125;)</span>  <span class="comment">// 指定算数异常类</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handlerArithmeticException</span><span class="params">(ArithmeticException e,</span></span><br><span class="line"><span class="params">                                             Model model)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ArithmeticException&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>; <span class="comment">// 返回视图</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个异常处理器做兜底，不至于其他异常没办法处理，匹配的话会优先匹配上面的处理器</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handlerDefaultException</span><span class="params">(Exception e,</span></span><br><span class="line"><span class="params">                                          Model model)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;Exception&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BeanValidation-异常处理"><a href="#BeanValidation-异常处理" class="headerlink" title="BeanValidation 异常处理"></a>BeanValidation 异常处理</h4><p>使用 JSR-303 验证参数时，我们是在 Controller 方法，声明 BindingResul 对象获取校验结果。Controller 的方法很多，每个方法都加入 BindingResult 处理检验参数比较繁琐。校验参数失败抛出异常给框架，异常处理器能够捕获到 MethodArgumentNotValidException，它是 BindException 的子类。接下来我们演示一下如何利用异常处理器处理 BeanValidation 的异常</p><p>准备 Order 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;订单不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;数量不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Range(min = 1, max = 99, message = &quot;订单商品数量在&#123;min&#125;到&#123;max&#125;之间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;用户不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = &quot;用户id从&#123;value&#125;开始&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的 Controller 只需要对要检查的参数加上 @Validated 注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/order/new&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> Order order)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> order.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在异常处理器上针对 MethodArgumentNotValidException 进行异常处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理JSR303验证参数的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handlerMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e,</span></span><br><span class="line"><span class="params">                                                         Model model)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取异常结果</span></span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            List&lt;FieldError&gt; errors = bindingResult.getFieldErrors();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; errors.size(); i++) &#123;</span><br><span class="line">                <span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> errors.get(i);</span><br><span class="line">                map.put(fieldError.getField() + <span class="string">&quot;-&quot;</span> + i, fieldError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上述异常处理只是一个演示，是不规范的，规范处理需要使用ProblemDetail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整异常处理简单示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理BeanValidation异常，用于<span class="doctag">@RequestBody</span>校验失败的情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e MethodArgumentNotValidException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应字段异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(&#123;MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">handlerMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        bindingResult.getFieldErrors().forEach(fieldError -&gt;</span><br><span class="line">            builder.append(fieldError.getField()).append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                    .append(fieldError.getDefaultMessage()).append(<span class="string">&quot;;\n&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(builder.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理BeanValidation异常，用于<span class="doctag">@RequestParam</span>、<span class="doctag">@PathVariable</span>校验失败的情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex ConstraintViolationException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应字段异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">handleConstraintViolationException</span><span class="params">(ConstraintViolationException ex)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    ex.getConstraintViolations().forEach(violation -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> violation.getPropertyPath().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> violation.getMessage();</span><br><span class="line">        builder.append(fieldName).append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                .append(errorMessage).append(<span class="string">&quot;;\n&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> Result.error(builder.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理BeanValidation异常，用于处理在表单或<span class="doctag">@RequestParam</span>参数的绑定过程中，格式校验失败的场景。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e BindException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应字段异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">handleBindException</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    e.getBindingResult().getFieldErrors().forEach(fieldError -&gt;</span><br><span class="line">        builder.append(fieldError.getField()).append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                .append(fieldError.getDefaultMessage()).append(<span class="string">&quot;;\n&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> Result.error(builder.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理BeanValidation异常，用于处理当请求中的参数类型与方法参数的期望类型不匹配的情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e MethodArgumentTypeMismatchException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 响应异常字段信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(MethodArgumentTypeMismatchException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">handleMethodArgumentTypeMismatchException</span><span class="params">(MethodArgumentTypeMismatchException e)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    builder.append(<span class="string">&quot;参数: &quot;</span>).append(e.getName()).append(<span class="string">&quot; 类型不匹配, 期待类型: &quot;</span>)</span><br><span class="line">            .append(e.getRequiredType().getName()).append(<span class="string">&quot;, 实际输入: &quot;</span>)</span><br><span class="line">            .append(e.getValue()).append(<span class="string">&quot;;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.error(builder.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ProblemDetail"><a href="#ProblemDetail" class="headerlink" title="ProblemDetail"></a>ProblemDetail</h4><p>如果不作特定的异常处理，SpringBoot 也有默认的异常反馈，但是默认的异常反馈内容比较单一，包含 Http Status Code，时间，异常信息。但具体异常原因没有体现。这次 SpringBoot3 对错误信息增强了，使用的类是 ProblemDetail。</p><table><thead><tr><th align="left">标准字段</th><th align="left">描述</th><th align="left">必须</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">标识错误类型的uri</td><td align="left">可认为是</td></tr><tr><td align="left">title</td><td align="left">问题类型的简短描述</td><td align="left">否</td></tr><tr><td align="left">detail</td><td align="left">错误信息的详细描述</td><td align="left">否</td></tr><tr><td align="left">instance</td><td align="left">特定故障实例的uri</td><td align="left">否</td></tr><tr><td align="left">status</td><td align="left">状态码</td><td align="left">否</td></tr></tbody></table><p>除了上述字段，还可以由用户自己自定义字段，丰富对应答结果的说明。</p><p>以下几个类，都直接或者间接地包含了 ProblemDetail，<strong>我们在进行异常处理的时候，可以返回这些类</strong>：</p><ul><li>ProblemDetail 类：封装标准字段和扩展字段的简单对象。</li><li>ErrorResponse：错误应答类，完整的 RFC 7807 错误响应的表示，包括 status、headers 和 RFC 7807 格式的ProblemDetail 正文。</li><li>ErrorResponseException：ErrorResponse 接口一个实现，可以作为一个方便的基类。扩展自定义的错误处理类。</li><li>ResponseEntityExceptionHandler：它处理所有 SpringMVC 异常，与 @ControllerAdvice 一起使用。</li></ul><p>ProblemDetail 基础使用如下，先准备 Book 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">BookRecord</span><span class="params">(String isbn, String name, String author)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BookContainer用来包含所有的书本类数据</span></span><br><span class="line"><span class="comment">// 记得要在启动类上进行包扫描，不然没办法读取配置文件中的数据集</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookContainer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;BookRecord&gt; books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">product:</span></span><br><span class="line">  <span class="attr">books:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">isbn:</span> <span class="string">B001</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">isbn:</span> <span class="string">B002</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">isbn:</span> <span class="string">B003</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">jvm</span></span><br><span class="line">      <span class="attr">author:</span> <span class="string">wangwu</span></span><br></pre></td></tr></table></figure><p>准备自定义异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookNotFoundException</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller 用来接收请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookContainer bookContainer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据isbn查询图书，如果没有查到，抛出异常</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BookRecord <span class="title function_">getBook</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">        Optional&lt;BookRecord&gt; bookOption = bookContainer.getBooks().stream().filter(book -&gt;</span><br><span class="line">            book.isbn().equals(isbn)</span><br><span class="line">        ).findFirst();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bookOption.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BookNotFoundException</span>(isbn + <span class="string">&quot;没有此图书&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookOption.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理器处理异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(BookNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ProblemDetail <span class="title function_">bookNotFound</span><span class="params">(BookNotFoundException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用ProblemDetail处理异常</span></span><br><span class="line">        <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span> ProblemDetail</span><br><span class="line">                .forStatusAndDetail(HttpStatus.NOT_FOUND, e.getMessage());</span><br><span class="line">        <span class="comment">// type：异常类型，应该是一个uri，通过uri找到解决问题的途径</span></span><br><span class="line">        problemDetail.setType(URI.create(<span class="string">&quot;/api/problem/notFound&quot;</span>));</span><br><span class="line">        <span class="comment">// title：异常信息描述</span></span><br><span class="line">        problemDetail.setTitle(<span class="string">&quot;图书异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> problemDetail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ProblemDetail-自定义字段"><a href="#ProblemDetail-自定义字段" class="headerlink" title="ProblemDetail 自定义字段"></a>ProblemDetail 自定义字段</h4><p>修改异常处理方法，增加 ProblemDetail 自定义字段，自定义字段以<code>Map</code>存储，调用<code>setProperty(name,value)</code>将自定义字段添加到 ProblemDetail 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(BookNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ProblemDetail <span class="title function_">bookNotFound</span><span class="params">(BookNotFoundException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用ProblemDetail处理异常</span></span><br><span class="line">        <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span> ProblemDetail</span><br><span class="line">                .forStatusAndDetail(HttpStatus.NOT_FOUND, e.getMessage());</span><br><span class="line">        <span class="comment">// type：异常类型，应该是一个uri，通过uri找到解决问题的途径</span></span><br><span class="line">        problemDetail.setType(URI.create(<span class="string">&quot;/api/problem/notFound&quot;</span>));</span><br><span class="line">        <span class="comment">// title：异常信息描述</span></span><br><span class="line">        problemDetail.setTitle(<span class="string">&quot;图书异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加自定义字段</span></span><br><span class="line">        problemDetail.setProperty(<span class="string">&quot;时间&quot;</span>, Instant.now());</span><br><span class="line">        problemDetail.setProperty(<span class="string">&quot;客服&quot;</span>, <span class="string">&quot;100886&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> problemDetail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ErrorResponse"><a href="#ErrorResponse" class="headerlink" title="ErrorResponse"></a>ErrorResponse</h4><p>SpringBoot 识别 ErrorResponse 类型作为异常的应答结果。可以直接使用 ErrorResponse 作为异常处理方法的返回值，ErrorResponseException 是 ErrorResponse 的基本实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BookNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorResponse <span class="title function_">bookNotFound</span><span class="params">(BookNotFoundException e)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用ErrorResponse处理异常</span></span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponseException</span>(HttpStatus.NOT_FOUND, e);</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展-ErrorResponseException"><a href="#扩展-ErrorResponseException" class="headerlink" title="扩展 ErrorResponseException"></a>扩展 ErrorResponseException</h4><p>自定义异常可以扩展 ErrorResponseException，SpringMVC 将处理异常并以符合 <strong>RFC 7807</strong> 的格式返回错误响应。ResponseEntityExceptionHandler 能够处理大部分 SpringMVC 的异常。</p><p>由此可以创建自定义异常类，继承 ErrorResponseException，剩下的交给 SpringMVC 内部自己处理就好。省去了自己的异常处理器，@ExceptionHandler。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义异常类，让框架内置的异常处理器使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsbnNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ErrorResponseException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ProblemDetail <span class="title function_">createProblemDetail</span><span class="params">(HttpStatus httpStatus,</span></span><br><span class="line"><span class="params">                                                     String detail)</span> &#123;</span><br><span class="line">        <span class="comment">// 封装字段</span></span><br><span class="line">        <span class="type">ProblemDetail</span> <span class="variable">problemDetail</span> <span class="operator">=</span> ProblemDetail.forStatusAndDetail(httpStatus, detail);</span><br><span class="line">        <span class="comment">// 指定解决方案uri</span></span><br><span class="line">        problemDetail.setType(URI.create(<span class="string">&quot;api/problem/notfound&quot;</span>));</span><br><span class="line">        problemDetail.setDetail(detail);</span><br><span class="line">        problemDetail.setTitle(<span class="string">&quot;图书异常&quot;</span>);</span><br><span class="line">        <span class="comment">// 自定义字段</span></span><br><span class="line">        problemDetail.setProperty(<span class="string">&quot;严重程度&quot;</span>, <span class="string">&quot;低&quot;</span>);</span><br><span class="line">        problemDetail.setProperty(<span class="string">&quot;客服&quot;</span>, <span class="string">&quot;100886&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> problemDetail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常类的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IsbnNotFoundException</span><span class="params">(HttpStatus httpStatus, String detail)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">super</span>(httpStatus, createProblemDetail(httpStatus, detail), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，还需要在配置文件中添加对 RFC 7087 的支持，并且需要保证没有别的自定义异常处理器存在：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.problemdetails.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="HttpExchange"><a href="#HttpExchange" class="headerlink" title="HttpExchange"></a>HttpExchange</h2><p>远程访问是开发的常用技术，一个应用能够访问其他应用的功能。SpringBoot 提供了多种远程访问的技术。基于 HTTP 协议的远程访问是支付最广泛的。SpringBoot3 提供了新的 HTTP 的访问能力，通过接口简化 HTTP 远程访问，类似 Feign 功能。Spring 包装了底层 HTTP 客户的访问细节。</p><p>SpringBoot 中定义接口提供 HTTP 服务。生成的代理对象实现此接口，代理对象实现 HTTP 的远程访问，需要使用 @HttpExchange 和 WebClient 来完成。</p><p>WebClient 特性：</p><p>我们想要调用其他系统提供的 HTTP 服务，通常可以使用 Spring 提供的 RestTemplate 来访问，RestTemplate 是 Spring 3 中引入的同步阻塞式 HTTP 客户端，因此存在一定性能瓶颈。Spring 官方在 Spring5 中引入了 WebClient 作为非阻塞式 HTTP 客户端。</p><p>一个免费的，提供 24h 在线的 Rest Http 服务：<a href="https://jsonplaceholder.typicode.com/">点我进去</a>。安装 <strong>GsonFormat</strong> 插件可以帮助我们快速进行 json 和 bean 的转换。并且，使用 WebClient 时别忘了加载 <strong>Spring Reactive Web</strong> 依赖。</p><p>先准备 java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToDo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> completed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再准备 service 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个方法就是一个远程调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ToDoService</span> &#123;</span><br><span class="line">    <span class="meta">@GetExchange(&quot;/todos/&#123;id&#125;&quot;)</span> <span class="comment">// 用来访问第三方接口的</span></span><br><span class="line">    ToDo <span class="title function_">getTodoById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备配置类用于创建代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建服务接口的代理对象，基于WebClient</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ToDoService <span class="title function_">requestService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">                .baseUrl(<span class="string">&quot;https://jsonplaceholder.typicode.com&quot;</span>)    <span class="comment">// 指定基地址</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理</span></span><br><span class="line">        <span class="type">HttpServiceProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> HttpServiceProxyFactory</span><br><span class="line">                .builderFor(WebClientAdapter.create(webClient)).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂创建代理的服务</span></span><br><span class="line">        <span class="keyword">return</span> proxyFactory.createClient(ToDoService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lession18HttpServiceApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入远程服务的代理对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ToDoService toDoService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试访问</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ToDo</span> <span class="variable">todo1</span> <span class="operator">=</span> toDoService.getTodoById(<span class="number">1</span>);</span><br><span class="line">System.out.println(todo1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合注解"><a href="#组合注解" class="headerlink" title="组合注解"></a>组合注解</h3><p>我们还可以搭配多个注解进行组合注解开发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义基地址</span></span><br><span class="line"><span class="meta">@HttpExchange(&quot;https://jsonplaceholder.typicode.com/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AlbumsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HttpExchange(method = &quot;GET&quot;, url = &quot;/albums/&#123;id&#125;&quot;)</span></span><br><span class="line">    Albums <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建代理</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AlbumsService <span class="title function_">albumsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建WebClient</span></span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理工厂</span></span><br><span class="line">        <span class="type">HttpServiceProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> HttpServiceProxyFactory</span><br><span class="line">                .builderFor(WebClientAdapter.create(webClient)).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理服务</span></span><br><span class="line">        <span class="keyword">return</span> proxyFactory.createClient(AlbumsService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lession18HttpServiceApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AlbumsService albumsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAlbums</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Albums</span> <span class="variable">albums</span> <span class="operator">=</span> albumsService.getById(<span class="number">1</span>);</span><br><span class="line">System.out.println(albums);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定制-HTTP-请求服务"><a href="#定制-HTTP-请求服务" class="headerlink" title="定制 HTTP 请求服务"></a>定制 HTTP 请求服务</h3><p>设置 HTTP 远程的超时时间，异常处理。在创建接口代理对象前，先设置 WebClient 的有关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定制服务</span></span><br><span class="line">    <span class="keyword">public</span> AlbumsService <span class="title function_">albumsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置超时时间</span></span><br><span class="line">        <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClient.create()</span><br><span class="line">                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">30000</span>)    <span class="comment">// 连接时间</span></span><br><span class="line">                .doOnConnected(conn -&gt; &#123;    <span class="comment">// 指定连接对象</span></span><br><span class="line">                    conn.addHandlerLast(<span class="keyword">new</span> <span class="title class_">ReadTimeoutHandler</span>(<span class="number">10</span>));    <span class="comment">// 读超时</span></span><br><span class="line">                    conn.addHandlerLast(<span class="keyword">new</span> <span class="title class_">WriteTimeoutHandler</span>(<span class="number">10</span>));   <span class="comment">// 写超时</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置异常处理</span></span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">                .clientConnector(<span class="keyword">new</span> <span class="title class_">ReactorClientHttpConnector</span>(httpClient))    <span class="comment">// 构建连接器</span></span><br><span class="line">                .defaultStatusHandler(HttpStatusCode::isError, clientResponse -&gt; &#123;<span class="comment">// 定制默认错误</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;WebClient请求异常&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请求异常&quot;</span> + clientResponse.statusCode().value()));</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理</span></span><br><span class="line">        <span class="type">HttpServiceProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> HttpServiceProxyFactory</span><br><span class="line">                .builderFor(WebClientAdapter.create(webClient)).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxyFactory.createClient(AlbumsService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p>Thymeleaf 是一个表现层的模板引擎，一般被使用在 Web 环境中，它可以处理 HTML、XML、JS 等文档，简单来说，它可以将 JSP 作为 Java Web 应用的表现层，有能力展示与处理数据。Thymeleaf 可以让表现层的界面节点与程序逻辑被共享，这样的设计，可以让界面设计人员、业务人员与技术人员都参与到项目开发中。</p><p>这样，同一个模板文件，既可以使用浏览器直接打开，也可以放到服务器中用来显示数据，并且样式之间基本上不会存在差异，因此界面设计人员与程序设计人员可以使用同一个模板文件，来查看静态与动态数据的效果。</p><p>Thymeleaf 作为视图展示模型数据，用于和用户交互操作。JSP 的代替技术。比较适合做管理系统，是一种易于学习，掌握的。我们通过几个示例掌握 Thymeleaf 基础应用。</p><h3 id="变量表达式和链接表达式"><a href="#变量表达式和链接表达式" class="headerlink" title="变量表达式和链接表达式"></a>变量表达式和链接表达式</h3><table><thead><tr><th align="left">表达式</th><th align="left">作用</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left"><code>$&#123;...&#125;</code></td><td align="left">变量表达式，可用于获取后台传过来的值</td><td align="left"><code>中国</code></td></tr><tr><td align="left"><code>@&#123;...&#125;</code></td><td align="left">链接网址表达式</td><td align="left"><code>th:href=&quot;@&#123;/css/home.css&#125;&quot;</code></td></tr></tbody></table><p>利用控制器往 request 作用域放入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/exp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exp</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;hnu&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;exp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thymeleaf 使用变量表达式展示数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div th:text=&quot;$&#123;name&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div th:text=&quot;$&#123;address&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>使用链接网址表达式传递参数，格式为<code>(key1=value1,key2=value2...)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a th:href=&quot;@&#123;/link(id=111,name=lisi)&#125;&quot;&gt;link链接，有参数&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="if-for"><a href="#if-for" class="headerlink" title="if-for"></a>if-for</h3><table><thead><tr><th align="left">表达式</th><th align="left">作用</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left"><code>th:if=&quot;boolean表达式&quot;</code></td><td align="left">当条件满足时，显示代码片段，反之不显示</td><td align="left"><code>显示内容</code></td></tr><tr><td align="left"></td><td align="left">处理循环</td><td align="left">见下方代码块</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/if-for&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ifFor</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 增加单个简单值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;login&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 增加单个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1001</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加多个对象</span></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1002</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1003</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="number">21</span>));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;base&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;if-for&lt;/h3&gt;</span><br><span class="line">    &lt;div th:if=&quot;10&gt;2&quot;&gt;10大于2&lt;/div&gt;</span><br><span class="line">    &lt;div th:if=&quot;$&#123;login&#125;&quot;&gt;用户已经登录&lt;/div&gt;</span><br><span class="line">    &lt;div th:if=&quot;$&#123;user.getAge()&#125;&gt;18&quot;&gt;用户已经成年&lt;/div&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;h3&gt;循环&lt;/h3&gt;</span><br><span class="line">    &lt;table border=&quot;1px&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;age&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr th:each=&quot;u:$&#123;users&#125;&quot;&gt;</span><br><span class="line">            &lt;td th:text=&quot;$&#123;u.getId()&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td th:text=&quot;$&#123;u.getName()&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td th:text=&quot;$&#123;u.getAge()&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图前缀</span></span><br><span class="line"><span class="attr">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment"># 视图后缀</span></span><br><span class="line"><span class="attr">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br></pre></td></tr></table></figure><h2 id="AOT-和-GraalVM"><a href="#AOT-和-GraalVM" class="headerlink" title="AOT 和 GraalVM"></a>AOT 和 GraalVM</h2><h3 id="提升性能的技术"><a href="#提升性能的技术" class="headerlink" title="提升性能的技术"></a>提升性能的技术</h3><p><strong>JIT （just in time）是现在 JVM 提高执行速度的技术，JVM 执行 Java 字节码，并将经常执行的代码编译为本机代码。这称为实时（JIT）编译。</strong></p><p>当 JVM 发现某个方法或优码块运行特别频繁的时候，就会认为这是“热点代码”（Hot Spot Code)。然后 JIT 会把“热点代码”编译成本地机器相关的机器码，并进行优化，然后再把编译后的机器码缓存起来，以备下次使用。</p><p>JVM 根据执行期间收集的分析信息决定 JIT 编译哪些代码。JIT 编译器速度很快，但是 Java 程序非常大，以至于JIT 需要很长时间才能完全预热。不经常使用的 Java 方法可能根本不会被编译。</p><p>特点：在程序执行时，边运行代码边编译。JIT编译需要时间开销，空间开销，只有对执行频繁的代码才值得编译。</p><p><strong>AOT（Ahead-of-Time Compilation），预编译（提前编译）它在 JEP-295 中描述，并在 Java9 中作为实验性功能添加。</strong></p><p>AOT 是提升 Java 程序性能的一种方法，特别是提供 JVM 的启动时间。在启动虚拟机之前，将 Java 类编译为本机代码。改进小型和大型 Java 应用程序的启动时间。</p><p><strong>总的来讲，AOT 是静态的，提升了应用启动时间，让 JVM 加载编译后的本机代码。而 JIT 是动态的，提升的是应用程序执行的性能。</strong>（现在主要还是使用 JIT，但是 Spring 框架提供了对 AOT 的支持）</p><h3 id="Native-Image"><a href="#Native-Image" class="headerlink" title="Native Image"></a>Native Image</h3><p>Native Image：原生镜像（本机镜像）。本机映像是一种预先将 Java 代码编译为独立可执行文件的技术，称为本机映像（原生镜像）。镜像是用于执行的文件。</p><p>原生镜像文件内容包括应用程序类、来自其依赖项的类、运行时库类和来自 JDK 的静态链接本机代码（二进制文件可以直接运行，不需要额外安装JDK），本机映像运行在 GraalVM 上，具有更快的启动时间和更低的运行时内存开销。（通常原生镜像文件的大小是原文件的几十倍甚至几百倍）</p><p>在 AOT 模式下，编译器在构建项目期间执行所有编译工作，这里的主要想法是将所有的”繁重工作”——昂贵的计算——转移到构建时间。也就是把项目都要执行的所有东西都准备好，具体执行的类，文件等。最后执行这个准备好的文件，此时应用能够快速启动。减少内存，cpu 开销（无需运行时的 JIT 的编译）。因为所有东西都是预先计算和预先编译好的。</p><h3 id="Native-Image-Builder"><a href="#Native-Image-Builder" class="headerlink" title="Native Image Builder"></a>Native Image Builder</h3><p>Native Image Builder（镜像构建器）：是一个实用程序，用于处理应用程序的所有类及其依赖项，包括来自 JDK 的类。它静态地分析这些数据以确定在应用程序执行期间可以访问哪些类和方法。然后，它预先将可到达的代码和数据编译为特定操作系统和体系结构的本机可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">id1(AOT)</span><br><span class="line">id2(Native Image)</span><br><span class="line">id3(Native Image Builder)</span><br><span class="line"></span><br><span class="line">id1 --使用镜像文件--&gt; id2</span><br><span class="line">id3 --生成Native Image文件--&gt; id2</span><br></pre></td></tr></table></figure><h3 id="GraalVM"><a href="#GraalVM" class="headerlink" title="GraalVM"></a>GraalVM</h3><p>GraalVM 是一个高性能 JDK 发行版，旨在加速用 Java 和其他 JVM 语言编写的应用程序，同时支持 JavaScript、Ruby、Python 和许多其他流行语言。GraalVM 的多语言功能可以在单个应用程序中混合多种编程语言，同时消除外语调用成本。GraalVM 是支持多语言的虚拟机。（也就是说，使用 go 语言编写高并发模块，使用 java 语言编写健壮性更强的模块等，这些模块都可以直接在 GraalVM 上跑）</p><p>GraalVM 是 OpenJDK 的替代方案，包含一个名为 native image 的工具，支持预先（ahead-of-time，AOT）编译。GraalVM 执行 native image 文件启动速度更快，使用的 CPU 和内存更少，并且磁盘大小更小。这使得 Java 在云中更具竞争力。</p><p>目前，AOT 的重点是允许使用 GraalVM 将 Spring 应用程序部署为本机映像。SpringBoot3 中使用 GraalVM 方案提供 Native Image 支持。</p><p>GraalVM 的 native image 工具将 Java 字节码作为输入，输出一个本地可执行文件。为了做到这一点，该工具对字节码进行静态分析。在分析过程中，该工具寻找你的应用程序实际使用的所有代码，并消除一切不必要的东西。native image 是封闭式的静态分析和编译，不支持 class 的动态加载，程序运行所需要的多有依赖项均在静态分析阶段完成。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2025/07/28/Maven/"/>
      <url>/2025/07/28/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>随着我们使用越来越多的框架，项目中使用的 jar 包越来越多，项目中，一个模块有上百个 jar 包都是很正常的。而 Maven 能够帮助我们管理这些 jar 包。Maven 使用一个名为<code>pom.xml</code>的文件来描述项目的结构和内容。在 POM 文件中，你可以定义项目的依赖、构建配置、插件、目标项目信息等。总的来说，Maven 是一个用于自动化构建项目的工具，广泛应用于 Java 项目的管理和构建。</p><p>通过查询这个<a href="https://mvnrepository.com/">网站</a>，来查询常用的 jar 包依赖。</p><h2 id="Maven-软件结构"><a href="#Maven-软件结构" class="headerlink" title="Maven 软件结构"></a>Maven 软件结构</h2><ul><li>bin：含有 Maven 的运行脚本。</li><li>boot：含有 plexus-classworlds 类加载器框架。</li><li>conf：含有 Maven 的核心配置文件。</li><li>lib：含有 Maven 运行时所需要的 Java 类库。</li><li>LICENSE、NOTICE、README.txt：针对 Maven 版本，第三方软件的简要介绍。</li></ul><h2 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h2><p>在<code>conf/setting.xml</code>文件中配置本地仓库地址（53行左右）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置国内阿里镜像（160行左右）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">    | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">    | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">    | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">   &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">     &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">     &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">     &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">     &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">   &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 JDK 项目构建（268行左右）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-20<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>20<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-的-GAVP"><a href="#Maven-的-GAVP" class="headerlink" title="Maven 的 GAVP"></a>Maven 的 GAVP</h2><p>Maven 中的 GAVP 是指 Groupld、Artifactld、Version、Packaging 等四个属性的缩写，其中前三个是必要的，而 Packaging 属性为可选项。这四个属性主要为每个项目在 maven 仓库中做一个标识，类似人的姓 - 名！有了具体标识，方便后期项目之间相互引用依赖等。</p><p>GAV 遵循的规则：</p><ol><li><strong>GroupID 格式</strong>：<code>com.&#123;公司 / BU&#125;.业务线.[子业务线]</code>，最多4级。正例：<code>com.taobao.tddl</code>或<code>com.alibaba.sourcing.multilang</code>。</li><li><strong>ArtifactID 格式</strong>：<code>产品线名 - 模块名</code>。语义不重复不遗漏，先到仓库中心去查证一下。正例：<code>tc-client / ulc-api / tair-tool / bookstore</code>。</li><li><strong>Version 版本号格式推荐</strong>：<code>主版本号.次版本号.修订号</code>。主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。次版本号：当做了向下兼容的功能性新增（新增类、接口等）。修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。例如：<code>初始-&gt;1.0.0 修改bug -&gt; 1.0.1 功能调整-&gt;1.1.1</code>。</li><li><strong>Package 定义规则</strong>：指示将项目打包为什么类型的文件，idea 根据 packaging 值，识别 maven 项目类型。packaging 属性为 jar（默认值），代表普通的 java 工程，打包以后是 jar 结尾的文件；属性为 war，代表 java 的 web 工程，打包以后是 war 结尾的文件；属性为 pom，代表不会打包，用来做继承的父工程。</li></ol><h2 id="Maven-工程"><a href="#Maven-工程" class="headerlink" title="Maven 工程"></a>Maven 工程</h2><h3 id="java-工程"><a href="#java-工程" class="headerlink" title="java 工程"></a>java 工程</h3><p>idea 中创建 maven 工程之后，会自动生成一个<code>pom.xml</code>文件，每当我们需要下载依赖进行使用的时候，我们只需要打开这个<a href="https://mvnrepository.com/">网站</a>，然后搜索相对应的 jar 包，找到对应版本，下滑复制连接，然后在<code>pom.xml</code>文件中创建<code>dependencies</code>标签，把复制的内容粘贴进去即可。</p><p>Maven 的 java 工程是 Maven 工程的默认形式，可以选择设置<code>packaging</code>为 jar 形式，也可以不用。</p><p><code>pom.xml</code>文件示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- maven工程的坐标(gavp) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- maven工程的打包方式，默认为jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下载依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web-工程"><a href="#web-工程" class="headerlink" title="web 工程"></a>web 工程</h3><p>web 工程相较于普通 java 工程，需要引入 web 依赖，我们可以设置<code>packaging</code>为 war，以 war 的形式打包工程，就可以形成 web 工程了。</p><p>值得注意的是，在设置<code>web.xml</code>文件的时候，我们要按照正确的路径来设置，参考设置路径为：<code>...\src\main\webapp\WEB-INF\web.xml</code>，注意其中的<code>src\main\webapp\</code>。</p><p>或者，下载<code>JBLJavaToWeb</code>这个插件，然后对着项目右键，选择<code>JBLJavaToWeb</code>，可以一键创建 web 工程。</p><p>或者，在创建工程的时候使用<code>Maven Archetype</code>生成 Maven 骨架，不过版本比较低。</p><h2 id="Maven-构建"><a href="#Maven-构建" class="headerlink" title="Maven 构建"></a>Maven 构建</h2><p><strong>项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。</strong></p><p>项目构建是软件开发过程中至关重要的一部分，它能够大大提高软件开发效率，使得开发人员能够更加专注于应用程序的开发和维护，而不必关心应用程序的构建细节。</p><p>同时，项目构建还能够将多个开发人员的代码汇合到一起，并能够自动化项目的构建和部署，大大降低了项目的出错风险和提高开发效率。常见的构建工具包括 Maven、Gradle、Ant 等。</p><p>构建过程有：清理（clean）、编译（compile）、测试（test）、（报告）、打包（package）、部署（deploy）。</p><p>构建命令：</p><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>mvn compile</code></td><td align="left">编译项目，生成 target 文件</td></tr><tr><td align="left"><code>mvn package</code></td><td align="left">打包项目，生成 jar 或 war 文件（编译 + 测试编译 + 打包）</td></tr><tr><td align="left"><code>mvn clean</code></td><td align="left">清理编译或打包后的项目结构</td></tr><tr><td align="left"><code>mvn install</code></td><td align="left">打包后上传到 maven 本地仓库</td></tr><tr><td align="left"><code>mvn deploy</code></td><td align="left">只打包，上传到 maven 私服仓库</td></tr><tr><td align="left"><code>mvn site</code></td><td align="left">生成站点</td></tr><tr><td align="left"><code>mvn test</code></td><td align="left">执行测试源码</td></tr><tr><td align="left"><code>mvn test-compile</code></td><td align="left">编译测试程序</td></tr></tbody></table><p>注意：测试类需要以 “Test” 结尾，测试类中的测试方法需要以 “test” 开头。</p><h3 id="Maven-构建配置"><a href="#Maven-构建配置" class="headerlink" title="Maven 构建配置"></a>Maven 构建配置</h3><p>默认情况下，构建不需要额外配置，都有对应的缺省配置。当然了，我们也可以在<code>pom.xml</code>定制一些配置，来修改默认构建的行为和产物。</p><p>例如：</p><ol><li><p>指定构建打包文件的名称，非默认名称。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认的打包名称:artifactid+version.打包方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>自定义打包名称<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>制定构建打包时，指定包含文件格式和排除文件。</p><p>应用场景：mybatis 中有时会将用于编写 SQL 语句的映射文件和 mapper 接口都写在<code>src/main/java</code>下的某个包中，此时映射文件就不会被打包，如何解决。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置要打包的资源位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置资源所在目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置包含的资源类型 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打包插件版本过低，配置更高版本插件。</p><p>常用的插件：修改 jdk 版本、tomcat 插件、mybatis 分页插件、mybatis 逆向工程插件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- java编译插件，配jdk的编译版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>构建配置是在<code>pom.xml</code>文件中的<code>build</code>标签指定。</p><h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><h3 id="Maven-依赖范围"><a href="#Maven-依赖范围" class="headerlink" title="Maven 依赖范围"></a>Maven 依赖范围</h3><p>通过设置坐标的依赖范围（scope），可以设置对应 jar 包的作用范围：<strong>编译环境、测试环境、运行环境</strong>。</p><ul><li><strong>compile</strong>：编译依赖范围，<strong>scope 元素的缺省值</strong>。使用此依赖范围的 Maven 依赖，对于<strong>三种</strong> classpath <strong>均有效</strong>，即该Maven 依赖在上述三种 classpath 均会被引入。例如，log4j 在编译、测试、运行过程都是必须的。</li><li><strong>test</strong>：测试依赖范围。使用此依赖范围的 Maven 依赖，只对<strong>测试</strong> classpath 有效。例如，Junit 依赖只有在测试阶段才需要。</li><li><strong>provided</strong>：已提供依赖范围。使用此依赖范围的 Maven 依赖，只对<strong>编译</strong> classpath 和<strong>测试</strong> classpath 有效。例如，servlet-api 依赖对于编译、测试阶段而言是需要的，但是运行阶段，由于外部容器已经提供，故不需要 Maven 重复引入该依赖。</li><li>runtime：运行时依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath、运行 classpath 有效。例如，JDBC 驱动实现依赖，其在编译时只需 JDK 提供的 JDBC 接口即可，只有测试、运行阶段才需要实现了JDBC 接口的驱动。</li><li>system：系统依赖范围，其效果与 provided 的依赖范围一致。其用于添加非 Maven 仓库的本地依赖，通过依赖元素 dependency 中的 systemPath 元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，一般不推荐使用。</li><li>import：导入依赖范围，该依赖范围只能与 dependencyManagement 元素配合使用，其功能是将目标 pom.xml 文件中 dependencyManagement 的配置导入合并到当前 pom.xml 的 dependencyManagement 中。</li></ul><h3 id="Maven-依赖下载失败"><a href="#Maven-依赖下载失败" class="headerlink" title="Maven 依赖下载失败"></a>Maven 依赖下载失败</h3><p>在使用 Maven 构建项目时，可能会发生依赖项下载错误的情况，主要原因有以下几种：</p><ol><li>下载依赖时出现网络故障或仓库服务器岩机等原因，导致无法连接至 Maven 仓库，从而无法下载依赖。</li><li>依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven 下载的依赖项与实际需要的不一致，从而引发错误。</li><li>本地 Maven 仓库或缓存被污染或损坏，导致 Maven 无法正确地使用现有的依赖项。</li></ol><p>解决方案：</p><ol><li>检查网络连接和 Maven 仓库服务器状态。</li><li>确保依赖项的版本号与项目对应的版本号匹配，并检查 POM 文件中的依赖项是否正确。</li><li>清除本地 Maven 仓库缓存（<strong>lastUpdated 文件</strong>），因为只要存在 lastupdated 缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的 gav 属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可！</li></ol><h3 id="Maven-依赖传递特性"><a href="#Maven-依赖传递特性" class="headerlink" title="Maven 依赖传递特性"></a>Maven 依赖传递特性</h3><p>依赖具有传递性，假设有一个项目 A，项目 B 依赖 A，项目 C 依赖 B，那么我们可以说项目 C 依赖 A。那么我们在执行项目 C 时，会自动把 B、A 都下载到 C 项目的 jar 包文件夹中，这就是依赖的传递性。</p><p>传递的原则：</p><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围以及配置。</p><ul><li><p>B 依赖 C 时使用 compile 范围：可以传递。</p></li><li><p>依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</p></li><li><p>B 依赖 C 时，若配置了<code>optional</code>标签，则不能传递。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>依赖传递的终止：</p><ol><li>非 compile 范围进行依赖传递。</li><li>使用 optional 配置终止传递。</li><li>依赖冲突（传递的依赖已经存在）。</li></ol><h3 id="Maven-依赖冲突解决"><a href="#Maven-依赖冲突解决" class="headerlink" title="Maven 依赖冲突解决"></a>Maven 依赖冲突解决</h3><p>Maven 自动解决依赖冲突问题能力，会按照自己的原则，进行重复依赖选择。同时也提供了手动解决的冲突的方式，不过不推荐.</p><p>解决依赖冲突（如何选择重复依赖）方式：</p><ol><li>短路优先原则（第一原则）：<code>A-&gt;B-&gt;C-&gt;D-&gt;X(version 0.0.1)</code>和<code>A-&gt;F-&gt;X(version 0.0.2)</code>，最终是 A 依赖于 0.0.2 版本。</li><li>依赖路径长度相同情况下，则 “先声明优先”（第二原则）：在&#96;&#96;中先声明的，路径相同，会优先选择。</li></ol><p>手动排除：利用<code>exclusions</code>标签在依赖方进行依赖排除：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>要排除的依赖的groupId<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>要排除的依赖的artifactId<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是：使用<code>optional</code>标签同样可以达到“排除依赖”的效果，不过作用的地方是不一样的，<code>optional</code>是作用在被依赖方，而<code>exclusion</code>是作用在依赖方。一般情况下，别人写好的被依赖方我们不能随便加<code>optional</code>，只能在自己的依赖方加上<code>exclusion</code>来排除依赖冲突。</p><h2 id="Maven-工程关系"><a href="#Maven-工程关系" class="headerlink" title="Maven 工程关系"></a>Maven 工程关系</h2><h3 id="Maven-工程继承关系"><a href="#Maven-工程继承关系" class="headerlink" title="Maven 工程继承关系"></a>Maven 工程继承关系</h3><p>Maven 继承是指在 Maven 的项目中，让一个项目从另一个项目中<strong>继承配置信息</strong>的机制。继承可以让我们在多个项目中共享同一配置信息，简化项目的管理和维护工作。</p><p><strong>继承能够在父工程中统一管理项目中的依赖信息</strong>。它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多 module。</li><li>每个 module 都需要配置自己的依赖信息。</li></ul><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范、准确的 jar 包；又能够将以往的经验沉淀下来，节约时间和精力。</li></ul><p>父工程配置（可以把父工程的<code>src</code>文件夹删掉）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父工程主要是用来进行配置管理，不需要进行打包，所以配置成pom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父工程下创建子工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置父工程的坐标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_son<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父工程利用<code>dependencyManagement</code>标签进行依赖管理，这样父工程的依赖就不会无脑继承给子工程了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子工程中，利用<code>dependencies</code>标签管理父工程的依赖，不需要写出<code>version</code>和<code>scope</code>标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven-工程的聚合关系"><a href="#Maven-工程的聚合关系" class="headerlink" title="Maven 工程的聚合关系"></a>Maven 工程的聚合关系</h3><p>Maven 聚合是指将多个项目组织到一个父级项目中，以便一起构建和管理的机制。聚合可以帮助我们更好地管理一组相关的子项目，同时简化它们的构建和部署过程。<strong>当父工程做了什么操作，子工程也就相应做出什么操作。</strong></p><p>聚合的作用：</p><ol><li>管理多个子项目：通过聚合，可以将多个子项目组织在一起，方便管理和维护。</li><li>构建和发布一组相关的项目：通过聚合，可以在一个命令中构建和发布多个相关的项目，简化了部署和维护工作。</li><li>优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。</li><li>统一管理依赖项：通过聚合，可以在父项目中管理公共依赖项和插件，避免重复定义。</li></ol><p>聚合语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 添加modules标签聚合子项目 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project1-path<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-project2-path<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-私服"><a href="#Maven-私服" class="headerlink" title="Maven 私服"></a>Maven 私服</h2><p>Maven 私服是一种特殊的 Maven 远程仓库，它是架设在<strong>局域网内</strong>的仓库服务，用来代理位于外部的远程仓库（中央仓库、其他远程公共仓库）。</p><p>建立了 Maven 私服后，当局域网内的用户需要某个构件时，会按照如下顺序进行请求和下载：</p><ol><li>请求本地仓库，若本地仓库不存在所需构件，则跳转到第2步。</li><li>请求 Maven 私服，将所需构件下载到本地仓库，若私服中不存在所需构件，则跳转到第3步。</li><li>请求外部的远程仓库，将所需构件下载并缓存到 Maven 私服，若外部远程仓库不存在所需构件，则 Maven 直接报错。</li></ol><p>此外，一些无法从外部仓库下载到的构件，也能从本地上传到私服供其他人使用。私服的优势如下：</p><ol><li>节省外网带宽：消除对外部远程仓库的大量重复请求（会消耗很大量的带宽），降低外网带宽压力。</li><li>下载速度更快：Maven 私服位于局域网内，从私服下载构建更快更稳定。</li><li>便于部署第三方构件：有些构件无法从任何一个远程仓库中获得（如：公司或组织内部的私有构件、Oracle 的 JDBC 驱动等），建立私服之后，就可以将这些构件部署到私服中，供内部 Maven 项目使用。</li><li>提高项目的稳定性，增强对项目的控制：如果不建立私服，那么 Maven 项目的构件就高度依赖外部的远程仓库，若外部网络不稳定，则项目的构建过程也会变得不稳定。建立私服后，即使外部网络状况不佳甚至中断，只要私服中已经缓存了所需的构件，Maven 也能够正常运行。私服软件（如：<a href="https://help.sonatype.com/en/download.html">Nexus</a>）提供了很多控制功能（如：权限管理、RELEASE &#x2F; SNAPSHOT 版本控制等），可以对仓库进行一些更加高级的控制。</li><li>降低中央仓库的负荷压力：由于私服会缓存中央仓库得构件，避免了很多对中央仓库的重复下载，降低了中央仓库的负荷。</li></ol><h3 id="Nexus-初始配置"><a href="#Nexus-初始配置" class="headerlink" title="Nexus 初始配置"></a>Nexus 初始配置</h3><p>右键“开始”，以管理员身份运行终端，<code>cd</code>到<code>nexus</code>所在的<code>bin</code>目录当中，然后运行<code>./nexus /run</code>启动 nexus，初次启动比较慢，需要耐心等待。</p><p>Nexus 是一个 web 工程，通过<code>http://localhost:8081/</code>进行访问。</p><p>右上角 Sign Up 进行登录，第一次登录的时候根据生成的后缀名为 password 的文件来输入密码。然后设置新的密码，并禁用匿名访问。</p><p>Nexus 上的各种仓库种类：</p><ul><li>proxy：某个远程仓库的代理。</li><li>group：存放通过 Nexus 获取的第三方 jar 包。</li><li>hosted：本团队其他开发人员部署到 Nexus 的 jar 包。</li></ul><h3 id="Nexus-jar-包相关"><a href="#Nexus-jar-包相关" class="headerlink" title="Nexus jar 包相关"></a>Nexus jar 包相关</h3><h4 id="Nexus-下载-jar-包"><a href="#Nexus-下载-jar-包" class="headerlink" title="Nexus 下载 jar 包"></a>Nexus 下载 jar 包</h4><p>修改本地 maven 的核心配置文件<code>setting.xml</code>，设置新的本地仓库地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/maven-repository-new<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把原来的阿里云仓库地址的<code>mirror</code>标签修改成如下形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus mine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果允许匿名访问，则到这一步就可以了，如果是禁用匿名访问，则需要继续往下操作，配置<code>settings.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>自己设置密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就可以在本地进行私服的 jar 包下载了。如果嫌下载太慢，可以修改下载连接为阿里云镜像：<a href="http://maven.aliyun.com/nexus/content/groups/public/%E3%80%82">http://maven.aliyun.com/nexus/content/groups/public/。</a></p><h4 id="Nexus-部署-jar-包"><a href="#Nexus-部署-jar-包" class="headerlink" title="Nexus 部署 jar 包"></a>Nexus 部署 jar 包</h4><p>maven 工程中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成上述配置之后，在对应的 maven 里点击 deploy（或者执行<code>mvn deploy</code>指令进行部署），就可以把项目部署到私服上去。</p><h4 id="Nexus-引用别人的-jar-包"><a href="#Nexus-引用别人的-jar-包" class="headerlink" title="Nexus 引用别人的 jar 包"></a>Nexus 引用别人的 jar 包</h4><p>maven 工程中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus-mine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-案例"><a href="#Maven-案例" class="headerlink" title="Maven 案例"></a>Maven 案例</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">继承</span><br><span class="line">依赖</span><br><span class="line">依赖</span><br><span class="line">继承</span><br><span class="line">继承</span><br><span class="line">父工程</span><br><span class="line">micro-shop</span><br><span class="line">pom</span><br><span class="line">子工程1</span><br><span class="line">user-service</span><br><span class="line">war</span><br><span class="line">子工程2</span><br><span class="line">order-service</span><br><span class="line">war</span><br><span class="line">通用子工程</span><br><span class="line">common-service</span><br><span class="line">jar</span><br></pre></td></tr></table></figure><h3 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h3><p>父工程进行依赖管理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父工程打包成pom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons.version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">commons.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>5.9.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 父工程依赖管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子工程"><a href="#子工程" class="headerlink" title="子工程"></a>子工程</h3><p>通用子工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用模块子工程使用依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micro-shop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包成war --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 继承了父工程，还依赖了通用子工程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hnu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 利用exclusion排除依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            </span></span><br><span class="line"><span class="comment">   &lt;exclusions&gt;</span></span><br><span class="line"><span class="comment">                &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">                    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">            &lt;/exclusions&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析</title>
      <link href="/2024/04/29/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2024/04/29/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ol><li>第一个字符必须是字母表中字母或者下划线_。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li><li>在Python3中，可以用中文作为变量名，非ASCII标识符也是允许的。</li></ol><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span>      <span class="keyword">await</span>      <span class="keyword">else</span>       <span class="keyword">import</span>     <span class="keyword">pass</span></span><br><span class="line"><span class="literal">None</span>       <span class="keyword">break</span>      <span class="keyword">except</span>     <span class="keyword">in</span>         <span class="keyword">raise</span></span><br><span class="line"><span class="literal">True</span>       <span class="keyword">class</span>      <span class="title class_">finally</span>    <span class="keyword">is</span>         <span class="keyword">return</span></span><br><span class="line"><span class="keyword">and</span>        <span class="keyword">continue</span>   <span class="keyword">for</span>        <span class="keyword">lambda</span>     <span class="keyword">try</span></span><br><span class="line"><span class="keyword">as</span>         <span class="keyword">def</span>        <span class="title function_">from</span>       <span class="keyword">nonlocal</span>   <span class="keyword">while</span></span><br><span class="line"><span class="keyword">assert</span>     <span class="keyword">del</span>        <span class="keyword">global</span>     <span class="keyword">not</span>        <span class="keyword">with</span></span><br><span class="line"><span class="keyword">async</span>      <span class="keyword">elif</span>       <span class="keyword">if</span>         <span class="keyword">or</span>         <span class="keyword">yield</span></span><br></pre></td></tr></table></figure><p>注释</p><ol><li>python中单行注释用<code>#</code>开头</li><li>多行注释可以用多个<code>#</code>号开头，还有<code>&#39;&#39;&#39;</code>和<code>&quot;&quot;&quot;</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释一</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注释二</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注释三</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><ol><li>python最具特色的就是使用缩进来表示代码块，不需要使用大括号{}</li><li>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a==<span class="number">1</span>:</span><br><span class="line">   <span class="built_in">print</span>(a)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Ture&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;a是等于1的&quot;</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Go!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><ol><li><code>print</code>默认输出是换行的，如果需要实现不换行需要在变量末尾加上<code>end=&quot;&quot;:</code></li><li><code>input</code>用的比较少（读入的是字符串类型）</li></ol><h2 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h2><ol><li>python中的变量不需要声明，每个变量在使用之前必须赋值，变量赋值以后该变量才会被创建</li><li>在python中，变量就是变量，它没有类型，我们所说的“类型”是变量所指的内存中对象的类型</li><li>等号（&#x3D;）用来给变量赋值</li><li>等号（&#x3D;）运算符左边是一个变量名，等号（&#x3D;）运算符右边是存储在变量中的值</li></ol><h4 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span></span><br><span class="line"><span class="comment"># 整数型</span></span><br><span class="line">miles = <span class="number">2.13</span></span><br><span class="line"><span class="comment"># 浮点型</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 布尔型</span></span><br><span class="line">name = <span class="string">&quot;run&quot;</span></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))<span class="comment">#type查看类型</span></span><br><span class="line">f = <span class="number">1</span>+<span class="number">2j</span><span class="comment">#复数类型 complex</span></span><br></pre></td></tr></table></figure><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><ol><li>隐式类型转换——自动完成</li><li>显式类型转换——需要使用类型函数来转换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据类型转换</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.45</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment">#112.45</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(a + b))    <span class="comment">#int float float</span></span><br><span class="line"><span class="comment">#c = a + int(b)</span></span><br><span class="line">c = <span class="built_in">int</span>(a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c))  <span class="comment">#int float int</span></span><br><span class="line"><span class="built_in">print</span>(c)    <span class="comment">#112</span></span><br><span class="line">d = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">ad = a + <span class="built_in">int</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(d),<span class="built_in">type</span>(ad))    <span class="comment">#int str int</span></span><br><span class="line"><span class="built_in">print</span>(ad)<span class="comment">#100</span></span><br><span class="line">da = <span class="built_in">str</span>(a) + d</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(d),<span class="built_in">type</span>(da))    <span class="comment">#int str str</span></span><br><span class="line"><span class="built_in">print</span>(da)<span class="comment">#1000</span></span><br></pre></td></tr></table></figure><h2 id="三、字符串基本操作"><a href="#三、字符串基本操作" class="headerlink" title="三、字符串基本操作"></a>三、字符串基本操作</h2><p><strong>字符串</strong>是由字符组成的序列，可以使用单引号（’’）或双引号（“”）括起来。字符串中每一个字符都有索引，可以使用索引来访问特定位置的序列。<mark>索引都是从0开始的。</mark></p><p><mark>切片</mark>是指通过指定起始索引和结束索引来提取子字符串。例如：print(name[1:3])将输出”li”，其中name&#x3D;”Alice”，输出的字符长度为结束索引减去起始索引，不包括结束索引的字符。当索引为<code>负数</code>时，则从后面往前面开始遍历字符串，即-1对应字符串最后一个字符，-2对应字符串倒数第二个字符……</p><p><mark>拼接</mark>：使用<code>+</code>号可以将两个字符串拼接在一起，例如：greeting&#x3D;”Hello” + name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串基本操作</span></span><br><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#索引</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])  <span class="comment">#A</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">4</span>])  <span class="comment">#e</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>:<span class="number">3</span>])    <span class="comment">#li</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>:<span class="number">2</span>])    <span class="comment">#l</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">1</span>]) <span class="comment">#e</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">4</span>:-<span class="number">2</span>])  <span class="comment">#li</span></span><br><span class="line"><span class="comment">#结束索引减去起始索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拼接</span></span><br><span class="line">test = <span class="string">&quot;Hello&quot;</span> + name</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"><span class="built_in">print</span>(test + <span class="string">&quot; &quot;</span> + name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;123&quot;</span> * <span class="number">4</span>)    <span class="comment">#字符串重复四次</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">4</span>:-<span class="number">2</span>] * <span class="number">2</span> + name[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment">#lilili</span></span><br></pre></td></tr></table></figure><h2 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>3 + 4 &#x3D; 7</td></tr><tr><td>-</td><td>减法</td><td>7 - 3 &#x3D; 4</td></tr><tr><td>*</td><td>乘法</td><td>3 * 4 &#x3D; 12</td></tr><tr><td>&#x2F;</td><td>除法</td><td>7 &#x2F; 3 &#x3D; 2.33333…</td></tr><tr><td>&#x2F;&#x2F;</td><td>整除</td><td>7 &#x2F;&#x2F; 3 &#x3D; 2</td></tr><tr><td>%</td><td>取模</td><td>7 % 3 &#x3D; 1</td></tr><tr><td>**</td><td>指数</td><td>2 ** 3 &#x3D; 8</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x + y)   <span class="comment"># 输出 13</span></span><br><span class="line"><span class="built_in">print</span>(x - y)   <span class="comment"># 输出 7</span></span><br><span class="line"><span class="built_in">print</span>(x * y)   <span class="comment"># 输出 30</span></span><br><span class="line"><span class="built_in">print</span>(x / y)   <span class="comment"># 输出 3.3333333333333335</span></span><br><span class="line"><span class="built_in">print</span>(x // y)  <span class="comment"># 输出 3</span></span><br><span class="line"><span class="built_in">print</span>(x % y)   <span class="comment"># 输出 1</span></span><br><span class="line"><span class="built_in">print</span>(x ** y)  <span class="comment"># 输出 1000</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符用于给变量或者表达式赋值。Python支持多种赋值运算符，包括简单赋值、加等于赋值、减等于赋值、乘等于赋值、除等于赋值、取模等于赋值、幂等于赋值、整除等于赋值等。</p><p>以下是一些常见的赋值运算符及其使用方法：</p><ul><li>简单赋值运算符（&#x3D;）：用于将一个值赋给变量。</li><li>加等于赋值运算符（+&#x3D;）：用于将右边的值加到左边的变量上，并将结果赋给左边的变量。</li><li>减等于赋值运算符（-&#x3D;）：用于将右边的值减去左边的变量，并将结果赋给左边的变量。</li><li>乘等于赋值运算符（*&#x3D;）：用于将右边的值乘以左边的变量，并将结果赋给左边的变量。</li><li>除等于赋值运算符（&#x2F;&#x3D;）：用于将左边的变量除以右边的值，并将结果赋给左边的变量。</li><li>取模等于赋值运算符（%&#x3D;）：用于将左边的变量对右边的值取模，并将结果赋给左边的变量。</li><li>幂等于赋值运算符（**&#x3D;）：用于将左边的变量幂运算右边的值，并将结果赋给左边的变量。</li><li>整除等于赋值运算符（&#x2F;&#x2F;&#x3D;）：用于将左边的变量整除右边的值，并将结果赋给左边的变量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>   <span class="comment"># 简单赋值</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a += <span class="number">5</span>   <span class="comment"># 加等于赋值，等同于 a = a + 5</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a -= <span class="number">3</span>   <span class="comment"># 减等于赋值，等同于 a = a - 3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a *= <span class="number">2</span>   <span class="comment"># 乘等于赋值，等同于 a = a * 2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a /= <span class="number">4</span>   <span class="comment"># 除等于赋值，等同于 a = a / 4</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a **= <span class="number">3</span>  <span class="comment"># 幂等于赋值，等同于 a = a ** 3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a //= <span class="number">2</span>  <span class="comment"># 整除等于赋值，等同于 a = a // 2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a %= <span class="number">2</span>   <span class="comment"># 取模等于赋值，等同于 a = a % 2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符用于比较两个值，返回一个布尔值（True或False）。以下是Python支持的比较运算符：</p><ul><li>等于运算符（&#x3D;&#x3D;）：用于检查两个值是否相等，如果相等则返回 True，否则返回 False。</li><li>不等于运算符（!&#x3D;）：用于检查两个值是否不相等，如果不相等则返回 True，否则返回 False。</li><li>大于运算符（&gt;）：用于检查左侧的值是否大于右侧的值，如果是则返回 True，否则返回 False。</li><li>小于运算符（&lt;）：用于检查左侧的值是否小于右侧的值，如果是则返回 True，否则返回 False。</li><li>大于等于运算符（&gt;&#x3D;）：用于检查左侧的值是否大于或等于右侧的值，如果是则返回 True，否则返回 False。</li><li>小于等于运算符（&lt;&#x3D;）：用于检查左侧的值是否小于或等于右侧的值，如果是则返回 True，否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x == y)   <span class="comment"># 输出 False</span></span><br><span class="line"><span class="built_in">print</span>(x != y)   <span class="comment"># 输出 True</span></span><br><span class="line"><span class="built_in">print</span>(x &gt; y)    <span class="comment"># 输出 True</span></span><br><span class="line"><span class="built_in">print</span>(x &lt; y)    <span class="comment"># 输出 False</span></span><br><span class="line"><span class="built_in">print</span>(x &gt;= y)   <span class="comment"># 输出 True</span></span><br><span class="line"><span class="built_in">print</span>(x &lt;= y)   <span class="comment"># 输出 False</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符用于比较两个或多个表达式的布尔值，并返回一个布尔值（True或False）。以下是Python支持的逻辑运算符：</p><ul><li>逻辑与运算符（and）：用于检查两个表达式是否都为True。</li><li>逻辑或运算符（or）：用于检查两个表达式是否至少有一个为True。</li><li>逻辑非运算符（not）：用于对表达式的值取反，如果条件为假，则返回 True，否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line">z = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x &gt; y <span class="keyword">and</span> z &gt; x)  <span class="comment"># 输出 True</span></span><br><span class="line"><span class="built_in">print</span>(x &lt; y <span class="keyword">or</span> z &lt; x)   <span class="comment"># 输出 False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> x &lt; y)        <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure><p><mark>逻辑运算符的优先级与数学中的运算符优先级不同，需要使用括号来明确优先级。例如，<code>(x &gt; y) and (z &gt; x)</code> 与 <code>x &gt; y and z &gt; x</code> 的结果是不同的。</mark></p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符是用于对二进制数进行操作的运算符，包括按位与、按位或、按位异或、按位取反等，适用于整数类型数据。下面是Python中的位运算符：</p><ul><li>按位与运算符（&amp;）：参与运算的两个数，对应的二进制位上如果都是1，结果为1，否则为0。</li><li>按位或运算符（|）：参与运算的两个数，对应的二进制位上如果有一个是1，结果为1，否则为0。</li><li>按位异或运算符（^）：参与运算的两个数，对应的二进制位上如果只有一个是1，结果为1，否则为0。</li><li>按位取反运算符（~）：对参与运算的数的二进制位按位取反，0变为1，1变为0。</li><li>左移运算符（&lt;&lt;）：将参与运算的数的二进制位向左移动指定的位数，左移后低位补0。</li><li>右移运算符（&gt;&gt;）：将参与运算的数的二进制位向右移动指定的位数，右移后高位补0或补1（取决于参与运算的数的符号位）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">60</span></span><br><span class="line">b = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)   <span class="comment"># 输出12</span></span><br><span class="line"><span class="built_in">print</span>(a | b)   <span class="comment"># 输出61</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)   <span class="comment"># 输出49</span></span><br><span class="line"><span class="built_in">print</span>(~a)      <span class="comment"># 输出-61</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;&lt; <span class="number">2</span>)  <span class="comment"># 输出240</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;&gt; <span class="number">2</span>)  <span class="comment"># 输出15</span></span><br></pre></td></tr></table></figure><p>成员运算符</p><p>成员运算符用于测试一个值是否在序列中出现。常用的成员运算符有 <code>in</code> 和 <code>not in</code>。</p><ul><li><code>in</code>：用于判断一个值是否是一个序列的成员，是返回<code>True</code>，否则返回<code>False</code>。</li><li><code>not in</code>：用于判断一个值是否不是一个序列的成员，不是返回<code>True</code>，否则返回<code>False</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> a)      <span class="comment"># 输出True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> <span class="keyword">not</span> <span class="keyword">in</span> a)  <span class="comment"># 输出True</span></span><br></pre></td></tr></table></figure><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元，返回布尔值 <code>True</code> 或 <code>False</code>。</p><p>以下是 Python 中的身份运算符：</p><ul><li><code>is</code> ：判断两个对象是否引用同一存储单元，如果是则返回 <code>True</code>，否则返回 <code>False</code>。</li><li><code>is not</code> ：判断两个对象是否引用不同的存储单元，如果是则返回 <code>True</code>，否则返回 <code>False</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)  <span class="comment"># 输出True</span></span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> d)  <span class="comment"># 输出False</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>在Python中，不同的运算符有不同的优先级，当表达式中含有多个运算符时，Python会按照一定的优先级进行计算。常见运算符的优先级从高到低如下：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数运算（最高优先级）</td></tr><tr><td>+x, -x, ~x</td><td>正、负、按位取反运算</td></tr><tr><td>*, &#x2F;, &#x2F;&#x2F;, %</td><td>乘、除、整除、取模运算</td></tr><tr><td>+, -</td><td>加、减运算</td></tr><tr><td>&lt;&lt;, &gt;&gt;</td><td>按位左移、按位右移运算</td></tr><tr><td>&amp;</td><td>按位与运算</td></tr><tr><td>^</td><td>按位异或运算</td></tr><tr><td>|</td><td>按位或运算</td></tr><tr><td>&#x3D;&#x3D;, !&#x3D;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;</td><td>比较运算符和成员运算符（左侧优先）</td></tr><tr><td>&#x3D;, +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, &#x2F;&#x2F;&#x3D;, %&#x3D;, **&#x3D;</td><td>赋值运算符和增量赋值运算符（从右向左结合）</td></tr><tr><td>is, is not</td><td>身份运算符</td></tr><tr><td>in, not in</td><td>成员运算符</td></tr><tr><td>not</td><td>逻辑非运算符</td></tr><tr><td>and</td><td>逻辑与运算符</td></tr><tr><td>or</td><td>逻辑或运算符</td></tr><tr><td>lambda</td><td>lambda表达式（最低优先级）</td></tr></tbody></table><h2 id="五、复合数据类型"><a href="#五、复合数据类型" class="headerlink" title="五、复合数据类型"></a>五、复合数据类型</h2><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><p>列表是一种有序的数据类型，可以存储多个任意类型的数据。列表使用方括号<code>[ ]</code>来表示，每个元素之间用逗号隔开。</p><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lst), lst)<span class="comment">#list类型</span></span><br></pre></td></tr></table></figure><h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><p>列表的元素可以通过索引来访问，索引从0开始。列表还支持切片操作，可以使用类似于字符串的切片语法来访问其中的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">0</span>])<span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#[2,3]</span></span><br></pre></td></tr></table></figure><h4 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h4><p>除了基本的访问和切片操作，列表还支持一系列的方法，列表有很多常用的方法，下面是一些常用的列表方法：</p><ul><li>append()：向列表末尾添加一个元素。</li><li>insert()：向列表指定位置插入一个元素。</li><li>remove()：从列表中移除指定的元素。</li><li>pop()：从列表末尾移除一个元素。</li><li>sort()：对列表进行排序。</li><li>reverse()：将列表翻转。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始列表：&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 添加一个元素</span></span><br><span class="line">my_list.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;添加一个元素：&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 在指定位置插入一个元素</span></span><br><span class="line">my_list.insert(<span class="number">2</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;在指定位置插入一个元素：&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 移除指定的元素</span></span><br><span class="line">my_list.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除指定的元素：&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 移除末尾的元素</span></span><br><span class="line">my_list.pop()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除末尾的元素：&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 对列表进行排序</span></span><br><span class="line">my_list.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对列表进行排序：&quot;</span>, my_list)</span><br><span class="line"><span class="comment"># 将列表翻转</span></span><br><span class="line">my_list.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;将列表翻转：&quot;</span>, my_list)</span><br></pre></td></tr></table></figure><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><p>除了列表自身的一些方法外，Python还提供了一些方法可以操作列表：</p><ul><li>len()：求列表中元素的个数。</li><li>+：合并两个列表。</li><li>*：重复列表元素。</li><li>in：判断元素是否在列表内。</li><li>for：对列表进行遍历。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">my_list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_list2 = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始列表1：&quot;</span>, my_list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始列表2：&quot;</span>, my_list2)</span><br><span class="line"><span class="comment"># 求列表长度</span></span><br><span class="line">ln = <span class="built_in">len</span>(my_list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;求列表长度：&quot;</span>, ln)</span><br><span class="line"><span class="comment"># 合并两个列表</span></span><br><span class="line">my_list3 = my_list1 + my_list2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;合并两个列表：&quot;</span>, my_list3)</span><br><span class="line"><span class="comment"># 重复列表元素</span></span><br><span class="line">my_list4 = my_list1 * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;重复列表元素：&quot;</span>, my_list4)</span><br><span class="line"><span class="comment"># 判断元素是否在列表内</span></span><br><span class="line">ex1 = <span class="number">3</span> <span class="keyword">in</span> my_list1</span><br><span class="line">ex2 = <span class="number">3</span> <span class="keyword">in</span> my_list2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;判断元素是否在列表内：&quot;</span>, ex1, ex2)</span><br><span class="line"><span class="comment"># 对列表进行遍历</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> my_list1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对列表进行遍历：&quot;</span>, x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h3><p>元组和列表类似，也是一种有序的数据类型，可以存储多个任意类型的数据。<mark>但是元组一旦创建，就不能再修改其中的元素。</mark></p><p>元组使用圆括号 ( ) 来表示，每个元素之间用逗号隔开。</p><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br></pre></td></tr></table></figure><h4 id="访问元素-1"><a href="#访问元素-1" class="headerlink" title="访问元素"></a>访问元素</h4><p>元组的访问和切片操作和列表类似，也是通过索引和切片语法来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>)</span><br><span class="line">tuple2 = (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;通过索引访问：&quot;</span>, tuple1[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;通过切片访问：&quot;</span>, tuple1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组长度：&quot;</span>, <span class="built_in">len</span>(tuple1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素重复：&quot;</span>, tuple1 * <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组合并：&quot;</span>, tuple1 + tuple2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素判断：&quot;</span>, <span class="string">&quot;A&quot;</span> <span class="keyword">in</span> tuple1, <span class="string">&quot;A&quot;</span> <span class="keyword">in</span> tuple2)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tuple2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;对元组进行遍历：&quot;</span>, x)</span><br></pre></td></tr></table></figure><h3 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h3><p>集合是一种无序、不重复的数据类型，用于去重或者判断一个元素是否存在。集合使用花括号 { } 来表示，每个元素之间用逗号隔开。</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>集合的操作包括添加元素、删除元素、查找、遍历、求并集、交集等。</p><ul><li>add(element)：向集合中添加元素</li><li>update(set)：向集合中添加多个元素，将集合更新为和指定集合的并集</li><li>discard(element)：移除集合中指定的元素</li><li>remove(element)：移除集合中指定的元素，如果不存在则抛出异常</li><li>pop()：随机移除一个元素并返回，由于集合是无序的，因此无法确定删除的是哪个元素。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 添加不存在的元素</span></span><br><span class="line">my_set.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;添加不存在的元素：&quot;</span>, my_set)</span><br><span class="line"><span class="comment"># 添加已经存在的元素</span></span><br><span class="line">my_set.add(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;添加已经存在的元素：&quot;</span>, my_set)</span><br><span class="line"><span class="comment"># 向集合中添加多个元素</span></span><br><span class="line">my_set.update([<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">my_set.update((<span class="number">7</span>, <span class="number">8</span>))</span><br><span class="line">my_set.update(&#123;<span class="number">9</span>, <span class="number">10</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;向集合中添加多个元素：&quot;</span>, my_set)</span><br><span class="line"><span class="comment"># 移除集合中指定的元素</span></span><br><span class="line">my_set.remove(<span class="number">3</span>)</span><br><span class="line">my_set.discard(<span class="number">5</span>)</span><br><span class="line">pp = my_set.pop()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除集合中指定的元素：&quot;</span>, my_set, pp)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> my_set:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;遍历集合：&quot;</span>, x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><p>可以使用一些内置的方法来对集合进行操作。以下是一些常用的集合方法：</p><ul><li>clear()：清空集合</li><li>copy()：复制集合</li><li>difference(set)：返回集合和指定集合的差集</li><li>difference_update(set)：移除集合中和指定集合相同的元素</li><li>intersection(set)：返回集合和指定集合的交集</li><li>intersection_update(set)：保留集合中和指定集合相同的元素</li><li>isdisjoint(set)：判断两个集合是否没有共同元素</li><li>issubset(set)：判断一个集合是否是另一个集合的子集</li><li>issuperset(set)：判断一个集合是否是另一个集合的超集</li><li>symmetric_difference(set)：返回集合和指定集合的对称差集</li><li>symmetric_difference_update(set)：将集合更新为和指定集合的对称差集<br>union(set)：返回集合和指定集合的并集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">fruits.add(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出: &#123;&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;cherry&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 移除元素</span></span><br><span class="line">fruits.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出: &#123;&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;cherry&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 清空集合</span></span><br><span class="line">fruits.clear()</span><br><span class="line"><span class="built_in">print</span>(fruits)  <span class="comment"># 输出: set()</span></span><br><span class="line"><span class="comment"># 复制集合</span></span><br><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">fruits_copy = fruits.copy()</span><br><span class="line"><span class="built_in">print</span>(fruits_copy)  <span class="comment"># 输出: &#123;&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;cherry&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 求交集</span></span><br><span class="line">x = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;google&quot;</span>, <span class="string">&quot;microsoft&quot;</span>, <span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line">z = x.intersection(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># 输出: &#123;&#x27;apple&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 求并集</span></span><br><span class="line">x = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;google&quot;</span>, <span class="string">&quot;microsoft&quot;</span>, <span class="string">&quot;apple&quot;</span>&#125;</span><br><span class="line">z = x.union(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># 输出: &#123;&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;google&#x27;, &#x27;cherry&#x27;, &#x27;microsoft&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 判断是否是子集</span></span><br><span class="line">x = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&quot;f&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">z = x.issubset(y)</span><br><span class="line"><span class="built_in">print</span>(z)  <span class="comment"># 输出: True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（Dictionary）</h3><p>字典是一种无序的键值对（key-value）数据类型，可以用来存储任意类型的数据。字典使用花括号 { } 来表示，每个键值对之间用冒号 : 隔开，键值对之间用逗号隔开。<mark>key必须是唯一的</mark></p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><p>可以使用花括号 {} 或者 dict() 函数来创建字典。使用花括号创建字典时，键-值对之间用冒号 : 分隔，每个键-值对之间用逗号分隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用花括号创建字典</span></span><br><span class="line">my_dict1 = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict1)</span><br><span class="line"><span class="comment"># 使用 dict() 函数创建字典</span></span><br><span class="line">my_dict2 = <span class="built_in">dict</span>(apple=<span class="number">3</span>, banana=<span class="number">5</span>, orange=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(my_dict2)</span><br></pre></td></tr></table></figure><h4 id="访问元素-2"><a href="#访问元素-2" class="headerlink" title="访问元素"></a>访问元素</h4><p>可以使用键来访问字典中的元素。如果键不存在，则会抛出 KeyError 异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&#x27;apple&#x27;</span>])  <span class="comment"># 输出 3</span></span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&#x27;pear&#x27;</span>])   <span class="comment"># 抛出 KeyError 异常</span></span><br></pre></td></tr></table></figure><p>可以使用 get() 方法来访问字典中的元素。如果键不存在，则会返回 None 或者指定的默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict.get(<span class="string">&#x27;apple&#x27;</span>))      <span class="comment"># 输出 3</span></span><br><span class="line"><span class="built_in">print</span>(my_dict.get(<span class="string">&#x27;pear&#x27;</span>))       <span class="comment"># 输出 None</span></span><br><span class="line"><span class="built_in">print</span>(my_dict.get(<span class="string">&#x27;pear&#x27;</span>, <span class="number">0</span>))    <span class="comment"># 输出 0</span></span><br></pre></td></tr></table></figure><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><blockquote><p>Python字典包含了以下内置方法：</p><p>clear()：删除字典内所有元素<br>copy()：返回一个字典的浅复制<br>get(key, default&#x3D;None)：返回指定键的值，如果值不在字典中返回default值。<br>has_key(key)：如果键在字典dict里返回true，否则返回false。<br>items()：以列表返回可遍历的(键, 值) 元组数组。<br>keys()：以列表返回一个字典所有的键。<br>values()：以列表返回字典中的所有值。</p></blockquote><h2 id="六、条件语句和循环结构"><a href="#六、条件语句和循环结构" class="headerlink" title="六、条件语句和循环结构"></a>六、条件语句和循环结构</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>条件语句使用的是 <code>if</code> 关键字，在代码运行中，有时候需要在不同的情况下执行不同的内容，此时就需要使用<code>if</code>条件句。</p><p>语法结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">执行的代码<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">执行的代码<span class="number">2</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">执行的代码<span class="number">3</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入数字 a: &#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入数字 b: &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">elif</span> a &lt; b:</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a和b相等&quot;</span>)</span><br></pre></td></tr></table></figure><p>三目运算符的使用</p><p>变量 &#x3D; 表达式1 if 判断条件 else 表达式2,执行原理就是，当<code>if</code>判断条件成立的时候，执行表达式1的代码，否则执行表达式2的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入数字 a: &#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入数字 b: &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span> = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>)</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p><code>while</code> 循环的使用是非常简单的，只要判断条件为真就可以不断的循环下去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">执行的代码</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 1+2+3+……+100</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 字符串或可迭代对象:</span><br><span class="line">执行的代码</span><br><span class="line">    </span><br><span class="line">这里介绍一下<span class="keyword">for</span>循环的使用：</span><br><span class="line"><span class="number">1</span>、可迭代对象：可以是列表，字典，集合等.</span><br><span class="line"><span class="number">2</span>、<span class="keyword">for</span> 循环的使用规则是：每循环一次，变量就依次读取<span class="string">&#x27;可迭代对象或字符串&#x27;</span>的一个元素</span><br><span class="line">直到变量将<span class="string">&#x27;可迭代对象或字符串内的元素&#x27;</span>全部读取完，此时循环结束</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello World&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;  &#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>range()函数的使用：</strong><br><code>range()</code> 函数通常结合<code>for</code> 循环使用，用来创建一定范围的数据，使循环的变量达到依次读取数据的效果。下面介绍一下函数的用法：</p><table><thead><tr><th>range(n)</th><th>创建[0,n)的数据，变量依次读取</th></tr></thead><tbody><tr><td>range(n,m)</td><td>创建[n,m)的数据</td></tr><tr><td>range(n,m,t)</td><td>创建[n,m)的数据，但每个数之间的间隔时t</td></tr></tbody></table><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;HE&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>: &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(j, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>break</code> ：在循环过程中，当执行到<code>break</code> 关键字的时候会终止循环</p></li><li><p><code>continue</code> ：循环过程中，当执行到<code>continue</code> 关键字的时候，不会终止，但会跳过这一次循环</p></li><li><p><strong>循环 else 结构：</strong>此种结构是循环中的一种特殊结构，当<code>for</code>循环没有被<code>break</code> 关键字终止时，在循环结束后会执行<code>else</code> 内的代码，否则不会执行。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 字符串或可迭代对象:</span><br><span class="line">执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">执行的代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello world&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;字符串中包含字符 y&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;字符串中不包含字符 y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==&#x27;</span> * <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;Hello python&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;字符串中包含字符 y&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;字符串中不包含字符 y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">字符串中不包含字符 y</span></span><br><span class="line"><span class="string">================</span></span><br><span class="line"><span class="string">字符串中包含字符 y</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ol><li>函数代码以<code>def</code>关键字开头，后接函数标识符名称和圆括号()</li><li>括号内部为函数的参数。</li><li>函数的第一行语句可以选择性地使用文档字符串——用于存放函数说明</li><li>函数内容以冒号：起始，并且缩进</li><li>return[表达式]结束函数，选择性地返回一个值给调用方，不带表达式的return相当于返回None</li></ol><p>如果在开发程序时，需要某块代码多次，但是为了提高编写的效率以及代码的重用，所以把具有独立功能的代码块组织为一个小模块，这就是函数</p><p><strong>定义函数的格式如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    代码</span><br></pre></td></tr></table></figure><p>Python 使用def 开始函数定义，紧接着是函数名，内部为函数的具体功能实现代码</p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a,b=<span class="number">1</span></span>):<span class="comment">#缺省参数，未传b时则b默认为1</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b :</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;要输出的数为：&quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入的第一个数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入的第一个数：&quot;</span>))</span><br><span class="line">maxn = <span class="built_in">max</span>(a,b)</span><br><span class="line">printf(maxn)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输入：</span></span><br><span class="line"><span class="string">a = 3</span></span><br><span class="line"><span class="string">b = 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">输入的第一个数：3</span></span><br><span class="line"><span class="string">输入的第一个数：2</span></span><br><span class="line"><span class="string">要输出的数为：3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="八、文件操作"><a href="#八、文件操作" class="headerlink" title="八、文件操作"></a>八、文件操作</h2><p><strong>打开一个文件</strong></p><ol><li>Python open()方法用于打开一个文件，并返回文件对象</li><li>在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出OSError</li><li>注意：使用open()方法一定要保证关闭文件对象，即调用close()方法</li><li>open()函数常用形式是接收两个参数：文件名(file)和模式(model)</li></ol><table><thead><tr><th>r</th><th>以只读方式打开文件，文件的指针将会放在文件的开头。这是默认模式。</th></tr></thead><tbody><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从头开始编辑，即原有内容会被删除。如果该文件不存在，则创建新文件。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从头开始编辑，即原有内容会被删除。如果该文件不存在，则创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存创建新文件进行写入。</td></tr></tbody></table><p><strong>file对象使用open函数来创建</strong></p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>file.close()</td><td>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td>file.read([size])</td><td>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td>file.readline([size])</td><td>读取整行，包括”\n”字符。</td></tr><tr><td>file.readlines([sizeint])</td><td>读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行,实际读取值可能比 sizeint 较大,因为需要填充缓冲区。</td></tr><tr><td>file.write(str)</td><td>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td>file.writelines(sequence)</td><td>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #文件的读取</span></span><br><span class="line"><span class="comment"># hello = open(file=&quot;hello.txt&quot;,mode=&quot;r&quot;,encoding=&#x27;utf-8&#x27;) #r表示只读</span></span><br><span class="line"><span class="comment"># #编码</span></span><br><span class="line"><span class="comment"># content= hello.readlines()</span></span><br><span class="line"><span class="comment"># for i in content:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment"># hello.close()   #类  成员函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">&quot;hello.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> hello:</span><br><span class="line">    <span class="comment"># 编码</span></span><br><span class="line">    content = hello.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件写入        </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">&quot;hello.txt&quot;</span>,mode=<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> hello: <span class="comment">#a是追加</span></span><br><span class="line">    <span class="comment"># 编码</span></span><br><span class="line">    content = hello.write(<span class="string">&quot;大家好!\n&quot;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="九、模块安装与导入"><a href="#九、模块安装与导入" class="headerlink" title="九、模块安装与导入"></a>九、模块安装与导入</h2><p>通过pip来安装库</p><ol><li>pip是Python包管理工具，该工具提供了对Python包的查找、下载、安装、卸载的功能。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip -- version</span><br><span class="line"></span><br><span class="line">pip install some-package-name</span><br><span class="line"></span><br><span class="line">pip uninstall some-package-name</span><br><span class="line"></span><br><span class="line">pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>导入库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(np.add(a + b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#from numpy import add</span></span><br><span class="line"><span class="comment">#a = 1</span></span><br><span class="line"><span class="comment">#b = 2</span></span><br><span class="line"><span class="comment">#print(add(a + b))</span></span><br></pre></td></tr></table></figure><h2 id="十、数据分析"><a href="#十、数据分析" class="headerlink" title="十、数据分析"></a>十、数据分析</h2><p>提出问题→准备数据→分析数据→获得结论→成果可视化</p><p><strong>数据分析</strong>：把大量的数据进行统计和整理，得出结论，为后续的决策提供数据支持</p><h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3><ol><li>能将数据进行可视化、更直观的呈现</li><li>使数据更加客观、更具说服力</li></ol><p><code>matplotlib</code>：最流行的Python底层绘图库，主要做数据可视化图表，名字取材于MATLAB，模仿MATLAB构建</p><p><strong>常用的统计图：</strong></p><p><strong>折线图</strong>:以折线的上升或下降来表示统计数量的增减变化的统计图特点:能够显示数据的变化趋势，反映事物的变化情况。(<code>变化</code>)</p><p><strong>直方图</strong>:由一系列高度不等的纵向条纹或线段表示数据分布的情况。一般用横轴表示数据范围，纵轴表示分布情况。特点:绘制<code>连续性</code>的数据,展示一组或者多组数据的分布状况(<code>统计</code>)</p><p><strong>条形图</strong>:排列在工作表的列或行中的数据可以绘制到条形图中。特点:绘制连<code>离散</code>的数据,能够一眼看出各个数据的大小,比较数据之间的差别。(<code>统计</code>)</p><p><strong>散点图</strong>:用两组数据构成多个坐标点，考察坐标点的分布,判断两变量之间是否存在某种关联或总结坐标点的分布模式。特点:判断变量之间是否存在数量关联趋势,展示离群点(<code>分布规律</code>)</p><h4 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h4><p><code>axis轴</code>：指的是x或者y这种坐标轴</p><p>示例代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#数据在x轴的位置，是一个可迭代对象</span></span><br><span class="line">y = [<span class="number">15</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">15</span>]</span><br><span class="line">        <span class="comment">#数据在y轴的位置，是一个可迭代对象</span></span><br><span class="line">        <span class="comment">#(2,15),(4,13)……（24，15）</span></span><br><span class="line">plt.plot(x,y)   <span class="comment">#传入x和y绘制折线图</span></span><br><span class="line">plt.show()  <span class="comment">#执行程序展示图形</span></span><br></pre></td></tr></table></figure><p>示例代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#数据在x轴的位置，是一个可迭代对象</span></span><br><span class="line">y = [<span class="number">15</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">15</span>]</span><br><span class="line">        <span class="comment">#数据在y轴的位置，是一个可迭代对象</span></span><br><span class="line">        <span class="comment">#(2,15),(4,13)……（24，15）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">20</span>,<span class="number">8</span>),dpi = <span class="number">80</span>) <span class="comment">#在图像模糊时传入dpi能够使图片清晰</span></span><br><span class="line"></span><br><span class="line">plt.plot(x,y)   <span class="comment">#传入x和y绘制折线图</span></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;./p1.png&#x27;</span>) <span class="comment">#保存到当前文件下   也可以保存为svg矢量图格式，放大后不会有锯齿</span></span><br><span class="line">plt.show()  <span class="comment">#执行程序展示图形</span></span><br></pre></td></tr></table></figure><p>调整x或者y轴上的刻度，示例代码3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">26</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#数据在x轴的位置，是一个可迭代对象</span></span><br><span class="line">y = [<span class="number">15</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">15</span>]</span><br><span class="line">        <span class="comment">#数据在y轴的位置，是一个可迭代对象</span></span><br><span class="line">        <span class="comment">#(2,15),(4,13)……（24，15）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">20</span>,<span class="number">8</span>),dpi = <span class="number">80</span>) <span class="comment">#在图像模糊时传入dpi能够使图片清晰</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x的刻度</span></span><br><span class="line">_xtick_labels = [i/<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">49</span>)]</span><br><span class="line"><span class="comment"># plt.xticks(x)</span></span><br><span class="line"><span class="comment"># plt.xticks(range(2,25,3))</span></span><br><span class="line"><span class="comment"># plt.xticks(_xtick_labels)</span></span><br><span class="line">plt.xticks(_xtick_labels[::<span class="number">3</span>])  <span class="comment">#当刻度太密集时使用列表的步长（间隔取值），matplotlib会自动帮我们对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置y的刻度</span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">min</span>(y),<span class="built_in">max</span>(y)+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)   <span class="comment">#传入x和y绘制折线图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment"># plt.savefig(&#x27;./p1.png&#x27;) #保存到当前文件下   也可以保存为svg矢量图格式，放大后不会有锯齿</span></span><br><span class="line">plt.show()  <span class="comment">#执行程序展示图形</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置中文显示：可以通过<code>matplotlib.rc</code>进行修改，具体方法可以参见源码（CTRL + 鼠标左键），以及加上坐标轴的描述和图的描述信息，示例代码4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="comment"># windows设置字体显示中文</span></span><br><span class="line">matplotlib.rc(<span class="string">&quot;font&quot;</span>,family=<span class="string">&quot;Microsoft Yahei&quot;</span>,weight=<span class="string">&quot;bold&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">120</span>)</span><br><span class="line">y = [random.randint(<span class="number">20</span>,<span class="number">35</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>)]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi = <span class="number">80</span>)    <span class="comment">#设置图片大小</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴的刻度</span></span><br><span class="line"></span><br><span class="line">_xtick_labels = [<span class="string">&quot;10点&#123;&#125;分&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>)]</span><br><span class="line">_xtick_labels += [<span class="string">&quot;11点&#123;&#125;分&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取步长，数字和字符串一一对应，数据的长度一样</span></span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">list</span>(x)[::<span class="number">3</span>],_xtick_labels[::<span class="number">3</span>],rotation=<span class="number">45</span>) <span class="comment">#rotation旋转的度数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加描述信息</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;温度 单位（℃）&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;10点到12点每分钟的气温变化情况&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>图形中加上网格以及另一种方式设置中文字体，示例代码5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">my_font = font_manager.FontProperties(fname = <span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)     <span class="comment"># 设置宋体</span></span><br><span class="line">y = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度</span></span><br><span class="line">_xtick_labels = [<span class="string">&quot;&#123;&#125;岁&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">plt.xticks(x,_xtick_labels,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置y轴刻度</span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制网格</span></span><br><span class="line">plt.grid(alpha=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="python设置中文字体的三种方法"><a href="#python设置中文字体的三种方法" class="headerlink" title="python设置中文字体的三种方法"></a>python设置中文字体的三种方法</h5><p><strong>方法一</strong></p><ul><li>windows和linux设置字体的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">font = &#123;<span class="string">&#x27;family&#x27;</span> : <span class="string">&#x27;Microsoft YaHei&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;weight&#x27;</span> : <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;size&#x27;</span>   : <span class="string">&#x27;larger&#x27;</span>&#125;              </span><br><span class="line">matplotlib.rc(<span class="string">&quot;font&quot;</span>,**font)</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><ul><li>windows和linux设置字体的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rc(<span class="string">&quot;font&quot;</span>,family=<span class="string">&#x27;Microsoft YaHei&#x27;</span>,weight=<span class="string">&quot;bold&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>方法三</strong></p><ul><li>宋体和Times New Roman</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"><span class="comment"># window系统下的字体路径</span></span><br><span class="line"><span class="comment"># 宋体：fname=&quot;C:\Windows\Fonts\simsun.ttc&quot;</span></span><br><span class="line"><span class="comment"># Times New Roman：fname=&quot;C:\Windows\Fonts\times.ttf</span></span><br><span class="line">my_font=font_manager.FontProperties(fname=<span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)</span><br><span class="line"><span class="comment"># 在需要中文显示的地方添加fontproperties=my_font即可</span></span><br><span class="line">plt.xticks(<span class="built_in">list</span>(x)[::<span class="number">3</span>],_xtick_lables[::<span class="number">3</span>],rotation=<span class="number">45</span>,fontproperties=my_font)</span><br></pre></td></tr></table></figure><p>在图形中绘制多条折线，以及设置线条的样式和添加图例等，示例代码6：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">my_font = font_manager.FontProperties(fname = <span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)     <span class="comment"># 设置宋体</span></span><br><span class="line">y_1 = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">y_2 = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y_1,label=<span class="string">&quot;自己&quot;</span>,color=<span class="string">&quot;orange&quot;</span>,linestyle=<span class="string">&quot;:&quot;</span>,linewidth=<span class="number">2</span>)     <span class="comment"># 颜色 线条样式，线条粗细</span></span><br><span class="line">plt.plot(x,y_2,label=<span class="string">&quot;同桌&quot;</span>,color=<span class="string">&quot;cyan&quot;</span>,linestyle=<span class="string">&quot;-.&quot;</span>,linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度</span></span><br><span class="line">_xtick_labels = [<span class="string">&quot;&#123;&#125;岁&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">plt.xticks(x,_xtick_labels,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置y轴刻度</span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制网格</span></span><br><span class="line">plt.grid(alpha=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">plt.legend(prop=my_font, loc=<span class="string">&#x27;upper left&#x27;</span>)  <span class="comment">#字体 位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>导入库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot plt</span><br></pre></td></tr></table></figure><ul><li>设置图片大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">80</span>),dpi=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><ul><li>绘图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y)<span class="comment"># x是所有坐标的x值，y是所有坐标的y值</span></span><br></pre></td></tr></table></figure><ul><li>调整x或y轴的刻度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks()</span><br><span class="line">plt.yticks()</span><br><span class="line"><span class="comment"># 调整间距，则传一个参数（包含数字的可迭代对象），步长合适即可</span></span><br><span class="line"><span class="comment"># 添加字符串到x(y)轴 传入两个参数，分别是两个可迭代对象，数字和字符串最终会一一对应，只显示字符串</span></span><br></pre></td></tr></table></figure><ul><li>展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>保存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">&quot;file_path&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>图形的样式</li></ul><p>color、linestyle、linewidth、alpha(透明度，从0-1)</p><ul><li>添加图形的描述</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel()</span><br><span class="line">plt.ylabel()</span><br><span class="line">plt.title()</span><br></pre></td></tr></table></figure><ul><li>网格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.gird(alpha=<span class="number">0.4</span>,linestyle=)</span><br></pre></td></tr></table></figure><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><p><mark>技术要点：plt.scatter(x,y)</mark></p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)</span><br><span class="line">y_3 = [<span class="number">11</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">y_10 = [<span class="number">26</span>,<span class="number">26</span>,<span class="number">28</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">19</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">x_3 = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>)</span><br><span class="line">x_10 = <span class="built_in">range</span>(<span class="number">51</span>,<span class="number">82</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用scatter绘制散点图，和之前绘制折线图的唯一区别</span></span><br><span class="line">plt.scatter(x_3,y_3,label=<span class="string">&quot;3月份&quot;</span>)</span><br><span class="line">plt.scatter(x_10,y_10,label=<span class="string">&quot;10月份&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整x轴的刻度</span></span><br><span class="line"></span><br><span class="line">_x = <span class="built_in">list</span>(x_3)+<span class="built_in">list</span>(x_10)</span><br><span class="line">_xtick_labels = [<span class="string">&quot;3月&#123;&#125;日&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x_3]</span><br><span class="line">_xtick_labels += [<span class="string">&quot;10月&#123;&#125;日&quot;</span>.<span class="built_in">format</span>(i-<span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> x_10]</span><br><span class="line">plt.xticks(_x[::<span class="number">3</span>],_xtick_labels[::<span class="number">3</span>],fontproperties=my_font,rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>,prop=my_font)</span><br><span class="line"><span class="comment"># 添加描述信息</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;时间&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.ylabel(<span class="string">&quot;温度&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.title(<span class="string">&quot;标题&quot;</span>,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h4><p>横向条形图，示例代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">my_font = font_manager.FontProperties(fname = <span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)     <span class="comment"># 设置宋体</span></span><br><span class="line">x = [<span class="string">&quot;满江红&quot;</span>,<span class="string">&quot;流浪地球2&quot;</span>,<span class="string">&quot;孤注一掷&quot;</span>,<span class="string">&quot;消失的她&quot;</span>,<span class="string">&quot;封神第一部&quot;</span>,<span class="string">&quot;八角笼中&quot;</span>,<span class="string">&quot;长安三万里&quot;</span>,<span class="string">&quot;熊出没&quot;</span>,<span class="string">&quot;坚如磐石&quot;</span>,<span class="string">&quot;人生路不熟&quot;</span>]</span><br><span class="line">y = [<span class="number">45.44</span>,<span class="number">40.29</span>,<span class="number">38.48</span>,<span class="number">35.23</span>,<span class="number">26.33</span>,<span class="number">22.07</span>,<span class="number">18.24</span>,<span class="number">14.95</span>,<span class="number">13.43</span>,<span class="number">11.84</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(x)),y,width=<span class="number">0.3</span>)</span><br><span class="line"><span class="comment"># 设置字符串到x轴</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(x)),x,fontproperties=my_font,rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;影片名&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.ylabel(<span class="string">&quot;票房&quot;</span>,fontproperties=my_font)</span><br><span class="line">plt.title(<span class="string">&quot;”2023年度前十票房电影&quot;</span>,fontproperties=my_font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制表格</span></span><br><span class="line">plt.grid()</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment"># plt.savefig(&quot;./p2.png&quot;)</span></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>纵向条形图，示例代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制横向条形图</span></span><br><span class="line">my_font = font_manager.FontProperties(fname = <span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)     <span class="comment"># 设置宋体</span></span><br><span class="line">x = [<span class="string">&quot;满江红&quot;</span>,<span class="string">&quot;流浪地球2&quot;</span>,<span class="string">&quot;孤注一掷&quot;</span>,<span class="string">&quot;消失的她&quot;</span>,<span class="string">&quot;封神第一部&quot;</span>,<span class="string">&quot;八角笼中&quot;</span>,<span class="string">&quot;长安三万里&quot;</span>,<span class="string">&quot;熊出没&quot;</span>,<span class="string">&quot;坚如磐石&quot;</span>,<span class="string">&quot;人生路不熟&quot;</span>]</span><br><span class="line">y = [<span class="number">45.44</span>,<span class="number">40.29</span>,<span class="number">38.48</span>,<span class="number">35.23</span>,<span class="number">26.33</span>,<span class="number">22.07</span>,<span class="number">18.24</span>,<span class="number">14.95</span>,<span class="number">13.43</span>,<span class="number">11.84</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">plt.barh(<span class="built_in">range</span>(<span class="built_in">len</span>(x)),y,height=<span class="number">0.3</span>,color = <span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置字符串到y轴</span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(x)),x,fontproperties=my_font)</span><br><span class="line"><span class="comment"># 添加网格</span></span><br><span class="line">plt.grid(alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment"># plt.savefig(&quot;./p2.png&quot;)</span></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>绘制多个条形图，示例代码3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">my_font = font_manager.FontProperties(fname = <span class="string">&quot;C:\Windows\Fonts\simsun.ttc&quot;</span>)     <span class="comment"># 设置宋体</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;猩球崛起3：终极大战&quot;</span>,<span class="string">&quot;多克尔克&quot;</span>,<span class="string">&quot;蜘蛛侠：英雄归来&quot;</span>,<span class="string">&quot;战狼2&quot;</span>]</span><br><span class="line">b_16 = [<span class="number">15746</span>,<span class="number">312</span>,<span class="number">4497</span>,<span class="number">319</span>]</span><br><span class="line">b_15 = [<span class="number">12357</span>,<span class="number">156</span>,<span class="number">2045</span>,<span class="number">168</span>]</span><br><span class="line">b_14 = [<span class="number">2358</span>,<span class="number">399</span>,<span class="number">2358</span>,<span class="number">362</span>]</span><br><span class="line"></span><br><span class="line">bar_width = <span class="number">0.2</span></span><br><span class="line">x_14 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(a)))</span><br><span class="line">x_15 = [i + bar_width <span class="keyword">for</span> i <span class="keyword">in</span> x_14]</span><br><span class="line">x_16 = [i + bar_width*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_14]</span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">plt.bar(x_14,b_14,width=bar_width,label=<span class="string">&quot;9月14日&quot;</span>)</span><br><span class="line">plt.bar(x_15,b_15,width=bar_width,label=<span class="string">&quot;9月15日&quot;</span>)</span><br><span class="line">plt.bar(x_16,b_16,width=bar_width,label=<span class="string">&quot;9月16日&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图例</span></span><br><span class="line">plt.legend(prop=my_font)</span><br><span class="line"><span class="comment"># 设置x轴的刻度</span></span><br><span class="line">plt.xticks(x_15,a,fontproperties=my_font)</span><br><span class="line"><span class="comment"># 绘制表格</span></span><br><span class="line">plt.grid()</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment"># plt.savefig(&quot;./p2.png&quot;)</span></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>条形图的更多应用场景</p><ul><li>数量统计</li><li>频率统计（市场饱和度）</li></ul><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><p>组数：将数据进行分组，当数据在100个以内时，按数据多少常分5-12组<br>$$<br>组数&#x3D;\frac{极差}{组距}&#x3D;\frac{max{(a )-min(a)}}{binwidth}<br>$$<br>组距：指每个小组的两个端点的距离</p><p>示例代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=[<span class="number">102</span>,<span class="number">103</span>,<span class="number">113</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">126</span>,<span class="number">134</span>,<span class="number">95</span>,<span class="number">138</span>,<span class="number">117</span>,<span class="number">111</span>,<span class="number">78</span>,<span class="number">132</span>,<span class="number">124</span>,<span class="number">113</span>,<span class="number">150</span>,<span class="number">110</span>,<span class="number">117</span>,<span class="number">86</span>,<span class="number">95</span>,<span class="number">144</span>,<span class="number">105</span>,<span class="number">126</span>,<span class="number">110.128</span>,<span class="number">128</span>,<span class="number">115.99</span>,<span class="number">136</span>,</span><br><span class="line">   <span class="number">130</span>,<span class="number">126</span>,<span class="number">130</span>,<span class="number">123</span>,<span class="number">106</span>,<span class="number">112</span>,<span class="number">138</span>,<span class="number">123</span>,<span class="number">86</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">136</span>,<span class="number">123</span>,<span class="number">117</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">137</span>,<span class="number">123</span>,<span class="number">128</span>,<span class="number">125.104</span>,<span class="number">109</span>,<span class="number">134</span>,<span class="number">126</span>,<span class="number">116</span>,<span class="number">125</span>,</span><br><span class="line">   <span class="number">127</span>,<span class="number">105</span>,<span class="number">129</span>, <span class="number">116</span>,<span class="number">108</span>,<span class="number">132</span>,<span class="number">103</span>,<span class="number">136</span>,<span class="number">118</span>,<span class="number">102</span>,<span class="number">120</span>,<span class="number">114.105</span>,<span class="number">115</span>,<span class="number">132</span>,<span class="number">145</span>,<span class="number">119</span>,<span class="number">121</span>,<span class="number">112</span>,<span class="number">139</span>,<span class="number">125</span>,<span class="number">138</span>,<span class="number">109</span>,<span class="number">120</span>,<span class="number">107</span>,</span><br><span class="line">   <span class="number">132</span>,<span class="number">134</span>,<span class="number">156</span>,<span class="number">106</span>,<span class="number">117</span>,<span class="number">127</span>,<span class="number">139</span>,<span class="number">139</span>,<span class="number">119</span>,<span class="number">140</span>,<span class="number">83</span>,<span class="number">110</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">107</span>,<span class="number">143</span>,<span class="number">115</span>,<span class="number">136</span>,<span class="number">118</span>,<span class="number">139</span>,<span class="number">123</span>,<span class="number">112</span>,<span class="number">118</span>,<span class="number">125</span>,<span class="number">109</span>,<span class="number">119</span>,</span><br><span class="line">   <span class="number">133.112</span>,<span class="number">114.122</span>,<span class="number">109</span>,<span class="number">106</span>,<span class="number">123</span>,<span class="number">116</span>,<span class="number">131</span>,<span class="number">127</span>,<span class="number">115</span>, <span class="number">118</span>,<span class="number">112</span>,<span class="number">135</span>,<span class="number">115</span>,<span class="number">146</span>,<span class="number">137</span>,<span class="number">116</span>,<span class="number">103.144</span>,<span class="number">83</span>,<span class="number">123</span>,<span class="number">111</span>,<span class="number">110</span>, <span class="number">111</span>,</span><br><span class="line">   <span class="number">100</span>, <span class="number">154</span>,<span class="number">136</span>, <span class="number">100</span>, <span class="number">118</span>, <span class="number">119</span>,<span class="number">133</span>,<span class="number">134</span>,<span class="number">106</span>, <span class="number">129</span>,<span class="number">126</span>,<span class="number">110</span>,<span class="number">111</span>, <span class="number">109</span>, <span class="number">141</span>,<span class="number">120</span>,<span class="number">117</span>,<span class="number">106</span>,<span class="number">149</span>,<span class="number">122</span>,<span class="number">122</span>, <span class="number">110</span>, <span class="number">118</span>,</span><br><span class="line">   <span class="number">127</span>, <span class="number">121</span>, <span class="number">114</span>,<span class="number">125</span>,<span class="number">126</span>,<span class="number">114</span>, <span class="number">140</span>,<span class="number">103</span>,<span class="number">130</span>,<span class="number">141</span>,<span class="number">117</span>,<span class="number">106</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">114</span>,<span class="number">133</span>,<span class="number">137</span>,<span class="number">92</span>,<span class="number">121</span>,<span class="number">112</span>,<span class="number">146</span>,<span class="number">97</span>,<span class="number">137</span>,<span class="number">105</span>,<span class="number">98</span>,</span><br><span class="line">   <span class="number">117</span>,<span class="number">112</span>,<span class="number">81</span>,<span class="number">97</span>,<span class="number">139</span>, <span class="number">123</span>,<span class="number">134</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">110</span>, <span class="number">137</span>,<span class="number">137</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">117</span>, <span class="number">100</span>, <span class="number">111</span>,<span class="number">101</span>, <span class="number">110</span>,<span class="number">105</span>,<span class="number">129</span>,<span class="number">137</span>, <span class="number">112</span>,</span><br><span class="line">   <span class="number">120</span>, <span class="number">113</span>,<span class="number">133</span>,<span class="number">112</span>,<span class="number">83</span>, <span class="number">94</span>, <span class="number">146</span>,<span class="number">133</span>,<span class="number">101</span>,<span class="number">131</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">84</span>,<span class="number">137</span>,<span class="number">115</span>,<span class="number">122</span>,<span class="number">106</span>,<span class="number">144</span>,<span class="number">109</span>,<span class="number">123</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">133</span>,<span class="number">150</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算组数</span></span><br><span class="line">d = <span class="number">3</span>   <span class="comment"># 组距</span></span><br><span class="line">num_bins = (<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a)) // d <span class="comment"># 组数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">plt.hist(a,num_bins)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">min</span>(a),<span class="built_in">max</span>(a),d))</span><br><span class="line"></span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>查看频率分布直方图：<code>plt.hist(a,num_bins,density=True)</code></p><p>示例代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=[<span class="number">102</span>,<span class="number">103</span>,<span class="number">113</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">126</span>,<span class="number">134</span>,<span class="number">95</span>,<span class="number">138</span>,<span class="number">117</span>,<span class="number">111</span>,<span class="number">78</span>,<span class="number">132</span>,<span class="number">124</span>,<span class="number">113</span>,<span class="number">150</span>,<span class="number">110</span>,<span class="number">117</span>,<span class="number">86</span>,<span class="number">95</span>,<span class="number">144</span>,<span class="number">105</span>,<span class="number">126</span>,<span class="number">110.128</span>,<span class="number">128</span>,<span class="number">115.99</span>,<span class="number">136</span>,</span><br><span class="line">   <span class="number">130</span>,<span class="number">126</span>,<span class="number">130</span>,<span class="number">123</span>,<span class="number">106</span>,<span class="number">112</span>,<span class="number">138</span>,<span class="number">123</span>,<span class="number">86</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">136</span>,<span class="number">123</span>,<span class="number">117</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">137</span>,<span class="number">123</span>,<span class="number">128</span>,<span class="number">125.104</span>,<span class="number">109</span>,<span class="number">134</span>,<span class="number">126</span>,<span class="number">116</span>,<span class="number">125</span>,</span><br><span class="line">   <span class="number">127</span>,<span class="number">105</span>,<span class="number">129</span>, <span class="number">116</span>,<span class="number">108</span>,<span class="number">132</span>,<span class="number">103</span>,<span class="number">136</span>,<span class="number">118</span>,<span class="number">102</span>,<span class="number">120</span>,<span class="number">114.105</span>,<span class="number">115</span>,<span class="number">132</span>,<span class="number">145</span>,<span class="number">119</span>,<span class="number">121</span>,<span class="number">112</span>,<span class="number">139</span>,<span class="number">125</span>,<span class="number">138</span>,<span class="number">109</span>,<span class="number">120</span>,<span class="number">107</span>,</span><br><span class="line">   <span class="number">132</span>,<span class="number">134</span>,<span class="number">156</span>,<span class="number">106</span>,<span class="number">117</span>,<span class="number">127</span>,<span class="number">139</span>,<span class="number">139</span>,<span class="number">119</span>,<span class="number">140</span>,<span class="number">83</span>,<span class="number">110</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">107</span>,<span class="number">143</span>,<span class="number">115</span>,<span class="number">136</span>,<span class="number">118</span>,<span class="number">139</span>,<span class="number">123</span>,<span class="number">112</span>,<span class="number">118</span>,<span class="number">125</span>,<span class="number">109</span>,<span class="number">119</span>,</span><br><span class="line">   <span class="number">133.112</span>,<span class="number">114.122</span>,<span class="number">109</span>,<span class="number">106</span>,<span class="number">123</span>,<span class="number">116</span>,<span class="number">131</span>,<span class="number">127</span>,<span class="number">115</span>, <span class="number">118</span>,<span class="number">112</span>,<span class="number">135</span>,<span class="number">115</span>,<span class="number">146</span>,<span class="number">137</span>,<span class="number">116</span>,<span class="number">103.144</span>,<span class="number">83</span>,<span class="number">123</span>,<span class="number">111</span>,<span class="number">110</span>, <span class="number">111</span>,</span><br><span class="line">   <span class="number">100</span>, <span class="number">154</span>,<span class="number">136</span>, <span class="number">100</span>, <span class="number">118</span>, <span class="number">119</span>,<span class="number">133</span>,<span class="number">134</span>,<span class="number">106</span>, <span class="number">129</span>,<span class="number">126</span>,<span class="number">110</span>,<span class="number">111</span>, <span class="number">109</span>, <span class="number">141</span>,<span class="number">120</span>,<span class="number">117</span>,<span class="number">106</span>,<span class="number">149</span>,<span class="number">122</span>,<span class="number">122</span>, <span class="number">110</span>, <span class="number">118</span>,</span><br><span class="line">   <span class="number">127</span>, <span class="number">121</span>, <span class="number">114</span>,<span class="number">125</span>,<span class="number">126</span>,<span class="number">114</span>, <span class="number">140</span>,<span class="number">103</span>,<span class="number">130</span>,<span class="number">141</span>,<span class="number">117</span>,<span class="number">106</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">114</span>,<span class="number">133</span>,<span class="number">137</span>,<span class="number">92</span>,<span class="number">121</span>,<span class="number">112</span>,<span class="number">146</span>,<span class="number">97</span>,<span class="number">137</span>,<span class="number">105</span>,<span class="number">98</span>,</span><br><span class="line">   <span class="number">117</span>,<span class="number">112</span>,<span class="number">81</span>,<span class="number">97</span>,<span class="number">139</span>, <span class="number">123</span>,<span class="number">134</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">110</span>, <span class="number">137</span>,<span class="number">137</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">117</span>, <span class="number">100</span>, <span class="number">111</span>,<span class="number">101</span>, <span class="number">110</span>,<span class="number">105</span>,<span class="number">129</span>,<span class="number">137</span>, <span class="number">112</span>,</span><br><span class="line">   <span class="number">120</span>, <span class="number">113</span>,<span class="number">133</span>,<span class="number">112</span>,<span class="number">83</span>, <span class="number">94</span>, <span class="number">146</span>,<span class="number">133</span>,<span class="number">101</span>,<span class="number">131</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">84</span>,<span class="number">137</span>,<span class="number">115</span>,<span class="number">122</span>,<span class="number">106</span>,<span class="number">144</span>,<span class="number">109</span>,<span class="number">123</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">111</span>,<span class="number">133</span>,<span class="number">150</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算组数</span></span><br><span class="line">d = <span class="number">3</span>   <span class="comment"># 组距</span></span><br><span class="line">num_bins = (<span class="built_in">max</span>(a) - <span class="built_in">min</span>(a)) // d <span class="comment"># 组数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">plt.hist(a,num_bins,density=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">min</span>(a),<span class="built_in">max</span>(a),d))</span><br><span class="line"></span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>示例代码3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line">interval = [<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>,<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>,<span class="number">60</span>,<span class="number">90</span>]</span><br><span class="line">width = [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">30</span>,<span class="number">60</span>]</span><br><span class="line">quantity = [<span class="number">836</span>,<span class="number">2765</span>,<span class="number">3465</span>,<span class="number">4356</span>,<span class="number">5432</span>,<span class="number">3546</span>,<span class="number">6476</span>,<span class="number">6543</span>,<span class="number">5352</span>,<span class="number">2435</span>,<span class="number">3452</span>,<span class="number">1243</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line">plt.bar(<span class="built_in">range</span>(<span class="built_in">len</span>(quantity)),quantity,width=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴的刻度</span></span><br><span class="line">_x = [i-<span class="number">0.5</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>)]</span><br><span class="line">_xtick_labels = interval + [<span class="number">150</span>]</span><br><span class="line">plt.xticks(_x,_xtick_labels)</span><br><span class="line"></span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>直方图更多的使用场景</p><ul><li>用户的年龄分布状态</li><li>一段时间内用户点击次数的分布状态</li><li>用户活跃时间的分布状态</li></ul><p><strong>更多的绘图工具</strong></p><ul><li>plotly：可视化工具中的github，相比于matplotlib更加简单，图形更加漂亮，同时兼容matplotlib和pandas，使用方法照着文档写即可</li></ul><p><a href="https://plot.ly/python/">文档地址</a></p><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><p><code>numpy</code>：一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、多维数组上执行数值运算</p><p>numpy创建数组（矩阵），以及numpy中数据的类型</p><p>示例代码1如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> serial.tools.miniterm <span class="keyword">import</span> Out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用numpy生成数组，得到ndarray数据类型</span></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">b = np.array(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">c = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br><span class="line"><span class="built_in">print</span>(c.dtype)  <span class="comment"># 数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># numpy中的数据类型</span></span><br><span class="line"><span class="comment"># d = np.array(range(1,4),dtype=float)</span></span><br><span class="line">d = np.array(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>),dtype=<span class="string">&quot;i1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(d.dtype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># numpy中的bool数据类型</span></span><br><span class="line">e = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],dtype=<span class="built_in">bool</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(e.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整数据类型</span></span><br><span class="line">f = e.astype(<span class="string">&quot;int8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="built_in">print</span>(f.dtype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># numpy中的小数</span></span><br><span class="line">g = np.array([random.random() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="built_in">print</span>(g.dtype)</span><br><span class="line"></span><br><span class="line">h = np.<span class="built_in">round</span>(g,<span class="number">2</span>)   <span class="comment"># 保留两位小数</span></span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="built_in">print</span>(h.dtype)</span><br></pre></td></tr></table></figure><p>数组的形状(一维、二维、三维)，<code>reshape()</code>中的参数个数表示几维数组，示例代码2如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">12</span>)  <span class="comment"># 一维数组</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t1.shape)</span><br><span class="line"></span><br><span class="line">t2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])    <span class="comment"># 二维数组</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(t2.shape)</span><br><span class="line"></span><br><span class="line">t3 = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]])    <span class="comment"># 三维数组 立体矩阵</span></span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="built_in">print</span>(t3.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数组形状</span></span><br><span class="line">t4 = np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(t4)</span><br><span class="line"><span class="built_in">print</span>(t4.shape)</span><br><span class="line">t4 = t4.reshape((<span class="number">3</span>,<span class="number">4</span>))  <span class="comment"># 参数(3,4)表示传的是一个元组  reshape函数是将结果作为返回值返回，不改变原数组</span></span><br><span class="line"><span class="built_in">print</span>(t4)</span><br><span class="line"><span class="built_in">print</span>(t4.shape)</span><br><span class="line"></span><br><span class="line">t5 = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 块数 行数 列数</span></span><br><span class="line"><span class="built_in">print</span>(t5)</span><br><span class="line"><span class="built_in">print</span>(t5.shape)</span><br></pre></td></tr></table></figure><p>数组的计算(数组与数之间的运算，数组与数组之间的运算)</p><ul><li>数组与数之间的运算满足<code>numpy</code>的<strong>广播机制</strong>，即进行运算时，加减乘除的值被广播到所有的元素上</li><li>数组与数组进行运算时，如果维度不匹配则会报错，但是有些情况下是可以进行运算的</li></ul><blockquote><p>广播原则：如果两个数组的后缀维度（trailing dimension，即从末尾开始算起的维度）的轴长度相符或其中一方的长度为1，则认为他们是广播兼容的。广播会在缺失和（或）长度为1的维度上进行。</p></blockquote><p>示例代码3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t5 = np.arange(<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment"># 数组和数进行计算 数组中的每个元素都与数进行操作</span></span><br><span class="line"><span class="comment"># t5 = t5 + 2</span></span><br><span class="line"><span class="comment"># t5 = t5 * 2</span></span><br><span class="line"><span class="comment"># t5 = t5 / 2</span></span><br><span class="line"><span class="comment"># t5 = t5 / 0</span></span><br><span class="line"><span class="built_in">print</span>(t5)</span><br><span class="line"><span class="built_in">print</span>(t5.shape)</span><br><span class="line">t6 = np.arange(<span class="number">100</span>,<span class="number">124</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(t6)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t6 = t6 + t5 <span class="comment"># 对应位进行计算</span></span><br><span class="line"><span class="built_in">print</span>(t6)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t7 = np.arange(<span class="number">6</span>).reshape((<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(t7)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t7 + t6)</span><br></pre></td></tr></table></figure><p><strong>轴</strong>在<code>numpy</code>中可以理解为<strong>方向</strong>，使用数字0、1、2……表示，对于一个一维数组，只有一个0轴，对于二维数组（shape(2,2)），有0轴和1轴，对于三维数组（shape(2,2,3)），有0，1，2轴。</p><h5 id="numpy读取数据"><a href="#numpy读取数据" class="headerlink" title="numpy读取数据"></a><code>numpy</code>读取数据</h5><blockquote><p>CSV：<code>Comma-Separated Value</code>，逗号分隔值文件</p><p>显示：表格状态</p><p>源文件：换行和逗号分隔行列的格式化文本，每一行的数据表示一条记录</p><p>由于CSV便于展示，读取和写入，所以很多地方采用CSV的格式存储和传输中小型的数据。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.loadtxt(frame,dtype=np.<span class="built_in">float</span>,delimiter=<span class="literal">None</span>,skiprows=<span class="number">0</span>,usecols=<span class="literal">None</span>,unpack=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>转置的三种方法</p><blockquote><ol><li>t1.transpose()      转置</li><li>t1.T            转置</li><li>t1.swapaxes()     交换轴</li></ol></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>frame</td><td>文件、字符串或产生器，可以是.gz或bz2压缩文件</td></tr><tr><td>dtype</td><td>数据类型，可选，CSV的字符串以什么数据类型读入数组中，默认np.float</td></tr><tr><td>delimiter</td><td>分隔字符串，默认是任何空格，改为 逗号</td></tr><tr><td>skiprows</td><td>跳过前x行，一般跳过开头第一行表头</td></tr><tr><td>usecols</td><td>读取指定的列，索引，元组类型</td></tr><tr><td>unpack</td><td>如果为True，读入属性将分别写入不同数组变量（即会实现矩阵转置效果），False读入数据只写入一个数组变量，默认为False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">test_path = <span class="string">&quot;./test.csv&quot;</span></span><br><span class="line">t1 = np.loadtxt(test_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">int</span>)</span><br><span class="line">t2 = np.loadtxt(test_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">int</span>,unpack=<span class="literal">True</span>) <span class="comment"># unpack=True实现矩阵转置效果</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t3 = np.arange(<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># t4 = np.transpose(t3)   # 转置</span></span><br><span class="line"><span class="comment"># t4 = t3.T # 转置</span></span><br><span class="line">t4 = t3.swapaxes(<span class="number">0</span>,<span class="number">1</span>)   <span class="comment"># 交换轴（转置）</span></span><br><span class="line"><span class="built_in">print</span>(t4)</span><br></pre></td></tr></table></figure><h5 id="numpy索引和切片以及数值修改"><a href="#numpy索引和切片以及数值修改" class="headerlink" title="numpy索引和切片以及数值修改"></a><code>numpy</code>索引和切片以及数值修改</h5><p>具体操作和python列表中的操作一样，索引以及切片示例代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">test_path = <span class="string">&quot;./test.csv&quot;</span></span><br><span class="line">t1 = np.loadtxt(test_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">int</span>,unpack=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取行</span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">1</span>])    <span class="comment"># 表示取第一行数据，索引是从0开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 取连续多行</span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">2</span>:])   <span class="comment"># 表示取第二行以及第二行之后的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 取不连续多行</span></span><br><span class="line"><span class="built_in">print</span>(t1[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]])  <span class="comment"># 相当于传入了一个元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 取列</span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">1</span>,:])  <span class="comment"># 表示取1行所有列元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t1[:,<span class="number">1</span>])  <span class="comment"># 表示取每一行的第1列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t1[[<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>],<span class="number">1</span>])   <span class="comment"># 表示取2，0，3行中的第一列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 取连续的多列</span></span><br><span class="line"><span class="built_in">print</span>(t1[:,<span class="number">0</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 取不连续的多列</span></span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">3</span>,[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t1[<span class="number">2</span>:<span class="number">4</span>,[<span class="number">0</span>,<span class="number">1</span>]])    <span class="comment"># 取第二行到第四行（不包括第四行，左闭右开）中第0和第1列的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 取多个不相邻的点</span></span><br><span class="line"><span class="built_in">print</span>(t1[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]])  <span class="comment"># 选取的是(0,1),(2,0),(3,1)的点</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>numpy布尔索引和数值修改，示例代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">test_path = <span class="string">&quot;./test.csv&quot;</span></span><br><span class="line">t1 = np.loadtxt(test_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">int</span>,unpack=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t1&lt;<span class="number">10</span>)    <span class="comment"># 布尔索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t1[t1&lt;<span class="number">10</span>] = <span class="number">3</span>   <span class="comment"># 数值修改</span></span><br><span class="line">t1[t1&gt;<span class="number">20</span>] = <span class="number">50</span>  <span class="comment"># 数值修改</span></span><br><span class="line"><span class="comment"># numpy中的clip（裁剪）</span></span><br><span class="line"><span class="built_in">print</span>(t1.clip(<span class="number">10</span>,<span class="number">18</span>))   <span class="comment"># 把小于10的赋值为10，把大于18的赋值为18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="comment"># numpy中的三元运算符</span></span><br><span class="line"><span class="comment"># t1 = np.where(t1&lt;10,0,10)   # t1中小于10的元素赋值为0，大于10的元素赋值为10</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure><h4 id="numpy中的nan和常用方法"><a href="#numpy中的nan和常用方法" class="headerlink" title="numpy中的nan和常用方法"></a><code>numpy</code>中的<code>nan</code>和常用方法</h4><ul><li>数组的拼接</li><li>数组的行列交换</li></ul><p>示例代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">0</span>,<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">6</span>).astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t2 = np.arange(<span class="number">13</span>,<span class="number">25</span>).reshape(<span class="number">2</span>,<span class="number">6</span>).astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的拼接</span></span><br><span class="line"><span class="built_in">print</span>(np.vstack((t1,t2)))   <span class="comment"># 竖直拼接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(np.hstack((t1,t2)))   <span class="comment"># 横向拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的行列交换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t1[[<span class="number">0</span>,<span class="number">1</span>],:] = t1[[<span class="number">1</span>,<span class="number">0</span>],:]   <span class="comment"># 交换第0行和第1行的所有元素</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t2[:,[<span class="number">0</span>,<span class="number">2</span>]] = t2[:,[<span class="number">2</span>,<span class="number">0</span>]]   <span class="comment"># 交换第0列和第2列的所有元素</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>示例代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data1_path = <span class="string">&quot;./test.csv&quot;</span></span><br><span class="line">data2_path = <span class="string">&quot;./test2.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">data1 = np.loadtxt(data1_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">int</span>)</span><br><span class="line">data2 = np.loadtxt(data2_path, delimiter=<span class="string">&#x27;,&#x27;</span>,dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加信息</span></span><br><span class="line"><span class="comment"># 构造全为0的数据</span></span><br><span class="line">zeros_data = np.zeros((data1.shape[<span class="number">0</span>],<span class="number">1</span>)).astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="comment"># 构造全为1的数据</span></span><br><span class="line">ones_data = np.ones((<span class="number">1</span>,data2.shape[<span class="number">1</span>])).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向拼接</span></span><br><span class="line">t1 = np.hstack((zeros_data,data1))</span><br><span class="line">tt1 = np.vstack((ones_data,data1))</span><br><span class="line">t2 = np.hstack((zeros_data,data2))</span><br><span class="line">tt2 = np.vstack((ones_data,data2))</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(tt1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(tt2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>更多的一些常用方法：</p><ul><li>获取最最大值和最小值的位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.argmax(t,axis=<span class="number">0</span>)</span><br><span class="line">np.argmin(t,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>创建一个全0的数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros((<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><ul><li>创建一个全1的数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><ul><li>创建一个对角线全为1的正方形数组（矩阵）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.eye(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="numpy生成随机数"><a href="#numpy生成随机数" class="headerlink" title="numpy生成随机数"></a><code>numpy</code>生成随机数</h4><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>.rand(d0,d1,……dn)</td><td>创建d0-dn维度的均匀分布的随机数组，浮点数，范围是0-1</td></tr><tr><td>.randn(d0,d1,……,dn)</td><td>创建d0-dn维度的标准正态分布的随机数组，浮点数，平均数为0，标准差为1</td></tr><tr><td>.randint(low,high,(shape))</td><td>从给定的上下限范围选取随机数整数，范围是[low,high)，形状是shape</td></tr><tr><td>.uniform(low,high,(size))</td><td>产生具有均匀分布的数组，low起始值，high结束值，size是形状</td></tr><tr><td>.normal(loc,scale,(size))</td><td>从指定正态分布中随机抽取样本，分布中心是loc（概率分布的均值），标准差是scale，形状是size</td></tr><tr><td>.seed(s)</td><td>随机数种子，s是给定的种子值，因为计算机生成的是伪随机数，所以通过设定相同的随机数种子，可以每次生成相同的随机数</td></tr></tbody></table><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">t1 = np.random.randint(<span class="number">2</span>,<span class="number">10</span>,(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;numpy的注意点copy和view&#x3D;&#x3D;</p><blockquote><ol><li>a&#x3D;b 完全不复制，a和b相互影响</li><li>a&#x3D;b[:] 视图的操作，一种切片，会创建新的对象a，但是a的数据完全由b保管，他们两个的数据变化是一致的</li><li>a&#x3D;b.copy() 复制，a和b相互不影响</li></ol></blockquote><h4 id="numpy中的nan和inf"><a href="#numpy中的nan和inf" class="headerlink" title="numpy中的nan和inf"></a><code>numpy</code>中的nan和inf</h4><blockquote><p>nan：not a number表示不是一个数字</p><p>当我们读取本地的文件为float时，如果有缺失，就会出现nan；当做了一个不合适的计算的时候（比如无穷大(inf)减去无穷大）</p><p>inf(-inf,inf)：inf表示正无穷，-inf表示负无穷</p><p>当一个数字除以0，（python中直接会报错，numpy中是一个inf或者-inf）</p><p>nan和任何值计算结果都为nan</p><p>isnan()用来检测是否为nan值</p></blockquote><p>示例代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t1 = np.nan</span><br><span class="line">t2 = np.nan</span><br><span class="line"><span class="built_in">print</span>(t1 == t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(t1 != t2)</span><br><span class="line">t3 = np.inf</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))</span><br></pre></td></tr></table></figure><h4 id="numpy中常用函数统计"><a href="#numpy中常用函数统计" class="headerlink" title="numpy中常用函数统计"></a><code>numpy</code>中常用函数统计</h4><blockquote><p>求和：t.sum(axis&#x3D;None)</p><p>均值：t.mean(a,axis&#x3D;None)受离群点的影响较大</p><p>中值：np.median(t,axis&#x3D;None)</p><p>最大值：t.max(axis&#x3D;None)</p><p>最小值：t.min(axis&#x3D;None)</p><p>极值：np.ptp(t,axis&#x3D;None)即最大值和最小值的差值</p><p>标准差：t.std(axis&#x3D;None)</p><p>&#x3D;&#x3D;默认返回多维数组的全部的统计结果,如果指定axis则返回一个当前轴上的结果&#x3D;&#x3D;</p></blockquote><p>示例代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t3 = np.arange(<span class="number">0</span>,<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">t4 = np.arange(<span class="number">0</span>,<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(t4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(t3,axis=<span class="number">0</span>))    <span class="comment"># 求和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(t3,axis=<span class="number">1</span>))    <span class="comment"># 求和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.mean(axis=<span class="number">0</span>))  <span class="comment"># 均值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.<span class="built_in">max</span>(axis=<span class="number">0</span>))   <span class="comment"># 最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.<span class="built_in">min</span>(axis=<span class="number">0</span>))   <span class="comment"># 最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.ptp(axis=<span class="number">0</span>))   <span class="comment"># 极值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.std())     <span class="comment"># b标准差</span></span><br></pre></td></tr></table></figure><p>示例代码3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_array</span>(<span class="params">t1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t1.shape[<span class="number">1</span>]):</span><br><span class="line">        temp_col = t1[:,i]  <span class="comment"># 当前的一列</span></span><br><span class="line">        nan_num = np.count_nonzero(temp_col != temp_col)</span><br><span class="line">        <span class="keyword">if</span> nan_num != <span class="number">0</span>:    <span class="comment"># 不为0说明当前这列有nan</span></span><br><span class="line">            temp_not_nan_col = temp_col[temp_col == temp_col] <span class="comment"># 当前这一列不为nan的array</span></span><br><span class="line">            <span class="comment"># 选中当前为nan的位置，把值赋值为不为nan的均值</span></span><br><span class="line">            temp_col[np.isnan(temp_col)] = temp_not_nan_col.mean()</span><br><span class="line">    <span class="keyword">return</span> t1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = np.arange(<span class="number">0</span>, <span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">    t1[<span class="number">1</span>, :<span class="number">2</span>] = np.nan</span><br><span class="line">    <span class="built_in">print</span>(t1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    t1 = fill_array(t1)</span><br><span class="line">    <span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb</title>
      <link href="/2024/03/12/Javaweb/"/>
      <url>/2024/03/12/Javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p><strong>vue</strong>是一套前端框架，免除原生JavaScript中的DOM操作，简化书写。</p><p>基于MVVM(Model-View-ViewModel)思想，实现数据的<mark>双向绑定</mark>，将编程的关注点放在数据上</p><p>框架：是一个半成品软件，是一套课重用的、通用的、软件基础代码模型，基于框架进行开发，更加快捷、更加高效。</p><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据 </li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展 示到视图（View）上</li></ul><p><a href="https://v2.cn.vuejs.org/">官网</a></p><p>Vue快速入门</p><ul><li>新建HTML页面，引入Vue.js文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //vue2框架</span><br></pre></td></tr></table></figure><ul><li>在JS代码区域，创建Vue核心对象，定义数据模型</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写视图</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>插值表达式</strong></p><p>形式：</p><p>内容：可以是<code>变量</code>、<code>三元运算符</code>、<code>函数调用</code>、<code>算术运算</code></p><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><p>指令：HTML标签上带有 v- 前缀的特殊属性，不同指令具有不同的含义。</p><p>常用指令如下：</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性，如设置href，css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td></tr><tr><td>v-else-if</td><td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td></tr><tr><td>v-else</td><td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><ul><li>v-bind</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-model</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><mark>注意：通过v-bind或者v-model绑定的变量，必须在数据模型中声明</mark></p><ul><li>v-on</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;;</span><br><span class="line">        data&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handle:function()&#123;</span><br><span class="line">        alert(&#x27;我被点击了&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>v-if</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄&#123;&#123;age&#125;&#125;,经判定为：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt;35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>老年人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-show</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">年龄&#123;&#123;age&#125;&#125;,经判定为：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-for</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;addr in addrs&quot;</span>&gt;</span>&#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(addr,index) in addrs&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125; : &#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">...</span><br><span class="line">addrs: [&#x27;北京&#x27;,&#x27;上海&#x27;,&#x27;广州&#x27;,&#x27;深圳&#x27;,&#x27;成都&#x27;,&#x27;杭州&#x27;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>生命周期：指一个对象从创建到销毁的整个过程</li><li>生命周期的八个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法（钩子）</li></ul><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td><strong>mounted</strong></td><td><strong>挂载完成</strong></td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>boforeDestory</td><td>销毁前</td></tr><tr><td>destoryed</td><td>销毁后</td></tr></tbody></table><p>![1](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (1).png))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">       data: &#123;</span><br><span class="line">           </span><br><span class="line">       &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            console.log(&quot;Vue挂载完毕，发送请求获取数据&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>mounted：装载完成，Vue初始化完成，HTML页面渲染成功。（发送请求到服务端，加载数据）</li></ul><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><ul><li>概念：Asynchronous JavaScript And XML ，异步的JavaScript和XML</li><li>作用<ul><li>数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据</li><li>异步交互：可以在<mark>不重新加载整个页面</mark>的情况下，与服务器交换数据并<mark>更新部分网页</mark>的技术，如：搜索联想、用户是否可用的校验等等</li></ul></li></ul><h5 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h5><ul><li>同步</li></ul><p>同步请求发送过程如下图所示：</p><p>![2](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (2).png)</p><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只 能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。</p><ul><li>异步</li></ul><p>异步请求发送过程如下图所示：</p><p>![3](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (3).png)</p><p>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</p><h5 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h5><p>1.准备数据地址：<a href="https://yapi.smart-xwork.cn/mock/169327/emp/list">https://yapi.smart-xwork.cn/mock/169327/emp/list</a></p><p>2.创建XMLHttpRequest对象：用于和服务器交换数据</p><p>3.向服务器发送请求</p><p>4.获取服务器响应数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建XMLHttpRequest</span></span><br><span class="line"><span class="keyword">var</span> xmlHttpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//2. 发送异步请求</span></span><br><span class="line">xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;https://mock.apifox.cn/m1/3128855-0-default/emp/list&#x27;</span>);</span><br><span class="line">xmlHttpRequest.<span class="title function_">send</span>();<span class="comment">//发送请求</span></span><br><span class="line"><span class="comment">//3. 获取服务响应数据</span></span><br><span class="line">xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//此处判断 4表示浏览器已经完全接受到Ajax请求得到的响应， 200表示这是</span></span><br><span class="line">一个正确的<span class="title class_">Http</span>请求，没有错误</span><br><span class="line"><span class="keyword">if</span>(xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlHttpRequest.<span class="property">status</span> ==</span><br><span class="line"><span class="number">200</span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>).<span class="property">innerHTML</span> =</span><br><span class="line">xmlHttpRequest.<span class="property">responseText</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h5><p>1.引入Axios的js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用Axios发送请求，并获取响应结果</p><ul><li>get请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">method:&quot;get&quot;,</span><br><span class="line">url:&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?</span><br><span class="line">username=zhangsan&quot;</span><br><span class="line">&#125;).then(function (resp)&#123;</span><br><span class="line">alert(resp.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>post请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">method:&quot;post&quot;,</span><br><span class="line">url:&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;,</span><br><span class="line">data:&quot;username=zhangsan&quot;</span><br><span class="line">&#125;).then(function (resp)&#123;</span><br><span class="line">alert(resp.data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p><ul><li><p>method属性：用来设置请求方式的。取值为 get 或者 post。</p></li><li><p>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</p></li><li><p>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</p></li><li><p>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 回调函数，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数 是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</p></li></ul><p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>axios.get(url[，config])</td><td>发送get请求</td></tr><tr><td>axios.delete(url[，config])</td><td>发送delete请求</td></tr><tr><td>axios.post(url[，data[，config]])</td><td>发送post请求</td></tr><tr><td>axios.put(url[，data[，config]])</td><td>发送put请求</td></tr></tbody></table><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p>具体开发一个功能的步骤：</p><ol><li>需求分析：首先我们需要阅读需求文档，分析需求，理解需求。</li><li>接口定义：查询接口文档中关于需求的接口的定义，包括地址，参数，响应数据类型等等 </li><li>前后台并行开发：各自按照接口文档进行开发，实现需求 </li><li>测试：前后台开发完了，各自按照接口文档进行测试</li><li>前后段联调测试：前段工程请求后端工程，测试功能</li></ol><h5 id="Vue项目"><a href="#Vue项目" class="headerlink" title="Vue项目"></a>Vue项目</h5><p>创建</p><p>命令行：vue create vue-project01</p><p>图形化界面：vue ui</p><p>![4](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (4).png)</p><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><p>Element：是饿了么团队研发的，一套为开发者、设计者和产品经理准备的基于Vue2.0的桌面端组件库</p><p>组件：组成网页的部件，例如 超链接、按钮、图片、表格、表单、分页条等</p><ul><li>安装ElementUI组件库(在当前工程的目录下)，在命令行执行指令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element -ui@2.15.3</span><br></pre></td></tr></table></figure><ul><li>引入ElementUI组件库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><ul><li>访问官网，复制组件代码，调整</li></ul><p>shift+alt+f 代码对齐格式</p><p>Vue项目中使用Axios:</p><ol><li>在项目目录下安装axios：npm install axios；</li><li>需要使用axios时，导入axios：import axios from ‘axios’；</li></ol><h4 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h4><p>前端路由：URL中的hash(#号)与组件之间的对应关系。</p><p>Vue Router</p><p>Vue Router是Vue的官方路由</p><p>组成：</p><ul><li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li><router-link>：请求链接组件，浏览器会解析成<a></li><li><router-view>：动态视图组件，用来渲染展示与路由路径对应的组件</li></ul><p>其工作原理如下图所示：</p><p>![5](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (5).png)</p><ol><li>首先VueRouter根据我们配置的url的hash片段和路由的组件关系去维护一张路由表;</li><li>然后我们页面提供一个组件,用户点击，发出路由请求; </li><li>接着我们的VueRouter根据路由请求，在路由表中找到对应的vue组件；</li><li>最后VueRouter会切换中的组件，从而进行视图的更新</li></ol><ul><li>安装(创建Vue项目时已选择)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3.5.1</span><br></pre></td></tr></table></figure><ul><li>定义路由</li></ul><h4 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h4><ul><li>打包</li></ul><p>![6](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (6).png)</p><ul><li>部署</li></ul><p>nginx: Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。 其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用。 niginx在windows中的安装是比较方便的，直接解压即可。如下图所示就是nginx的解压目录以及目录结构说明：</p><p>![7](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (7).png)</p><p>将我们之前打包的前端工程dist目录下得内容拷贝到nginx的html目录下</p><p>然后我们通过双击nginx下得nginx.exe文件来启动nginx，nginx服务器的端口号是80，所以启动成功之后，我们浏览器直接访问<a href="http://localhost/">http://localhost:80</a> 即 可，其中80端口可以省略，其到此，我们的前端工程发布成功。 PS: 如果80端口被占用，我们需要通过conf&#x2F;nginx.conf配置文件来修改端口号。如下图所示：</p><p>![8](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (8).png)</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>Maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具</p><p>作用：</p><ol><li>依赖管理：方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li><li>统一项目结构：提供标准、统一的项目结构</li><li>项目构建：标准跨平台（Linux、Windows、MacOS）的自动化项目构建方式</li></ol><p>仓库：用于存储资源，管理各种jar包</p><ul><li>本地仓库：自己计算机上的一个目录</li><li>中央仓库：由Maven团队维护的全球唯一性的仓库，仓库地址为：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库（私服）：一般由公司团队搭建的私有仓库</li></ul><p>安装步骤：</p><ol><li>解压apache-maven-3.6.1-bin.zip</li><li>配置本地仓库：修改conf&#x2F;settings.xml中的<localRepository>为一个指定目录</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\delvelop\apache-maven-3.6.1\mvn_repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置阿里云私服：修改conf&#x2F;settings.xml中的<mirrors>标签，为其添加如下子标签：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>配置环境变量：MAVEN_HOME为maven的解压缩目录，并将其bin目录加入PATH环境变量</li></ol><p><strong>配置Maven环境(当前工程)</strong></p><ul><li>选择IDEA中 File –&gt; Settings –&gt; Build，Execution，Deployment –&gt; Build Tools –&gt; Maven</li><li>设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</li></ul><p><strong>配置Maven环境(全局)</strong></p><ul><li><p>直接在创建项目栏按上述操作即可，不必打开项目</p></li><li><p>选择IDEA中 File –&gt; Settings –&gt; Build，Execution，Deployment –&gt; Build Tools –&gt; Maven</p></li><li><p>设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p></li></ul><p><strong>IDEA创建Maven项目</strong></p><ol><li>创建模板，选择Maven，点击Next</li><li>填写模块名称，坐标信息，点击finish，创建完成</li><li>编写HelloWorld，并运行</li></ol><p><strong>Maven坐标</strong></p><ul><li>Maven中的坐标是<mark>资源的唯一标识，通过该坐标可以唯一定位资源位置</mark></li><li>使用坐标来定义项目或者引入项目中需要的依赖</li></ul><p>Maven坐标主要组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.ithema）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如：order-service，goods-services）</li><li>version：定义当前项目版本号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ithema<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>导入Maven项目</strong></p><p>方式一：打开IDEA，选择右侧Maven面板，点击+号，选中对应项目的pom.xml文件，双击即可</p><p>方式二：File  &#x3D;&gt;  Project Structure  &#x3D;&gt;  Modules  &#x3D;&gt;  +  &#x3D;&gt;  Import Module</p><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><ul><li>依赖：指当前项目运行所需的jar包，一个项目可以引用多个依赖</li><li>配置：<ol><li>在pom.xml中编写<dependencies>标签</li><li>在<dependencies>标签中使用<dependency>引入坐标</li><li>定义坐标的groupId、artifacId、version</li><li>点击刷新按钮，引入最新加入的坐标</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>如果引入的依赖，在本地仓库不存在，将会连接远程仓库&#x2F;中央仓库，然后下载依赖。（这个过程会比较耗时，需要耐心等待）</li><li>如果不知道依赖的坐标信息，可以到<a href="https://mvnrepository.com/%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/中搜索</a></li></ul><p><strong>依赖传递</strong></p><p>依赖具有传递性</p><ul><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li><li><p>排除依赖：排除依赖指主动断开依赖的资源，被排除的资源无需指定版本，通过添加<exclusion>标签来排除依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt; !-- 排除依赖 --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p><strong>依赖范围</strong></p><p>依赖的jar包，默认情况下，可以在任何地方使用，可以通过<code>&lt;scope&gt;...&lt;/scope&gt;</code>设置其作用范围。</p><p>作用范围：</p><ul><li>主程序范围有效。（main文件夹范围内）</li><li>测试程序范围有效。（test文件夹范围内）</li><li>是否参与打包运行。（package指令范围内）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>scope值</th><th>主程序</th><th>测试程序</th><th>打包（运行）</th><th>范例</th></tr></thead><tbody><tr><td>compile（默认值）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><p><strong>生命周期</strong></p><p>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一</p><p>Maven中有3套<mark>相互独立</mark>的生命周期：</p><ul><li>clean：清理工作</li><li>default：核心工作，如：编译、测试、打包、安装、部署等</li><li>site：生成报告、发布站点等</li></ul><p>每套生命周期包含一些阶段（phase），阶段是有顺序的，后面的阶段依赖于前面的阶段。</p><p>![9](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (9).png)</p><p>我们看到这三套生命周期，里面有很多很多的阶段，这么多生命周期阶段，其实常用的并不多，主要关注以下几个：</p><ul><li>clean：移除上一次构建生成的文件 </li><li>compile：编译项目源代码 </li><li>test：使用合适的单元测试框架运行测试(junit) </li><li>package：将编译后的文件打包，如：jar、war等 </li><li>install：安装项目到本地仓库</li></ul><p><mark>注意事项：在同一套生命周期中，当运行后面的阶段时，前面的阶段也会运行。</mark></p><p>执行指定生命周期的两种方式：</p><ul><li>在idea中，右侧的maven工具栏，选中对应的生命周期，双击执行</li><li>在命令行执行时，通过命令执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn compile</span><br><span class="line">mvn package</span><br><span class="line">mvn test</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Web入门"><a href="#Web入门" class="headerlink" title="Web入门"></a>Web入门</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p>官网：<a>spring.io</a></p><p>Spring发展到今天已经形成了一种生态开发生态圈，Sring提供了若干个子项目，每个项目用于完成特定的功能</p><p>SpringBootWeb快速入门</p><p>需求：使用SpringBoot开发一个web应用，浏览器发起请求&#x2F;hello后，给浏览器返回字符串”Hello World ~”</p><p>步骤：</p><ol><li>创建springboot工程，并勾选web开发相关依赖</li><li>定义HelloController类，添加方法Hello，并添加注解</li><li>运行测试</li></ol><p>创建请求处理类HelloController，添加请求处理方法Hello，并添加注解</p><p>![10](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (10).png)</p><p>运行启动类，打开浏览器测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/hello</span><br></pre></td></tr></table></figure><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>概念：Hyper Text Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则</p><p>特点：</p><ul><li>基于TCP协议：面向连接、安全</li><li>基于请求-响应模型的：一次请求对应一次响应</li><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力，每次请求-响应都是独立的<ul><li>优点：速度快</li><li>缺点：多次请求间不能共享数据</li></ul></li></ul><h5 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h5><p><strong>请求数据格式</strong></p><p>请求行：请求数据第一行（请求方式、资源路径、协议）</p><p>请求头：第二行开始，格式：key - value</p><table><thead><tr><th>Host</th><th>请求的主机名</th></tr></thead><tbody><tr><td>User-Agent</td><td>浏览器版本，例如Chrome浏览器的标示类似Mozilla&#x2F;5.0…Chrome&#x2F;79，IE浏览器的标示类似Mozilla&#x2F;5.0(Windows NT …) like Gecko（<strong>考虑浏览器兼容问题</strong>）</td></tr><tr><td>Accept</td><td>表示浏览器能接收的资源类型，如text&#x2F;*，image&#x2F;<em>或者</em>&#x2F;*表示所有</td></tr><tr><td>Accept-Language</td><td>表示浏览器偏好的语言，服务器可以根据此返回不同语言的网页</td></tr><tr><td>Accept-Encoding</td><td>表示浏览器可以支持的压缩类型，例如gzip、deflate等</td></tr><tr><td>Content-Type</td><td>请求主体的数据类型</td></tr><tr><td>Content-Length</td><td>请求主体的大小（单位：字节）</td></tr></tbody></table><p>请求体：POST请求，存放请求参数</p><p><strong>请求方式-GET</strong>：请求参数在请求行中，没有请求体，如&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1。GET请求是有大小限制的</p><p><strong>请求方式-POST</strong>：请求参数在请求体中，POST请求是没有大小限制的</p><h5 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h5><p>响应行：响应数据第一行（协议、状态码、描述）</p><p>响应头：从第二行开始，格式为 key : value</p><p>响应体：最后一部分，存放响应数据</p><p><strong>HTTP响应格式</strong></p><table><thead><tr><th>1xx</th><th>响应中-临时状态码，表示请求已经接收，告诉客户端应该继续请求或者如果它已经完成则忽略它</th></tr></thead><tbody><tr><td>2xx</td><td>成功-表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td>重定向-重定向到其他地方：让客户端再发起一次请求以完成整个处理</td></tr><tr><td>4xx</td><td>客户端错误-处理发生错误，责任在客户端，如：请求了不存在的资源、客户端未授权、禁止访问等</td></tr><tr><td>5xx</td><td>服务器错误-处理发生错误，责任在服务端，如：程序抛出异常等</td></tr></tbody></table><table><thead><tr><th>Contenet-Type</th><th>表示该响应内容的类型，例如text&#x2F;html，application&#x2F;json</th></tr></thead><tbody><tr><td>Content-Length</td><td>表示该响应内容的长度（即字节）</td></tr><tr><td>Content-Encoding</td><td>表示该响应压缩算法，例如gzip</td></tr><tr><td>Cache-Control</td><td>提示客户端如何缓存，例如max-age&#x3D;300表示可以最多缓存300秒</td></tr><tr><td>Set-Cookie</td><td>告诉浏览器为当前页面所在的域设置Cookie</td></tr></tbody></table><p><strong>常见的响应状态码</strong></p><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;200&#x3D;&#x3D;</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>&#x3D;&#x3D;404&#x3D;&#x3D;</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td>指示用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>&#x3D;&#x3D;500&#x3D;&#x3D;</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p><h4 id="Web服务器-Tomcat"><a href="#Web服务器-Tomcat" class="headerlink" title="Web服务器-Tomcat"></a><strong>Web服务器-Tomcat</strong></h4><p>Web服务器是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是“提供网上信息浏览服务”。</p><p>Tomcat是Apache软件基金会的一个核心项目，是一个开源免费的轻量级web服务器，支持Servlet&#x2F;JSP少量JavaEE规范</p><p>JavaEE：java Enterprise Edition，java企业版。指java企业级开发的技术规范总和，包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、java IDL 、JTS、JTA、javaMall、JAF</p><p>Tomcat也被称为Web容器、Servlet容器，Servlet程序需要依赖于Tomcat才能运行</p><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p>Tomcat的基本使用：</p><ul><li>下载：官网地址 <a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></li><li>安装：绿色版，直接解压即可</li><li>卸载：直接删除目录即可</li><li>启动：双击Tomcat文件中bin文件里的startup.bat</li></ul><p><code>控制台中文乱码：修改conf/logging.properties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.level = FINE</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter</span><br><span class="line">java.util.logging.ConsoleHandler.encoding = GBK  <span class="comment">//UTF-8 改为GBK</span></span><br></pre></td></tr></table></figure><ul><li>关闭：<ul><li>直接x掉运行窗口：强制关闭</li><li>bin\shutdown.bat：正常关闭</li><li>Ctrl+C：正常关闭</li></ul></li><li>配置Tomcat端口号（conf&#x2F;server.xml）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Tomcat部署项目</li></ul><p>将项目放置到webapps目录下，即部署完成</p><p>常见问题：</p><ul><li>启动窗口一闪而过：检查JAVA_HOME环境变量是否正确配置</li><li>端口号冲突：找到对应程序，将其关闭掉</li></ul><p><mark>注意事项：HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，不需要输入端口号</mark></p><p>起步依赖：</p><ul><li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li><li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li><li>官方提供的starter：<a href="https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#using.build-systems.starters</a></li></ul><p>基于Springboot开发的web应用程序，内置了tomcat服务器，当启动类运行时，会自动启动内嵌的tomcat服务器</p><h3 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h3><ul><li>请求（HttpServletRequest）：获取请求数据</li><li>响应（HttpServletResponse）：设置响应数据</li><li>BS架构：Brower&#x2F;Server，浏览器 &#x2F; 服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。（维护方便 体验一般）</li><li>CS架构：Client &#x2F; Server，客户端 &#x2F; 服务器架构模式。（开发、维护麻烦、体验不错）</li></ul><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p><p>作用：常用于进行接口测试</p><p><strong>简单参数</strong></p><p>简单参数：参数名与形参变量名相同，定义形参即可接收参数</p><p>如果方法形参名称与请求参数名称不匹配，可以使用<code>@RequestParam</code>完成映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;)</span>String username,Integer age)</span>&#123;</span><br><span class="line">       System.out.println(username+<span class="string">&quot; : &quot;</span>+age);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><mark>注意事项：@RequestParam中的required属性默认为true，代表该请求参数必须传递，如果不传递则报错。如果该参数是可选的，可以将required属性设置为false</mark></p><ul><li>原始方式</li></ul><p>在原始的web程序中，获取请求参数，需要通过HttpServletRequest对象手动获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);</span><br><span class="line">    System.out.println(name+<span class="string">&quot; : &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体参数</strong></p><p>简单实体对象：请求参数名与形参名对象属性名相同，定义POJO接收即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simplePoJo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂实体对象：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simplePoJo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Address&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组集合参数</strong></p><p>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</p><ul><li>数组接收：请求参数名与形参中数组变量名相同，可以直接使用数组封装</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Arrays.toString(hobby)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>集合接收：请求参数名与形参中集合变量名相同，通过<code>@RequestParam</code>绑定参数关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">    System.out.println(hobby);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>日期参数</strong></p><p>日期参数：使用<code>@DateTimeFormat</code>注解完成日期格式参数转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span>LocalDateTime updateTime)</span>&#123;</span><br><span class="line">    System.out.println(updateTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSON参数</strong></p><p>JSON参数：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用<code>@RequestBody</code>标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Address&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>路径参数</strong></p><p>路径参数：通过请求URL直接传递参数，使用{…}来标识该路径参数，需要使用<code>@PathVariable</code>获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取多个路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id , <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">       System.out.println(id);</span><br><span class="line">       System.out.println(name);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p><code>ResponseBody</code></p><ul><li>类型：<mark>方法注解、类注解</mark></li><li>位置：Controller方法上 &#x2F; 类上</li><li>作用：将方法返回值直接响应，如果返回值类型是 实体对象 &#x2F; 集合，将会转换为JSON格式响应</li><li>说明：@RestController &#x3D; @Controller + @ResonseBody</li></ul><p>响应-字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应-JSON对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">       addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">       addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> addr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>响应-JSON集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一响应结果</p><p>Result（code、msg、data）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code ;<span class="comment">//1 成功 , 0 失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//数据 date</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>Springboot项目的静态资源（html、css、js等前端资源）默认存放目录为：classpath:&#x2F;static，classpath:&#x2F;public，classpath:&#x2F;resources</mark></p><h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><ul><li><strong>controller</strong>：控制层，接收前端发送的请求，对请求进行处理，并响应数据。</li><li><strong>service</strong>：业务逻辑层，处理具体的业务逻辑。</li><li><strong>dao</strong>：数据访问层（Data Access Object）（持久层），负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>按员工案例拆分成三层架构后如下：</p><ul><li>controller层：接收请求，响应数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">               <span class="comment">//调用service,获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao层：数据访问操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line"><span class="comment">//        String file = this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span></span><br><span class="line"><span class="comment">//        含有中文目录改成下面这个代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).toURI().getPath();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service层：业务逻辑处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.调用dao，获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            empList = empDao.listEmp();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h4><ul><li>内聚：软件中各个功能模块内部的功能联系。</li><li>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</li><li>软件设计原则：<strong>高内聚低耦合</strong>。</li></ul><p><strong>控制反转</strong>：Inversion Of Control，简称<strong>IOC</strong>。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><p><strong>依赖注入</strong>：Dependency Injection，简称<strong>DI</strong>。容器为应用程序提供运行时所依赖的资源，称之为依赖注入。</p><p><strong>Bean对象</strong>：IOC容器中创建、管理的对象，称之为<strong>bean</strong>。</p><h4 id="IOC-DI-入门"><a href="#IOC-DI-入门" class="headerlink" title="IOC &amp; DI 入门"></a>IOC &amp; DI 入门</h4><ol><li>Service层 及 Dao层的实现类，交给IOC容器管理。– 加上<code>@Component</code></li><li>为Controller及Service注入运行时依赖的对象。 – 在成员变量前面加上<code>@Autowired</code></li><li>运行测试。</li></ol><ul><li>Dao层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line"><span class="comment">//        String file = this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span></span><br><span class="line"><span class="comment">//        含有中文目录改成下面这个代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).toURI().getPath();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.调用dao，获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            empList = empDao.listEmp();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">        <span class="comment">//调用Dao层，查询数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若需要使用其他接口的实现类，则只需要将当前使用的接口实现类中的<code>@Component</code>注释掉即可</p><h4 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h4><p><strong>Bean的声明</strong></p><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean对象的基础注解</td><td>不属于以下三类时，用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr></tbody></table><p>注意事项：</p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用<code>@Controller</code>。</li></ul><p><strong>Bean组件扫描</strong></p><ul><li>前面声明bean的四大注解，要想生效，还需要被组件扫描注解<code>@ComponentScan</code>扫描。</li><li><code>@ComponentScan</code>注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解<code>@SpringBootApplication</code>中，默认扫描的范围是启动类所在包及其子包。</li></ul><p>如果其中一个包未放在启动包下面，则可以通过以下方法解决：</p><ul><li>手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加以下注解</span></span><br><span class="line"><span class="meta">@Component(&#123;&quot;包名1&quot;,&quot;包名2&quot;&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>将我们定义的controller，service，dao这些包都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><h4 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h4><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>@Autowired注解，默认是按照<mark>类型</mark>进行，如果存在多个相同类型的bean，将会报错，以下是几种解决方案</p><ol><li><code>@Primary</code>设定优先级</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>@Qualifier</code>配合<code>@Autowired</code>使用（@Antowiredf + @Qulifier(“bean的名称”)）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;empServiceA&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>@Resource</code>（@Resource(name &#x3D; “bean的名称”)）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;empServiceB&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>@Resource和@Autowired区别</mark></p><ul><li>@Autowired是springboot框架提供的注解，而@Resource是JDK提供的注解。</li><li>@Autowired默认是按照类型注入，而@Resource默认是按照名称注入。</li></ul><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p>MyBatis是一款优秀的<mark>持久层</mark>框架，用于简化JDBC的开发。</p><p>MyBaits本是Apache的一个开源项目iBatis，2010年该项目由Apache迁移到了google code，并且改名为MyBatis。2013年11月迁移到Github。</p><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>案例：使用mybatis查询所有用户数据</p><ol><li>准备工作（创建springboot工程，数据库表user，实体类user）</li><li>引入Mybatis的相关依赖，配置Mybatis</li><li>编写SQL语句（注解&#x2F;XML）</li></ol><h5 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h5><p>JDBC：（Java Database Connectivity），就是使用Java语言操作关系模型数据库的一套API。</p><p>本质：</p><ul><li>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</li><li>各个数据库厂商去实现这套接口，提供数据库<mark>驱动jar包</mark>。</li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mybaits&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取执行SQL的对象Statement，执行SQL语句，返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.封装结果数据</span></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getNString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">Short</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getShort(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">Short</span> <span class="variable">gender</span> <span class="operator">=</span> resultSet.getShort(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,name,age,gender,phone);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        userList.forEach(user-&gt;&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h5><p>数据库连接池，是个容器，负责分配、管理数据库连接（Connection），它允许应用程序重复使用一个现有的数据库连接，而不是重新再建立一个，释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接泄漏</p><p>优势</p><ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接泄漏</li></ul><p>标准接口：DataSource</p><ul><li>官方（sun）提供的数据库连接池接口，由第三方组织实现此接口。</li><li>功能：获取连接     <code>connection getConnection() throws SQLException;</code></li></ul><p>常见产品：C3P0、DBCP、Druid、Hikari（springboot默认）</p><p>Druid(德鲁伊)</p><ul><li>Druid连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大、性能优秀、是Java语言最好的数据库连接池之一</li></ul><p>切换Druid数据库连接池</p><blockquote><p>官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加到pom.xml文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependcy</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加到application.properties文件中</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql//localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h5 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h5><p>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter &#x2F; setter、equals、hashcode、toString等方法，并可以自动化成日志变量，简化Java开发、提高效率。</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Getter &#x2F; @Setter</td><td>为所有属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的toString方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写equals方法和hashCode方法</td></tr><tr><td><strong>@Data</strong></td><td>提供了更综合的生成代码的功（@Getter+@Setter+@ToString+@EqualsAndHashCode）</td></tr><tr><td><strong>@NoArgsConstructor</strong></td><td>为实体类生成无参的构造器方法</td></tr><tr><td><strong>@AllArgsConstructor</strong></td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><p>使用lombokl需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">grouId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">grouId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><mark>注意事项：Lombok会在编译时，自动生成对应的java代码，我们使用lombok时，还需要安装一个lombok的插件（idea自带）</mark></p><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>案例：根据提供的《tlias智能学习辅助系统》页面原型及需求，完成员工管理的需求开发。</p><p>功能列表：</p><ul><li>查询（根据主键ID查询、条件查询）</li><li>新增</li><li>更新</li><li>删除（根据主键ID删除，根据主键ID批量删除）</li></ul><p>准备工作</p><ul><li>准备数据库表emp</li><li>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</li><li>application.properties中引入数据库连接信息</li><li>创建对应的实体类Emp（实体类属性采用驼峰命名）</li><li>准备Mapper接口EmpMapper</li></ul><h5 id="根据主键删除ID"><a href="#根据主键删除ID" class="headerlink" title="根据主键删除ID"></a><strong>根据主键删除ID</strong></h5><p>SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">17</span>;</span><br></pre></td></tr></table></figure><p>接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p><mark>注意事项：如果mapper接口方法形参只有一个普通类型的参数，#{…}里面的属性名可以随便写，如：#{id}、#{value}</mark></p><p>日志删除</p><p>可以在application.properties中，打开mybatis日志，并指定输出到控制台</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定mybatis输出日志的位置，输出控制台</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.stdOutImpl</span></span><br></pre></td></tr></table></figure><p>预编译SQL</p><p>![11](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (11).png)</p><p>预编译SQL优势：</p><ul><li>性能更高</li><li>更安全（防止SQL注入）</li></ul><p><strong>SQL注入</strong>是指通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行<mark>攻击</mark>的方法。</p><blockquote><p>由于没有对用户输入进行充分检查，而SQL又是拼接而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，也可以完成恶意攻击。</p></blockquote><p><strong>占位参数符</strong></p><p>#{…}：执行SQL时，会将#{…}替换为？，生成预编译SQL，会自动设置参数值。使用时机：参数传递，都使用#{…}</p><p>${…}：直接将参数拼接在SQL语句中，存在SQL注入问题。使用时机：如果对表名、列表进行动态设置时使用。</p><h5 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h5><ul><li>SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (username, name, gender, image, job, entrydate, dept_id, create_time, update_time)</span><br><span class="line">            <span class="keyword">values</span> (<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;汤姆&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1.ipg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2005-01-01&#x27;</span>,<span class="number">1</span>,now(),now());</span><br></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into emp (username, name, gender, image, job, entrydate, dept_id, create_time, update_time)\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entryDate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"><span class="comment">//由于需要传入的数据比较多，因此我们采用传入一个实体对象的方式来实现</span></span><br></pre></td></tr></table></figure><p>新增（主键返回）</p><p>描述：在数据添加成功后，需要获取插入数据库数据的主键，如添加套餐数据时，还需要维护套餐菜品关系表数据。</p><ul><li>实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Options(keyProperty=&quot;id&quot;,useGeneratedKeys=true)</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into emp (username, name, gender, image, job, entrydate, dept_id, create_time, update_time)\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entryDate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><ul><li>SQL语句（根据ID更新员工信息）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> username<span class="operator">=</span><span class="string">&#x27;songdaxia&#x27;</span>,name<span class="operator">=</span><span class="string">&#x27;宋大侠&#x27;</span>,gender<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>,image<span class="operator">=</span><span class="string">&#x27;1.jpg&#x27;</span>,job<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">         entrydate<span class="operator">=</span><span class="string">&#x27;2020-01-01&#x27;</span>,dept_id<span class="operator">=</span><span class="string">&#x27;2&#x27;</span>,update_time<span class="operator">=</span><span class="string">&#x27;2022-01-01 22:43:21&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update emp set username=#&#123;username&#125;,name=#&#123;name&#125;,gender=#&#123;gender&#125;,image=#&#123;image&#125;,job=#&#123;job&#125;,&quot; + &quot;entrydate=#&#123;entryDate&#125;,dept_id=#&#123;deptId&#125;,update_time=#&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure><h5 id="查询（根据ID查询）"><a href="#查询（根据ID查询）" class="headerlink" title="查询（根据ID查询）"></a>查询（根据ID查询）</h5><ul><li>SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p><strong>数据封装</strong></p><ul><li>实体类属性名和数据表查询返回的字段名一致时，mybatis会自动封装。</li><li>如果实体类属性名和数据表查询返回的字段名不一致时，不能自动封装。</li></ul><p>解决方案：</p><ol><li>起别名：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方案一：给字段起别名，让别名与实体类属性一致</span></span><br><span class="line"><span class="meta">@Select(&quot;select id,username,password,name,gender,image,job,&quot; +</span></span><br><span class="line"><span class="meta">         &quot;entrydate entryDate,dept_id deptId,create_time createTime,update_time updateTime &quot; +</span></span><br><span class="line"><span class="meta">         &quot;from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>手动结果映射：通过@Results及@Result进行手动结果映射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方案二：通过@Results，@Result注解手动映射封装</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;),</span></span><br><span class="line"><span class="meta">           @Result(column = &quot;entrydate&quot;, property = &quot;entryDate&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>开启驼峰命名：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方案三：开启mybatis的驼峰命名自动映射开关  ---- a_cloumn    ---------&gt;  aColumn</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h5 id="查询（条件查询）"><a href="#查询（条件查询）" class="headerlink" title="查询（条件查询）"></a>查询（条件查询）</h5><ul><li>SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Select(&quot;select * from emp where name like &#x27;%$&#123;name&#125;%&#x27; and gender = #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;update_time desc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin,LocalDate end)</span>;</span><br></pre></td></tr></table></figure><p>使用$会存在<mark>性能低、不安全、存在SQL注入问题</mark>，可以通过字符串拼接函数<code>concat</code>来解决这个为题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by\n&quot; +</span></span><br><span class="line"><span class="meta">            &quot;update_time desc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin,LocalDate end)</span>;</span><br></pre></td></tr></table></figure><p><strong>参数名说明</strong></p><ul><li>在springboot的2.x版本</li></ul><p>![14](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (14).png)</p><ul><li>在springboot的1.x版本  &#x2F;  单独使用mybatis</li></ul><p>![15](<a href="https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb">https://cdn.jsdelivr.net/gh/hnuyl16/images/javaweb</a> (15).png)</p><h4 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h4><p><strong>规范</strong></p><ul><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置到相同包下<strong>（同名同包）</strong></li><li>XML映射文件的namespace属性为Mapper接口全限定名一致</li><li>XML映射文件中SQL语句的id与Mapper接口中的方法名一致，并保持返回类型一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mapper接口</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name,<span class="type">short</span> gender,LocalDate begin,LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- XML映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ithema.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithema.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender=#&#123;gender&#125;</span><br><span class="line">        and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>MybatisX</strong></p><p><strong>MybatisX</strong>是一款基于IDEA的快速开发Mybatis的插件，为效率而生。</p><p>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p><p>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></p><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><p>随着用户的输入或外部条件的变化而变化的SQL语句，我们称为<mark>动态SQL</mark>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithema.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">      select id,username,password,name,gender,image,job,entrydate,</span><br><span class="line">     dept_id,create_time,update_time from emp</span><br><span class="line">      where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">    name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">           and gender = #&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">           and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><if><ul><li><if>：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot; name != null&quot;</span>&gt;</span></span><br><span class="line">name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithema.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">       select id,username,password,name,gender,image,job,entrydate,</span><br><span class="line">      dept_id,create_time,update_time from emp</span><br><span class="line">       where</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">     name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入<where>标签</p><p><where>：where元素只会在子元素有内容的情况下才插入where语子句。而且会自动去除子句的开头的AND或OR。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithema.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">       select id,username,password,name,gender,image,job,entrydate,</span><br><span class="line">      dept_id,create_time,update_time from emp</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">     name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">     order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态更新修改员工信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update2&quot;</span> &gt;</span></span><br><span class="line"># 动态更新员工信息</span><br><span class="line">        update emp</span><br><span class="line">         set</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job=#&#123;job&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entryDate != null&quot;</span>&gt;</span></span><br><span class="line">                entrydate=#&#123;entryDate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span></span><br><span class="line">                dept_id=#&#123;deptId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><set>：动态地在首行插入SET关键字，并会删除额外地逗号。（用在update语句中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update2&quot;</span> &gt;</span></span><br><span class="line"># 动态更新员工信息</span><br><span class="line">        update emp</span><br><span class="line">         <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job=#&#123;job&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entryDate != null&quot;</span>&gt;</span></span><br><span class="line">                entrydate=#&#123;entryDate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span></span><br><span class="line">                dept_id=#&#123;deptId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><foreach><ul><li>SQL语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">18</span>,<span class="number">21</span>,<span class="number">24</span>);</span><br></pre></td></tr></table></figure><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure><ul><li>XML映射文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">delete from where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span>,<span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性</p><ul><li>collection：集合名称</li><li>item：集合遍历出来的元素 &#x2F; 项</li><li>separator：每一次遍历使用的分割符</li><li>open：遍历开始前拼接的片段</li><li>close：遍历结束后拼接的片段</li></ul><p><strong>sql片段</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span></span><br><span class="line">select id,username,name,gender,image,job,entrydate,dept_id,</span><br><span class="line">    create_time,update_time from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithema.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">selecct</span> <span class="attr">id</span>=<span class="string">&quot;getByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ithema.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">selecct</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><sql>：定义可重用的SQL片段</li><li><include>：通过属性refid，指定包含的sql片段</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/03/03/MySQL/"/>
      <url>/2024/03/03/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据库：存储数据的仓库，数据是有组织的进行存储，简称为DataBase(DB)</p><p>数据库管理系统：操纵和管理数据库的大型软件，简称为DataBase Management System(DBMS)</p><p>SQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库系统统一标准，简称为Structed Query Language(SQL)</p><ul><li>启动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80</span><br></pre></td></tr></table></figure><ul><li>停止</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure><ul><li>客户端连接</li></ul><p>方法一：MySQL提供的客户端命令行工具</p><p>方法二：系统自带的命令行工具执行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br></pre></td></tr></table></figure><p>注意：使用第二种方式时，需要配置PATH环境变量</p><p><strong>关系型数据库(RDBMS)</strong></p><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p><p>特点：</p><ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li></ul><p><strong>数据模型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240229202402534.png"></p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h4><ol><li>SQL语句可以单行或者多行书写，以分号结尾</li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议大写</li><li>注释：单行注释(–注释内容或# 注释内容(MySQL独有))  多行注释(&#x2F;* 注释内容 *&#x2F;)</li></ol><p>SQL分类</p><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definnition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户，控制数据库的访问权限</td></tr></tbody></table><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><p><strong>数据库操作</strong></p><p>查询</p><ul><li>查询所有数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><ul><li>查询当前数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排列规则];</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drop DATABASE[IF EXISTS] 数据库名;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><p><strong>表操作</strong></p><p>查询当前数据库中所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名;</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名&#123;</span><br><span class="line">字段1 字段1类型[COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型[COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型[COMMENT 字段3注释],</span><br><span class="line">……</span><br><span class="line">字段1 字段1类型[COMMENT 字段1注释]</span><br><span class="line">&#125;[COMMENT 表注释];</span><br></pre></td></tr></table></figure><p>注意：[…]位&#x3D;为可选参数，最后一个字段后面没有逗号</p><p>数据类型</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><p>修改</p><ul><li>添加字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><ul><li>修改数据类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度) </span><br></pre></td></tr></table></figure><ul><li>修改字段名和字段类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><ul><li>删除字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure><ul><li>修改表名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure><p>删除</p><ul><li>删除表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] 表名;</span><br></pre></td></tr></table></figure><ul><li>删除指定表，并重新创建该表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;</span><br></pre></td></tr></table></figure><p>注意：在删除表时，表中的全部数据也会被删除</p><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增删改操作。</p><ul><li>添加数据 INSERT</li><li>修改数据 UPDATE</li><li>删除数据 DELETE</li></ul><p><strong>添加数据</strong></p><ul><li>给指定字段添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(字段名1,字段名2,...) VALUES(值1,值2,...);</span><br></pre></td></tr></table></figure><ul><li>给全部字段添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES(值1,值2,...);</span><br></pre></td></tr></table></figure><ul><li>批量添加数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(字段名1,字段名2,...) VALUES(值1,值2,...),(值1,值2,...),(值1,值2,...);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES(值1,值2,...),(值1,值2,...),(值1,值2,...);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>插入数据时，指定的字段顺序需要与值得顺序是一一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内</li></ul><p><strong>修改数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET 字段1 = 值1 ,字段2 = 值2, ...[WHERE 条件];</span><br></pre></td></tr></table></figure><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据</p><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE 条件];</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>DELETE语句的条件可以有，也可以没有，如果没有条件，则会删除所有整张表的所有数据</li><li>DELETE语句不能删除某一个字段的值(可以使用UPDATE)</li></ul><h4 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h4><p>DQL全称是Data Query Lanuage(数据查询语言)，数据查询语言，用来查询数据库表的记录</p><p>查询关键字：<mark>SELECT</mark></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure><p><strong>基础查询</strong></p><ul><li>查询多个字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1,字段2,字段3... FROM 表名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名;</span><br></pre></td></tr></table></figure><ul><li>设置别名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1 [AS 别名1], 字段2 [AS 别名2] ... FROM 表名;</span><br></pre></td></tr></table></figure><ul><li>去除重复记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表;</span><br></pre></td></tr></table></figure><p>条件</p><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;或！&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN… AND…</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配(_匹配单个字符，%匹配任意字符)</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr><tr><td>AND 或  &amp;&amp;</td><td>并且(多个条件同时成立时)</td></tr><tr><td>OR 或  ||</td><td>或者(多个条件任意一个成立时)</td></tr><tr><td>NOT 或  !</td><td>非，不是</td></tr></tbody></table><p><strong>聚合函数</strong></p><p>将一列数据作为一个整体，进行纵向计算</p><p>常见聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 聚合函数 (字段列表) FROM 表名;</span><br></pre></td></tr></table></figure><p>注意：所有null值不参与所有聚合函数运算</p><p><strong>分组查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [where 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];</span><br></pre></td></tr></table></figure><p>where和having区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ul><p>注意</p><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段五任何意义</li></ul><p><strong>排序查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</span><br></pre></td></tr></table></figure><p>排序方式</p><ul><li>ASC：升序(默认值)</li><li>DESC：降序</li></ul><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><p><strong>分页查询</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>起始索引从0开始，起始索引 &#x3D; (查询页码 - 1) *每页记录数</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</li></ul><p><strong>执行顺序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure><h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><p>DCL全称是Data Control Language(数据库控制语言)，用来管理数据库用户、控制数据库的访问权限</p><p><strong>管理用户</strong></p><ul><li>查询用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM USER;</span><br></pre></td></tr></table></figure><ul><li>创建用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><ul><li>修改用户密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>主机名可以使用%适配</li><li>这类SQL开发人员操作的比较少，主要是DBA(Data Administrator 数据库管理员)使用</li></ul><p><strong>权限控制</strong></p><p>MySQL中定义了很多权限，但是常见的就以下几种：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL，ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><ul><li>查询权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br></pre></td></tr></table></figure><ul><li>授予权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANTS 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br></pre></td></tr></table></figure><ul><li>撤销权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机&#x27;;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以使用*进行通配，代表所有</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数 是指一段能够可以直接被另一段程序调用的程序或者代码</p><p><strong>字符串函数</strong></p><p>MySQL中内置了很多字符串函数，常用的几个如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接，将S1、S2、…Sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转化为小写字母</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转化为大写字母</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(sre,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串start位置起的len个长度的字符串(索引从1开始)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 函数(参数);</span><br></pre></td></tr></table></figure><p><strong>数值函数</strong></p><p>常见的数值函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x,y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1之内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><p><strong>日期函数</strong></p><p>常见的日期函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date，INTERVAL expr type)</td><td>返回上一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1，date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p><strong>流程函数</strong></p><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t,f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果val1为true，返回res1，…否则返回default默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果expr的值等于val1，返回res1，…否则返回default默认值</td></tr></tbody></table><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><p>目的：保证数据库中数据的正确，有效性和完整性</p><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一的，不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束(8.0.16版本之后)</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束，主键自增(auto -increment)</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>语法</p><ul><li>添加外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名  数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br></pre></td></tr></table></figure><ul><li>删除外键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br></pre></td></tr></table></figure><ul><li>删除&#x2F;更新行为</li></ul><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新</td></tr><tr><td>RESTRICT</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新</td></tr><tr><td>CASCADE</td><td>当在父表中删除&#x2F;更新记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有，则设置子表中该外键值为null(这就要求该外键允许取null)</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE CASCADE ON DELETE CASCADE;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三类：一对多(多对一)、多对多、一对一</p><h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><ul><li>一对多(多对一)</li></ul><p>案例：部门与员工之间的关系</p><p>关系：一个部门对应多个员工，多个员工对应一个部门</p><p>实现：在多的一方建立外键，指向一的一方建立主键</p><ul><li>多对多</li></ul><p>案例：学生与课程之间的关系</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p><p>实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键</p><ul><li>一对一</li></ul><p>案例：用户与用户详情的关系</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</p><p>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p><p>多表查询分类</p><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询<strong>左表</strong>所有数据，以及两张表交集部分数据</li><li>右外连接：查询<strong>右表</strong>所有数据，以及两张表交集部分数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><p><strong>内连接</strong></p><p>查询语法</p><ul><li>隐式内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1，表2 WHERE 条件 ...;</span><br></pre></td></tr></table></figure><ul><li>显式内连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件 ...;</span><br></pre></td></tr></table></figure><p>内连接查询的是两张表<strong>交集</strong>的部分</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240303115658392.png"></p><p><strong>外连接</strong></p><p>查询语法</p><ul><li>左外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 ...;</span><br></pre></td></tr></table></figure><p>相当于查询表1(左表)的所有数据 包含表1和表2交集部分的数据</p><ul><li>右外连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件 ...;</span><br></pre></td></tr></table></figure><p>相当于查询表2(右表)的所有数据 包含表1和表2交集部分的数据</p><p><strong>自连接</strong></p><p>查询语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</span><br></pre></td></tr></table></figure><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>注意：在自连接查询时，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底是哪一张表的字段</p><p><strong>联合查询-union，union all</strong></p><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...;</span><br></pre></td></tr></table></figure><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p><p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>概念：SQL语句中嵌套SELECT语句，称为<strong>嵌套查询</strong>，又称<strong>子查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 where column1 = (SELECT column1 FROM t2);</span><br></pre></td></tr></table></figure><p>子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F; DELETE SELECT 的任何一个</p><p>根据子查询结果不同，分为以下四类：</p><ul><li>标量子查询(子查询的结果为单个值)</li><li>列子查询(查询结果为一列)</li><li>行子查询(查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul><p>根据子查询位置：分为：WHERE之后、FROM之前、SELECT之后</p><p><strong>标量子查询</strong></p><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式</p><p>常用的操作符：&#x3D;  &lt;&gt; &gt;&#x3D; &gt;  &lt;&#x3D;  &lt;</p><p><strong>列子查询</strong></p><p>子查询返回的结果是一列(可以是多行)</p><p>常用的操作符：IN、NOT IN、ANY、SOME、ALL</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个条件满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p><strong>行子查询</strong></p><p>子查询返回的结果是一行(可以是多列)</p><p>常用</p><p>的操作符：&#x3D;、&lt;&gt;、IN、NOT IN</p><p><strong>表子查询</strong></p><p>子查询返回的结果是多行多列</p><p>常用的操作符：IN</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功、要么同时失败</p><p>默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务</p><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><p>方式一</p><ul><li>查看 &#x2F; 设置事务提交方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@autocommit;</span><br><span class="line">SET @@autocommit = 0;//关闭自动提交</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p>方式二</p><ul><li>开始事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION 或 BEGIN;//开始事务</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><h4 id="事务四大特性-ACID"><a href="#事务四大特性-ACID" class="headerlink" title="事务四大特性(ACID)"></a>事务四大特性(ACID)</h4><p>原子性(Atomicty)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</p><p>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</p><p>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响下的独立环境下运行</p><p>持久性(Durability)：事务一旦提交或者回滚，它对数据库中的数据的改变就是永久的</p><h4 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h4><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td>一个事务读到另一个事务还没有提交的数据</td></tr><tr><td><strong>不可重复读</strong></td><td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</td></tr><tr><td><strong>幻读</strong></td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”</td></tr></tbody></table><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>Read uncommitted</strong></td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>Read committed</strong></td><td>×</td><td>√</td><td>√</td></tr><tr><td><strong>Repeatable Read(默认)</strong></td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>Serializable</strong></td><td>×</td><td>×</td><td>×</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查看事务隔离级别</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line"></span><br><span class="line">-- 设置事务隔离级别</span><br><span class="line">SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | RED COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure><p>注意：事务的隔离级别越高，数据越安全，但是性能越低</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h4><ul><li><strong>连接层</strong></li></ul><p>最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限</p><ul><li><strong>服务层</strong></li></ul><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析与优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等</p><ul><li><strong>引擎层</strong></li></ul><p>存储引擎真正地负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选择合适的引擎</p><ul><li><strong>存储层</strong></li></ul><p>主要是将数据存储在文件系统之上，并完成与存储引擎的交互</p><h4 id="存储引擎-1"><a href="#存储引擎-1" class="headerlink" title="存储引擎"></a>存储引擎</h4><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型</p><ul><li>在创建表时，指定存储引擎</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">    ...</span><br><span class="line">    字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">) ENGINE = INNODB [COMMENT 表注释];</span><br></pre></td></tr></table></figure><ul><li>查看当前数据库支持的存储引擎</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><p><strong>InnoDB</strong></p><p>InnoDB是一种兼顾可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是默认的MySQL存储引擎</p><p>特点</p><ul><li>DML操作支持ACID模型，支持事务；</li><li>行级锁，提高并发访问性能；</li><li>支持外键FOREIGN KEY 约束，保证数据的完整性和正确性</li></ul><p>文件</p><ul><li>xxx.ibd：xxx代表的是表名，InnoDB引擎的每一张表都会对应这样的一个表空间文件，存储该表的表结构(frm、sdi)、数据和索引</li><li>参数：innodb_file_per_table</li></ul><p>存储结构</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240305190759951.png"></p><p><strong>MyISAM</strong></p><p>MyISAM是MySQL早期的默认存储引擎</p><p>特点</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件</p><ul><li>xxx.sdi：存储表结构信息</li><li>xxx.MYD：存储数据</li><li>xxx.MYI：存储索引</li></ul><p><strong>Memory</strong></p><p>Memory引擎的表数据是存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用</p><p>特点</p><ul><li>内存存放</li><li>hash索引(默认)</li></ul><p>文件</p><ul><li>xxx.sdi：存储表结构信息</li></ul><p><strong>区别</strong></p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td><strong>支持</strong></td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td><strong>行锁</strong></td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td><strong>支持</strong></td><td>-</td><td>-</td></tr></tbody></table><p><strong>存储引擎选择</strong></p><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎，对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合</p><ul><li>InnoDB：是MySQL的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件上要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较适合的xuanz</li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求并不是很高，那么选择这个存储引擎是非常合适的</li><li>MEMORY：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>索引(inedx)是帮助MySQL<strong>高效获取数据</strong>的**数据结构(有序)**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现查找算法，这种数据结构就是索引。</p><ul><li>优缺点</li></ul><table><thead><tr><th>优势</th><th>缺点</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库的IO成本</td><td>索引列也是要占用内存空间的</td></tr><tr><td>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</td><td>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率很低</td></tr></tbody></table><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下内容：</p><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td><strong>B+ Tree索引</strong></td><td><strong>最常见的索引类型，大部分引擎都支持B+ 树索引</strong></td></tr><tr><td>Hash 索引</td><td>底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R- tree (空间索引)</td><td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-text (全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式。类似于Lucence,Solr，ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th></tr></thead><tbody><tr><td>B+ tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R- tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text索引</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>B-tree(多路平衡查找树)</strong></p><p>以一颗最大度数为5(5阶)的b-tree为例(每个节点最多存储4个key，5个指针)：</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240306203048434.png"></p><p><strong>B+Tree</strong></p><p>以一颗最大度数为4的b+tree为例：</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240306203715175.png"></p><p>相比较B-Tree的区别：</p><ul><li>所有的数据都会出现在要叶子结点</li><li>叶子结点形成一个单向链表</li></ul><p>MySQL的索引数据结构对经典的B+Tree进行了优化，在原B+Tree的基础上，增加了一个指向相邻叶子结点的链表指针，就形成了带有顺序指针的B+Tree，提高了区间访问的性能，利于排序</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240306204334741.png"></p><p><strong>Hash</strong></p><p>哈希索引就是采用一定的哈希算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中</p><p>如果两个或多个键值，映射到一个相同的槽位上时，他们就产生了hash冲突(也称为hash碰撞)，可以通过链表来解决</p><p>索引特点</p><ul><li>hash索引只能用于对等比较(&#x3D;，in)，不支持范围查询(between，&gt;，&lt;，…)</li><li>无法利于索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于B+Tree索引</li></ul><p>在MySQL中，支持hash索引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储和索引放到了一块，索引结构的叶子结点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据和索引分开存储，索引结构的叶子结点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引</li></ul><h4 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h4><ul><li>创建索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE | FULLTEXT] INDEX index_name on table_name (index_col,name,...);</span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM table_name;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure><h4 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h4><ul><li>SQL执行频率</li></ul><p>MySQL客户端连接成功后，通过show[session|global] status命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL STATUS LIKE &#x27;COM_____&#x27;;  -- 一个下划线代表一个字符</span><br></pre></td></tr></table></figure><ul><li><strong>慢查询日志</strong></li></ul><p>慢查询日志记录了所有执行时间超过指定参数(long_query_time，单位：秒，默认10秒)的所有SQL语句的日志</p><p>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件(&#x2F;etc&#x2F;my.cnf)中配置如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开启MySQL慢日志查询开关</span><br><span class="line">slow_query_log = 1</span><br><span class="line"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><br><span class="line">long_query_time = 2</span><br></pre></td></tr></table></figure><p>配置完毕后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><ul><li><strong>profile详情</strong></li></ul><p>show profiles能够在做SQL优化时帮助我们了解时间都耗费到哪里去了，通过have_profiling参数，能够看到当前MySQL是否支持profile操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@have_profiling;</span><br></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在session &#x2F; global级别开启profiling：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@profiling; -- 查询是否开始</span><br><span class="line">SET profiling = 1;</span><br></pre></td></tr></table></figure><p>执行一系列的业务SQL操作，然后通过以下指令查看指令的执行耗时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看每一条SQL的耗时基本情况</span><br><span class="line">show profiles;</span><br><span class="line"># 查看指定query_id的SQL语句各个阶段的耗时情况</span><br><span class="line">show profile for query query_id;</span><br><span class="line"># 查看指定query_id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br></pre></td></tr></table></figure><ul><li><strong>explain执行计划</strong></li></ul><p>EXPLAIN或者DESC命令获取MySQL如何执行SELECT语句的信息，包括在SELECT语句执行过程中表如何连接和连接的顺序</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接在select语句前加上关键字explain / desc</span><br><span class="line">EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;</span><br></pre></td></tr></table></figure><p>EXPLAIN执行计划各字段含义：</p><ul><li>id</li></ul><p>select查询的序列号，表示查询中执行select子句或者是操作表的顺序(id相同，执行顺序从上到下；id不同，值越大，越先执行)</p><ul><li>select_type</li></ul><p>表示SELECT的类型，常见的取值有SIMPLE(简单表，即不能使用表连接或者子查询)、PRIMARY(主查询，即外层的查询)、UNION(UNION中的第二个或者后面的查询语句)、SUBQUERY(SELECT&#x2F;WHERE之后包含了子查询等)</p><ul><li><strong>type</strong></li></ul><p>表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、index、all</p><ul><li>possible_key</li></ul><p>显示可能应用在这张表上的索引，一个或者多个</p><ul><li>key</li></ul><p>实际使用的索引，如果为NULL，则没有使用索引</p><ul><li>key_len</li></ul><p>表示索引中使用的字节数，该值为索引字段的最大可能长度，并非实际长度，在不损失精确性的前提下，长度越短越好</p><ul><li>rows</li></ul><p>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并总是准确的</p><ul><li>filtered</li></ul><p>表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</p><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><ul><li>验证索引效率</li></ul><p>在未建立索引之前，执行如下SQL语句，查看SQL的耗时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb_sku WHERE sn = &#x27;1000000000314001&#x27;;</span><br></pre></td></tr></table></figure><p>针对字段创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_sku_sn on tb_sku(sn);</span><br></pre></td></tr></table></figure><p>然后再次执行相同的SQL语句，再次查看SQL的耗时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tb_sku WHERE sn = &#x27;1000000000314001&#x27;;</span><br></pre></td></tr></table></figure><p><strong>最左前缀法则</strong></p><p>如果索引了多列(联合索引)，要遵循最左前缀法则。最左前缀法则指的是查询从索引的<mark>最左列开始</mark>，并且不跳过索引中的列。如果跳跃了某一列，<mark>索引将部分失效(后面的字段索引失效)</mark></p><p><strong>索引失效情况</strong></p><ul><li>索引列运算</li></ul><p>不要在索引列上进行运算操作，索引将失效</p><ul><li>模糊查询</li></ul><p>如果仅仅是尾部模糊查询，索引将不会失效；如果是头部模糊查询，索引将会失效</p><ul><li>or连接的条件</li></ul><p>用or分割开的条件，如果or前的条件中的列有索引，而后面的列没有索引，那么涉及的索引都不会被使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where id = 10 or age = 20;</span><br><span class="line">explain select * from tb_user where phone = &#x27;17799990017&#x27; or age = 23;</span><br></pre></td></tr></table></figure><p>由于age没有索引，所以即使id、phone有索引，索引也会失效。所以需要针对age也要建立索引</p><ul><li>数据分布影响</li></ul><p>如果MySQL评估使用索引比全表更慢，则不会使用索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_user where phone&gt;=&#x27;17799990005&#x27;;</span><br><span class="line">select * from tb_user where phone&gt;=&#x27;17799990015&#x27;;</span><br></pre></td></tr></table></figure><p><strong>SQL提示</strong></p><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的</p><p><code>use index</code>(建议使用该索引)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user use index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><code>ignore index</code>(忽略使用此索引)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user ignore index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><code>force index</code>(强制使用该索引)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user force index(idx_user_pro) where profession = &#x27;软件工程&#x27;;</span><br></pre></td></tr></table></figure><p><strong>覆盖索引</strong></p><p>尽量使用覆盖索引(查询使用了索引，并且需要返回的列，在该索引中已经能够全部找到)，减少select *；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age,status from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br><span class="line">explain select id,profession,age,status,name from tb_user where profession = &#x27;软件工程&#x27; and age = 31 and status = &#x27;0&#x27;;</span><br></pre></td></tr></table></figure><p><code>using index condition</code>：查找使用了索引，但是需要回表查询数据</p><p><code>using where;using index</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</p><p><strong>前缀索引</strong></p><p>当字段类型为字符串(varchar、text等)时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_xxx on table_name(column(n));//n代表字符串的前n个字符</span><br></pre></td></tr></table></figure><p>前缀长度</p><p>可以根据索引的选择性来决定，而选择性是指不重复的索引值(基数)和数据表的记录总数比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email)/ count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email,1,5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p><strong>单列索引与联合索引</strong></p><p>单列索引：即一个索引只包含单个列</p><p>联合索引：即一个索引包含了多个列</p><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建立联合索引，而非单列索引</p><p>单列索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select id,phone,name from tb_user where phone = &#x27;17799990010&#x27; and name = &#x27;韩信&#x27;;</span><br></pre></td></tr></table></figure><p><mark>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</mark></p><p>联合索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index idx_phone_name on tb_user(phone,name);</span><br></pre></td></tr></table></figure><p><strong>索引设计原则</strong></p><ul><li>针对于数据量比较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对字符串的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它，当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引更有效地用于查询</li></ul><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p><strong>insert优化</strong></p><ul><li>批量插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_test values(1,&#x27;Tom&#x27;),(2,&#x27;Cat&#x27;),(3,&#x27;Jerry&#x27;);</span><br></pre></td></tr></table></figure><ul><li>手动事务提交</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_test values(1,&#x27;Tom&#x27;),(2,&#x27;Cat&#x27;),(3,&#x27;Jerry&#x27;);</span><br><span class="line">insert into tb_test values(4,&#x27;Tom&#x27;),(5,&#x27;Cat&#x27;),(6,&#x27;Jerry&#x27;);</span><br><span class="line">insert into tb_test values(7,&#x27;Tom&#x27;),(8,&#x27;Cat&#x27;),(9,&#x27;Jerry&#x27;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>主键插入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 主键乱序插入：8 1 9 21 80 2 4 15 89 5 7 3</span><br><span class="line">-- 主键顺序插入：1 2 3 4 5 6 7 8 9 15 21 88 89</span><br></pre></td></tr></table></figure><p><strong>大量批量插入数据</strong></p><p>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务器时，还需要加上参数 --local-infile</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开始从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table `tb_user` fileds terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p><mark>主键顺序插入性能高于乱序插入</mark></p><h4 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h4><ul><li>数据组织方式</li></ul><p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为<mark>索引组织表</mark>(index organized table <strong>IOT</strong>)</p><ul><li>页分裂</li></ul><p>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据过大，就会行溢出)，根据主键排列如果主键是乱序插入，会扰乱原来已排序好的页，MySQL 会通过新建页并调整原来已经存放在页中的数据来达到维护主键有序的效果，这便是<strong>页分裂</strong>。</p><ul><li>页合并</li></ul><p>当删除某一行记录时，实际上记录并没有被物理删除，只是记录被被标记(flaged)为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录达到MERGE_THRESHOLD(默认为页的50%)，InnoDB会开始寻找最靠近的页(前或后)看看是否可以将两个页合并以优化空间使用,此之谓<strong>页合并</strong>。</p><p><code>MERGE_THRESHOLD</code>：合并页的阈值，可以自己设置，在创建表或者索引的时候指定</p><p><strong>主键设计原则</strong></p><ol><li><p>满足业务需求条件下，尽量降低主键长度</p></li><li><p>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键</p></li><li><p>尽量不要使用UUID做主键或者其他自然主键，如身份证号</p></li><li><p>业务操作时，避免对主键的修改</p></li></ol><h4 id="order-by-优化"><a href="#order-by-优化" class="headerlink" title="order by 优化"></a>order by 优化</h4><ol><li><code>Using filesort</code>：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都是FileSort排序</li><li><code>Using index</code>：通过有序索引顺序扫描直接返回有序结果，这种情况即为Using index，不需要额外排序，操作效率高</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 没有创建索引时，根据age,phone进行排序</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone;</span><br><span class="line"># 创建索引</span><br><span class="line">create index idx_user_age_phone_aa on tb_user(age,phone);</span><br><span class="line"># 创建索引成功后，根据age、phone进行升序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone;</span><br><span class="line"># 创建索引成功后，根据age、phone进行降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age desc, phone desc;</span><br><span class="line"># 根据age升序、phone降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age asc, phone desc;</span><br><span class="line"># 创建索引</span><br><span class="line">create index idx_age_phone_ad on tb_user(age asc,phone desc);</span><br><span class="line"># 创建索引后，根据age、phone进行升序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age, phone;</span><br><span class="line"># 创建索引成功后，根据age、phone进行降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age desc, phone desc;</span><br><span class="line"># 根据age升序、phone降序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age asc, phone desc;</span><br></pre></td></tr></table></figure><ol start="3"><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则(ASC&#x2F;DESC)</li><li>如果不可避免地出现了filesort，大数据量排序时，可以适当增大排序缓冲区sort_buffer_size(默认256k)</li></ol><h4 id="group-by-优化"><a href="#group-by-优化" class="headerlink" title="group by 优化"></a>group by 优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 删除当前的联合索引</span><br><span class="line">drop index idx_user_pro_age_sta on tb_user;</span><br><span class="line"># 执行分组操作，根据profession字段分组</span><br><span class="line">explain select profession,count(*) from tb_user group by profession;</span><br><span class="line">#创建索引</span><br><span class="line">create index idx_user_pro_age_sta on tb_user(profession,age,status);</span><br><span class="line"># 执行分组操作，根据profession字段分组</span><br><span class="line">explain select profession,count(*) from tb_user group by profession;</span><br><span class="line"># 执行分组操作，根据profession字段分组</span><br><span class="line">explain select profession,count(*) from tb_user group by profession,age;</span><br></pre></td></tr></table></figure><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><h4 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h4><p>limit 在大数据量的分页时越往后所需时间越长，因为 limit 底层默认走的是全表扫描。官方给出的优化方案是通过覆盖索引和子查询的方式提高 limit 的分页效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 先拿到id</span><br><span class="line">select id from te_user order by id limit 10, 10;</span><br><span class="line"></span><br><span class="line"># 再查询id对应的行数据，mysql不支持in后跟limit，所以这里使用多表查询</span><br><span class="line">select</span><br><span class="line">    t.*</span><br><span class="line">from</span><br><span class="line">    te_user t,</span><br><span class="line">    (</span><br><span class="line">        select id from te_user order by  id limit 10, 10</span><br><span class="line">    ) tmp</span><br><span class="line">where</span><br><span class="line">    t.id = tmp.id</span><br></pre></td></tr></table></figure><p>上述方案使用了多表查询对 limit 语句进行优化。实际上，如果 limit 语句使用了 where 子句，可以在 where 子句所涉及到的字段添加索引，可以有效提高查询效率。</p><h4 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select count(*) from tb_user;</span><br></pre></td></tr></table></figure><ul><li>MySIAM引擎把一个表的总行数放到了磁盘上，因此执行count(*)的时候会直接返回这个数，效率很高（但是前提是没有 where 条件，即查询的是总数）</li><li>InnoDB引擎在执行count(*)时，需要把数据一行一行地从引擎中读取出来，然后累积计数</li></ul><p><strong>优化思路：自己计数(可以借助于redis这样的数 据库进行,但是如果是带条件的count又比较麻烦了)。</strong></p><p>count()是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是NULL，累计值就加1，否则不加，最后返回累计值</p><p><strong>count的几种用法</strong></p><table><thead><tr><th>count用法</th><th>说明</th></tr></thead><tbody><tr><td>count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是做了专门的优化，不取值，服务层直接按行进行累加</td></tr><tr><td>count(主键)</td><td>InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加(主键不可能为NULL)</td></tr><tr><td>count(字段)</td><td><strong>没有not null约束</strong>：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层后，服务层判断是否为null，不为null，计数累加；<strong>有not null约束</strong>：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行累加</td></tr><tr><td>count(1)</td><td>InnoDB会遍历整张表，但不取值。服务层对于返回的每一层，放一个数字”1“进去，直接按行累加</td></tr></tbody></table><p><mark>根据效率排序，count(字段) &lt; count(主键id) &lt; count(1) ≈ count(*)</mark></p><h4 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update student set no = &#x27;2000100100&#x27; where id = 1; -- 有inidex</span><br><span class="line"></span><br><span class="line">upfate student set no = &#x27;2000100105&#x27; where name &#x27;张三&#x27;; -- 无index</span><br></pre></td></tr></table></figure><p><mark>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁</mark></p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图(view)是一种虚拟存在的表，视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，通俗地讲，视图只保存了查询的SQL逻辑，不保存查询结果，所以我们在创建视图的时候，主要的任务就是创建这条SQL查询语句</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [or replace] view 视图名称[(列名列表)] as select语句 [with[cascaded | local]check option]</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查看创建视图语句</span><br><span class="line">show create view 视图名称;</span><br><span class="line">-- 查看视图数据</span><br><span class="line">select * from 视图名称;</span><br></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 方式一：</span><br><span class="line">create [or replace] view 视图名称[(列名列表)] as select语句 [with[cascaded | local] check option]</span><br><span class="line">-- 方式二：</span><br><span class="line">alter view 视图名称[(列名列表)] as select语句 [with[cascaded | local] check option]</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop view [if exists] 视图名称 [,视图名称]...</span><br></pre></td></tr></table></figure><p>演示示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">create or replace view stu_v_1 as select id,name from student where id &lt;= 10;</span><br><span class="line">-- 查询视图</span><br><span class="line">show create view stu_v_1;</span><br><span class="line">select * from stu_v_1;</span><br><span class="line">select * from stu_v_1 where id &lt; 3;</span><br><span class="line">-- 修改视图</span><br><span class="line">create or replace view stu_v_1 as select id,name,no from student where id &lt;= 10;</span><br><span class="line">alter view stu_v_1 as select id,name from student where id &lt;= 10;</span><br><span class="line">-- 删除视图</span><br><span class="line">drop view if exists stu_v_1;</span><br></pre></td></tr></table></figure><h4 id="检查选项"><a href="#检查选项" class="headerlink" title="检查选项"></a>检查选项</h4><p>当使用WITH CHECK OPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如 插 入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视 图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项： CASCADED 和 LOCAL ，默认值为 CASCADED 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v_1 as select id,name from student where id &lt;= 20 with cascaded check option; -- 检查选项</span><br></pre></td></tr></table></figure><p><strong>CASCADED(级联)</strong></p><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，但是v1视图 创建时未指定检查选项。 则在执行检查时，不仅会检查v2，还会级联检查v2的关联视图v1。</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240310174245373.png"></p><p><strong>LOCAL(本地)</strong></p><p>比如，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，但是v1视图创 建时未指定检查选项。 则在执行检查时，知会检查v2，不会检查v2的关联视图v1</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240310174639914.png"></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>要使视图更新，视图中的行与基础表中的行之间必须存在<mark>一对一的关系</mark>，如果视图中包含以下任何一项，则视图不可更新：</p><ul><li>聚合函数或窗口函数(SUM()、MIN()、MAX()、COUNT()等)</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或 UNION ALL</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>简单</li></ul><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件</p><ul><li>安全</li></ul><p>数据库可以授权，但不能授权到数据库中特定行和特定的列上，通过视图用户只能查询和修改他们所能见到的数据</p><ul><li>数据独立</li></ul><p>视图可以帮助用户屏蔽真实表结构变化带来的影响</p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p><strong>存储过程</strong>是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。 </p><p>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用</p><p>特点：</p><ul><li>封装、复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名称([参数列表])</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">--SQL语句</span><br><span class="line"></span><br><span class="line">end;    </span><br></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 名称 ([参数]);</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#x27;xxx&#x27;; -- 查询指定数据库的存储过程及状态信息</span><br><span class="line">SHOW CREATE PROCEDURE 存储过程名称; -- 查询某个存储过程的定义</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE [IF EXISTS] 存储过程名称;</span><br></pre></td></tr></table></figure><p>注意：在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定的SQL语句的结束符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$ -- 表示SQL语句将以$$符号表示结束符</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><strong>系统变量</strong>是MySQL服务器提供的，不是用户定义的，属于服务层面。分为全局变量(GLOBAL)、会话变量(SESSION)</p><ul><li>查看系统变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show [session | global] variables;  -- 查看所有系统变量</span><br><span class="line">show [session | global] variables like &#x27;......&#x27;;  -- 可以通过like模糊匹配方式查找变量</span><br><span class="line">select @@[session | global] 系统变量名; -- 查看指定变量的值</span><br></pre></td></tr></table></figure><ul><li>设置系统变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set [session | global] 系统变量名 = 值;</span><br><span class="line">set @@[session | global] 系统变量名 = 值;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果没有指定SESSION &#x2F; GLOBAL ，默认是SESSION，会话变量</li><li>mysql服务重新启动后，所设置的全局参数会失效，要想不失效，可以在&#x2F;etc&#x2F;my.cnf中配置</li></ul><p><strong>用户自定义变量</strong> 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用<mark>@变量名</mark>使用就可以，其作用域为当前连接</p><ul><li>赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set @var_name = expr[,@var_name = expr]...;</span><br><span class="line">set @var_name := expr[,@var_name := expr]...;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select @var_name := expr[,@var_name := expr]...;</span><br><span class="line">select 字段名 into @var_name from 表名;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @var_name;</span><br></pre></td></tr></table></figure><p>注意：用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL</p><p><strong>局部变量</strong> 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明，可用于存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN…END块</p><ul><li>声明</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 变量名 变量类型[default...];</span><br></pre></td></tr></table></figure><p>变量的类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等</p><ul><li>赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set 变量名 = 值;</span><br><span class="line">set 变量名 := 值;</span><br><span class="line">select 字段名 into 变量名 from 表名 ...;</span><br></pre></td></tr></table></figure><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF 条件1 THEN </span><br><span class="line">...</span><br><span class="line">ELSE IF 条件2 THEN-- 可选</span><br><span class="line">...</span><br><span class="line">ELSE -- 可选</span><br><span class="line">...</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>IN</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>OUT</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>INOUT</td><td>既可以作为输入参数，也可以作为输出参数</td><td></td></tr></tbody></table><p>用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名称 ([IN / OUT / INOUT 参数名 参数类型])</span><br><span class="line">begin</span><br><span class="line">--SQL语句</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><ul><li>语法一</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case case_value</span><br><span class="line">where when_value1 then statement_list1</span><br><span class="line">[when when_value2] then statement_list2...</span><br><span class="line">[else statement_list]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure><ul><li>语法二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">when search_condition1 then statement_list1</span><br><span class="line">[when search_condition2 then statement_list2]...</span><br><span class="line">[else statement_list]</span><br><span class="line">end case;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><strong>while</strong></p><p>while循环是有条件的循环控制语句，满足条件后，再执行循环体中的SQL语句，具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑‘</span><br><span class="line">while 条件 do</span><br><span class="line">SQL逻辑...</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure><p><strong>repeat</strong></p><p>repeat是有条件的循环控制语句，当满足条件时退出循环，具体语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先执行一次循环，任何判断逻辑是否满足，如果满足，则退出，如果不满足，则继续下一次循环</span><br><span class="line">repeat</span><br><span class="line">SQL逻辑...</span><br><span class="line">until 条件</span><br><span class="line">end repeat;</span><br></pre></td></tr></table></figure><p><strong>loop</strong></p><p>LOOP实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环，LOOP可以配合以下两个语句使用：</p><ul><li>LEAVE：配合循环使用，退出循环</li><li>ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] loop</span><br><span class="line">SQL逻辑...</span><br><span class="line">end loop [end_label];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave label; -- 退出指定标记的循环体</span><br><span class="line">iterate label;  -- 直接进入下一次循环</span><br></pre></td></tr></table></figure><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><p><strong>游标（CURSOR）</strong>是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下：</p><ul><li>声明游标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 游标名称 cursor for 查询语句;</span><br></pre></td></tr></table></figure><ul><li>打开游标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open 游标名称;</span><br></pre></td></tr></table></figure><ul><li>获取游标记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch 游标名称 into 变量[, 变量];</span><br></pre></td></tr></table></figure><ul><li>关闭游标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close 游标名称;</span><br></pre></td></tr></table></figure><p><strong>条件处理程序(Handler)：</strong>可以用来定义在流程控制结构执行过程中遇到的问题时相应的处理步骤，具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE handler_action HANDLER FOR condition_value [, condition_value]... statement ;</span><br><span class="line"></span><br><span class="line">handler_action的取值：</span><br><span class="line">CONTINUE: 继续执行当前程序</span><br><span class="line">EXIT: 终止执行当前程序</span><br><span class="line">condition_value的取值：</span><br><span class="line">SQLSTATE sqlstate_value: 状态码，如 02000</span><br><span class="line">SQLWARNING: 所有以01开头的SQLSTATE代码的简写</span><br><span class="line">NOT FOUND: 所有以02开头的SQLSTATE代码的简写</span><br><span class="line">SQLEXCEPTION: 所有没有被SQLWARNING 或 NOT FOUND捕获的SQLSTATE代码的简写</span><br></pre></td></tr></table></figure><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的，具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION 存储函数名称 ([ 参数列表 ])</span><br><span class="line">RETURNS type [characteristic ...]</span><br><span class="line">BEGIN</span><br><span class="line">-- SQL语句</span><br><span class="line">RETURN ...;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">characteristic说明：</span><br><span class="line">DETERMINISTIC：相同的输入参数总是产生相同的结果</span><br><span class="line">NO SQL：不包含SQL语句</span><br><span class="line">READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 存储函数</span><br><span class="line">-- 计算1累加到n的值</span><br><span class="line">create function fun1(n int)</span><br><span class="line">returns int deterministic</span><br><span class="line">begin</span><br><span class="line">    declare sum int default 0;</span><br><span class="line">    while n&gt;0 do</span><br><span class="line">        set sum := sum + n;</span><br><span class="line">        set n := n - 1;</span><br><span class="line">    end while;</span><br><span class="line">    return sum;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">select fun1(100);</span><br></pre></td></tr></table></figure><p>在mysql8.0版本中binlog默认是开启的，一旦开启了，mysql就要求在定义存储过程时，需要指定 characteristic特性，否则就会报如下错误：</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240311233650982.png"></p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是与表有关的数据库对象，指在insert &#x2F; update &#x2F; delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录、数据校验等操作</p><p>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是类似的，现在触发器还只支持行级触发，不支持语句级触发</p><table><thead><tr><th>触发器类型</th><th>NEW和OLD</th></tr></thead><tbody><tr><td>INSERT型触发器</td><td>NEW表示将要或者已经新增的数据</td></tr><tr><td>UPDATE型触发器</td><td>OLD表示修改之前的数据，NEW表示将要或者已经修改之后的数据</td></tr><tr><td>DELETE型触发器</td><td>OLD表示将要或者已经删除的数据</td></tr></tbody></table><p>语法</p><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger trigger_name</span><br><span class="line">before / after insert / update / delete</span><br><span class="line">on tbl_name for each row  -- 行级触发器</span><br><span class="line">begin</span><br><span class="line">-- triger_stmt;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop trigger [schema_name.] trigger_name; -- 如果没有指定schema_name，默认为当前数据库</span><br></pre></td></tr></table></figure><h4 id="insert触发器"><a href="#insert触发器" class="headerlink" title="insert触发器"></a>insert触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- insert触发器</span><br><span class="line">-- 通过触发器记录tb_user表的数据变更日志，将变更日志插入到日志表user_logs中，包含增加、删除、修改</span><br><span class="line">create table user_logs(</span><br><span class="line">    id int(11) not null auto_increment,</span><br><span class="line">    operation varchar(20) not null comment &#x27;操作类型，insert / update / delete&#x27;,</span><br><span class="line">    operate_time datetime not null comment &#x27;操作时间&#x27;,</span><br><span class="line">    operate_id int(11) not null comment &#x27;操作id&#x27;,</span><br><span class="line">    operate_params varchar(500) comment &#x27;操作参数&#x27;,</span><br><span class="line">    primary key (`id`)  -- 反引号</span><br><span class="line">) engine = innodb default charset = utf8;</span><br><span class="line"></span><br><span class="line">-- 插入数据触发器</span><br><span class="line">create trigger tb_user_insert_trigger</span><br><span class="line">    after insert on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_logs(id,operation,operate_time,operate_id,operate_params) values</span><br><span class="line">    (null,&#x27;insert&#x27;,now(),new.id,concat(&#x27;插入的数据内容为：id = &#x27;,new.id,&#x27; name = &#x27;,new.name,&#x27; phone = &#x27;,new.phone,&#x27;  email = &#x27;,new.email,&#x27; profession = &#x27;,new.profession));</span><br><span class="line">end;</span><br><span class="line">show triggers ;</span><br><span class="line"></span><br><span class="line">-- 删除</span><br><span class="line">drop trigger tb_user_insert_trigger;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into tb_user(id,name,phone,email,profession,age,gender,status,createtime) values</span><br><span class="line">(26,&#x27;张三&#x27;,&#x27;13978542354&#x27;,&#x27;zhangsan@163.com&#x27;,&#x27;软件工程&#x27;,19,&#x27;1&#x27;,&#x27;1&#x27;,now());</span><br></pre></td></tr></table></figure><h4 id="update触发器"><a href="#update触发器" class="headerlink" title="update触发器"></a>update触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 修改数据触发器</span><br><span class="line">create trigger tb_user_update_trigger</span><br><span class="line">    after update on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_logs(id,operation,operate_time,operate_id,operate_params) values</span><br><span class="line">    (null,&#x27;update&#x27;,now(),new.id,</span><br><span class="line">     concat(&#x27;修改前的数据内容为：id = &#x27;,old.id,&#x27; name = &#x27;,old.name,&#x27; phone = &#x27;,old.phone,&#x27;  email = &#x27;,old.email,&#x27; profession = &#x27;,old.profession,</span><br><span class="line">            &#x27;修改后的数据内容为：id = &#x27;,new.id,&#x27; name = &#x27;,new.name,&#x27; phone = &#x27;,new.phone,&#x27;  email = &#x27;,new.email,&#x27; profession = &#x27;,new.profession));</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">show triggers ;</span><br><span class="line"></span><br><span class="line">update tb_user set age = 32 where id = 25;</span><br></pre></td></tr></table></figure><h4 id="delete触发器"><a href="#delete触发器" class="headerlink" title="delete触发器"></a>delete触发器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据触发器</span><br><span class="line">create trigger tb_user_delete_trigger</span><br><span class="line">    after delete on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_logs(id,operation,operate_time,operate_id,operate_params) values</span><br><span class="line">    (null,&#x27;delete&#x27;,now(),old.id,concat(&#x27;删除的数据内容为：id = &#x27;,old.id,&#x27; name = &#x27;,old.name,&#x27; phone = &#x27;,old.phone,&#x27;  email = &#x27;,old.email,&#x27; profession = &#x27;,old.profession));</span><br><span class="line">end;</span><br><span class="line">delete from tb_user where id = 26;</span><br><span class="line">show triggers ;</span><br></pre></td></tr></table></figure><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><strong>锁</strong>是计算机协调多个进程或者线程并发访问某一资源的机制，在数据库中，除传统的计算资源(CPU、RAM、I&#x2F;O)的争用以外，数据也是一种提供许多用户共享的资源，如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问虚性能的一个重要因素，从这个角度上来讲，锁对数据库而言显得尤其重要，也更加复杂。</p><p>MySQL中的锁，按照锁的粒度分为以下三类：</p><ol><li>全局锁：锁定数据库中的所有表</li><li>表级锁：每次操作锁定整张表</li><li>行级锁：每次操作锁住对应的行数据</li></ol><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞，其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240312163035355.png"></p><p>语法</p><ul><li>加全局锁</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tables with read lock ;</span><br></pre></td></tr></table></figure><ul><li>数据备份</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot –p1234 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><ul><li>释放锁</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlock tables ;</span><br></pre></td></tr></table></figure><p>特点</p><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ol><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志(binlog)，会导致主从延迟</li></ol><p>在InnoDB引擎中，我们可以在备份时加入参数 –single-transaction 参数来完成不加锁的一致性数据备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction -uroot –p1234 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><p>表级锁，每次操作锁定整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中</p><p>对于表级锁，主要分为以下三类：</p><ul><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ul><p><strong>表锁</strong></p><p>对于表锁，分为以下两类：</p><ul><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ul><p>语法</p><ul><li>加锁：lock tables 表名… read &#x2F; write</li><li>释放锁：unlock  tables &#x2F; 客户端断开连接</li></ul><p>读锁</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240312170153529.png"></p><p>写锁</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240312170635797.png"></p><p><mark>结论: 读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。</mark></p><p><strong>元数据锁（meta data lock，MDL）</strong></p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上，MDL锁主要作用是维护表元数据的数据一致性，在表上有活动业务时，不可以对元数据进行写入操作。<mark>为了避免DML与DDL产生冲突，保证对写的正确性</mark></p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查时，加MDL读锁（共享），当对表结构进行变更操作的时候，加MDL写锁（排他）。</p><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read &#x2F; write</td><td>SHARED_READ_ONLY &#x2F; SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select、select … lock in share mode</td><td>SHARED_READ<strong>（本会话只能读不能写，其他会话可以读也可以写）</strong></td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert、update、delete、select … for update</td><td>SHARED_WRITE<strong>（所有会话都可以读，但只有本会话可以写）</strong></td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLUSIVE<strong>（本会话可以读也可以写，但是别的会话不能读也不能写）</strong></td><td>与其他的MDL都互斥</td></tr></tbody></table><p>查看元数据锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadata_locks ;</span><br></pre></td></tr></table></figure><p><strong>意向锁</strong></p><p>注意到一个场景：当我们利用<code>update</code>语句对表的数据进行操作时，这个时候系统会自动给表加上一个元数据锁，使得所有会话都可以读，但是只有本会话可以写。假设这个时候有另外一个客户端对这个表执行<code>lock tables xxx read / write</code>操作，欲给这个表上一个表锁，这时会发生锁的冲突。为了避免锁的冲突，客户端需要一行一行检查表的行数据以确定是否有元数据锁，这会使得性能下降。</p><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行 数据是否加锁，使用意向锁来减少表锁的检查。</p><p>意向锁分有：</p><ol><li>意向共享锁（IS）：由语句select … lock in share mode 添加，与表锁读锁（read）兼容，与表锁写锁（write）互斥。</li><li>意向排他锁（IX）：由insert、update、delete、select … for update 添加，与表锁读锁和写锁都互斥，<strong>意向锁之间不会互斥</strong>。</li></ol><p>可以通过以下SQL语句来查看意向锁及行锁的加锁情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from</span><br><span class="line">performance_schema.data_locks;</span><br></pre></td></tr></table></figure><p><mark>注意：一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</mark></p><h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><p>行级锁，每次操作锁住对应的行数据，锁定粒度最小，发生锁冲突的概率最低，并发度最高，应用在InnoDB存储引擎中</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录的锁，对于行级锁，主要分为以下三大类：</p><ul><li>行锁（Record  Lock）：锁定单个行记录的锁，防止其他事务对行进行update和delete。在RC、RR隔离级别下都支持</li><li>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持</li><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap，在RR隔离级别下支持</li></ul><p><strong>行锁</strong></p><p>InnoDB实现了以下两种类型的行锁：</p><ol><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁</li><li>排他锁（X）：允许获取其他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁</li></ol><table><thead><tr><th>当前锁类型（下）&#x2F; 请求锁类型（右）</th><th>S（共享锁）</th><th>X（排他锁）</th></tr></thead><tbody><tr><td>S（共享锁）</td><td>兼容</td><td>冲突</td></tr><tr><td>X（排他锁）</td><td>冲突</td><td>冲突</td></tr></tbody></table><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td><mark>不加任何锁</mark></td><td></td></tr><tr><td>SELECT … LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>拍他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr><tr><td>DELETE …</td><td>排他锁</td><td>自动加锁</td></tr></tbody></table><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜 索和索引扫描，以防止幻读。</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会<mark>升级为表锁</mark>。</li></ul><p>可以通过以下SQL，查看意向锁及行锁的加锁情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from</span><br><span class="line">performance_schema.data_locks;</span><br></pre></td></tr></table></figure><p><strong>间隙锁&amp;临键锁</strong></p><p>默认情况下，InnoDB在REPEATABLE READ事务隔离级别运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读</p><ol><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁</li><li>索引上的范围查询（唯一索引）– 会访问到不满足条件的第一个值为止</li></ol><p><mark>注意：间隙锁唯一目的是防止其他事务插入间隙，间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一个间隙上采用间隙锁</mark></p><h3 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h3><p>逻辑存储结构</p><p>InnoDB的逻辑存储结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240313085644609.png"></p><ol><li><strong>表空间</strong>， 表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在 8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。 </li><li><strong>段</strong> ，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段 （Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。</li><li><strong>区</strong>，表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一 个区中一共有64个连续的页。</li><li><strong>页</strong>，是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性， InnoDB 存储引擎每次从磁盘申请 4-5 个区。</li><li><strong>行</strong>，InnoDB 存储引擎数据是按行进行存放的。在行中默认有两个字段：</li></ol><ul><li>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。</li><li>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个 隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><h5 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h5><p>MySQL5.5版本开始，默认使用InnoDB引擎，它擅长事务处理，具有奔溃恢复特性，在日常开发中使用非常广泛。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240313090552575.png"></p><p>InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能 弥补这两者之间的I&#x2F;O效率的差值，就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁 盘I&#x2F;O。 在InnoDB的缓冲池中不仅缓存了索引页和数据页，还包含了undo页、插入缓存、自适应哈希索引以及 InnoDB的锁信息等等。</p><p><strong>Buffer Pool</strong>：缓冲池是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池中没有数据，则从磁盘中加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page，根据状态，将Page分为三种类型：</p><ul><li>free page：空闲page，未被使用</li><li>clean page：被使用page，数据没有被修改过</li><li>dirty page：脏页，被使用page，数据被修改过，页中数据与磁盘的数据产生了不一致</li></ul><p>在专用服务器上，通常将多达80％的物理内存分配给缓冲池 。参数设置： <code>show variables like &#39;innodb_buffer_pool_size&#39;</code>;</p><p><strong>Change Buffer</strong>：更改缓冲区（针对非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer 中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。</p><p><strong>Change Buffer 存在的意义</strong>：</p><p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新 可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了 ChangeBuffer之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。</p><p><strong>Adaptive Hash Index</strong>：自适应hash索引，用于优化对Buffer Pool 数据的查询。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。</p><p><mark>自适应哈希索引，无需人工干预，是系统根据情况自动完成的。</mark></p><p>参数：<code>adpative_hash_index</code></p><p><strong>Log Buffer</strong>：日志缓冲区，用来保存要写入到磁盘中的log日志数据（red log、undo log），默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中，如果有需要更新、插入或者删除许多行的事务，增加日志缓冲区的大小可以节省磁盘I &#x2F; O。</p><p>参数：</p><p><code>innodb_log_buffer_size</code>：缓冲区大小</p><p><code>innodb_flush_log_trx_commit</code>：日志刷新到磁盘时机</p><ul><li>1：日志在每次事务提交时写入并刷新到磁盘中</li><li>0：每秒将日志写入并刷新到磁盘一次</li><li>2：日志在每次事务提交之后写入，并每秒刷新到磁盘一次</li></ul><h5 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h5><p><strong>System Tablespace</strong>：系统表空间是更改缓冲区的存储区域，如果表是在系统表空间而不是每个表文件或者通用表空间中创建的，它也可能包含表和索引数据。（在MySQL5.x版本中还包含InnoDB数据字典、undolog等）</p><p>参数：<code>innnodb_data_file_path</code></p><p><strong>File-Per-Table Tablespaces</strong>：每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件上</p><p>参数：<code>innodb_file_per_table</code></p><p><strong>General Tablespaces</strong>：通用表空间，需要通过<code>CREATE TABLESPACE</code>语法创建通用表空间，在创建表时，可以指定该表空间</p><ul><li>创建表空间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLESPACE ts_name ADD DATAFILE &#x27;file_name&#x27; ENGINE = engine_name;</span><br></pre></td></tr></table></figure><ul><li>创建表时指定表空间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE xxx ... TABLESPACE ts_name;</span><br></pre></td></tr></table></figure><p><strong>Updo Tablespaces</strong>：撤销表空间，MySQL实例在初始化会自动创建两个默认的undo表空间(初始大小16M)，用于存储undo log 日志</p><p><strong>Temporary Tablespaces</strong>：InnoDB使用会话临时表空间和全局临时表空间，存储用户创建的临时表等数据</p><p><strong>Doublewrite Buffer Files</strong>：双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件 中，便于系统异常时恢复数据。</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240313211647637.png"></p><p><strong>Red Log</strong>：重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所 有修改信息都会存到该日志中, 用于在刷新脏页到磁盘时,发生错误时, 进行数据恢复使用。以循环方式写入重做日志文件，涉及两个文件：</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240313211826679.png"></p><h5 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h5><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240313211907224.png"></p><p>在InnoDB的后台线程中，分为4类，分别是：Master Thread 、IO Thread、Purge Thread、 Page Cleaner Thread。</p><p><strong>Master Thread</strong></p><p>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓冲、undo页的回收</p><p><strong>IO Thread</strong></p><p>在InnoDB存储引擎中大量使用了AIO请求，这样可以极大地提高数据库的性能，而<code>IO Thread </code>主要负责这些IO请求的回调</p><table><thead><tr><th>线程类型</th><th>默认个数</th><th>职责</th></tr></thead><tbody><tr><td>Read thread</td><td>4</td><td>负责读操作</td></tr><tr><td>Write thread</td><td>4</td><td>负责写操作</td></tr><tr><td>Log thread</td><td>1</td><td>负责将日志缓冲区刷新到磁盘</td></tr><tr><td>Insert buffer thread</td><td>1</td><td>负责将写缓冲区内容刷新到磁盘</td></tr></tbody></table><p>我们可以通过以下的这条指令，查看到InnoDB的状态信息，其中就包含IO Thread信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engine innodb status ;</span><br></pre></td></tr></table></figure><p><strong>Purge Thread</strong></p><p>主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。</p><p><strong>Page Cleaner Thread</strong></p><p>协助Master Thread 刷新脏页到磁盘的线程，它可以减轻Masrter Thread 的工作压力，减少阻塞</p><h4 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h4><p><strong>事务</strong> 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或者撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p><strong>事务四大特性(ACID)</strong></p><ul><li><p>原子性(Atomicty)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</p></li><li><p>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</p></li><li><p>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响下的独立环境下运行</p></li><li><p>持久性(Durability)：事务一旦提交或者回滚，它对数据库中的数据的改变就是永久的</p></li></ul><p>而对于这四大特性，实际上分为两个部分。 其中的原子性、一致性、持久化，实际上是由InnoDB中的两份日志来保证的，一份是<code>redo log</code>日志，一份是<code>undo log</code>日志。 而持久性是通过数据库的锁， 加上<code>MVCC</code>来保证的。</p><h5 id="red-log"><a href="#red-log" class="headerlink" title="red log"></a><strong>red log</strong></h5><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性</p><p>该日志文件由两部分组成：重做缓冲日志（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，后者是在磁盘中。当事务提交之后会把所有修改信息都存到该日志中，再用于刷新脏页到磁盘，发生错误时，进行数据恢复使用</p><p>在InnoDB引擎中的内存结构中，主要的内存区域就是缓冲池，在缓冲池中缓存了很多的数据页。 当我们在一个事务中，执行多个增删改的操作时，InnoDB引擎会先操作缓冲池中的数据，如果缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载出来，存放在缓冲区中，然后将缓冲池中的数据修改，修改后的数据页我们称为脏页。 而脏页则会在一定的时机，通过后台线程刷新到磁盘中，从而保证缓冲区与磁盘的数据一致。 而缓冲区的脏页数据并不是实时刷新的，而是一段时间之后将缓冲区的数据刷新到磁盘中，假如刷新到磁盘的过程出错了，而提示给用户事务提交成功，而数据却没有持久化下来，这就出现问题了，没有保证事务的持久性。</p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240313214159384.png"></p><p>有了<code>redo log</code>之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在<code>redo log buffer</code>中。在事务提交时，会将<code>redo log buffer</code>中的数据刷新到<code>redo log</code>磁盘文件中。 过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于<code>redo log</code>进行数据 恢复，这样就保证了事务的持久性。 而如果脏页成功刷新到磁盘 或 或者涉及到的数据已经落盘，此时<code>redo log</code>就没有作用了，就可以删除了，所以存在的两个<code>redo log</code>文件是循环写的。</p><p>在业务操作中，我们操作数据一般都是<mark>随机读写磁盘的，而不是顺序读写磁盘。</mark> 而<code>redo log</code>在 往磁盘文件中写入数据，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。 这种先写日志的方式，称之为 WAL（Write-Ahead Logging）。</p><h5 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h5><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : <mark>提供回滚</mark>(保证事务的原子性) 和<mark> MVCC</mark>(多版本并发控制) 。</p><p>undo log和redo log记录物理日志不一样，它是<mark>逻辑日志</mark>。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的 update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p><p> <strong>Undo log销毁</strong>：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些 日志可能还用于MVCC。   </p><p><strong>Undo log存储</strong>：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log segment。</p><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><ul><li>当前读</li></ul><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁，对于我们日常的操作，如：select … lock in share mode （共享锁），select … for update、update、insert、delete（排他锁）都是一种当前读。</p><ul><li>快照读</li></ul><p>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读</p><ul><li>Read Committed：每次select，都生成一个快照读</li><li>Repeatable Read：开始事务后第一个select语句才是快照读的地方</li><li>Serializable：快照读会退化为当前读</li></ul><p><strong>MVCC</strong>，全称<code>Multi-Version Concurrency Control</code>，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、<code>readView</code>。 </p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><ul><li>记录当中的隐藏字段</li></ul><table><thead><tr><th>隐藏字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID</td></tr><tr><td>DB_ROLL_PTR</td><td>回滚指针，指向这条记录的上一个版本，用于配合<code>undo log</code>，指向上一个版本</td></tr><tr><td>DB_ROW_ID</td><td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td></tr></tbody></table><p><code>idb2sdi 表空间文件名</code>：查看表空间文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibd2sdi 表名.ibd</span><br></pre></td></tr></table></figure><ul><li>undo log</li></ul><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志，当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除，而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会被立即删除</p><ul><li>undo log版本链</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240415222158144.png" alt="image-20240415222158144"></p><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</p><ul><li>readview</li></ul><p>ReadView（读视图）是<strong>快照读</strong>SQL执行时MVCC提取数据的依据，记录并维护当前活跃的事务（未提交的）id。</p><p>ReadView包含了四个核心字段：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务id集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务id</td></tr><tr><td>max_trx_id</td><td>预分配事务id，当前最大事务id1（因为事务id是自增的）</td></tr><tr><td>creator_trx_id</td><td>ReadView创建者的事务id</td></tr></tbody></table><p><mark>版本链数据访问规则</mark></p><p>trx_id：代表的是当前事务ID。</p><ol><li><p>trx_id &#x3D;&#x3D; creator_trx_id 可以访问当前版本→说明数据是当前这个事务更改的</p></li><li><p>trx_id &lt; min_trx_id可以访问当前版本→说明数据已经提交了</p></li><li><p>trx_id &gt; max_trx_id   不可以访问该版本    →    说明当前事务是在ReadView生成之后才开始</p></li><li><p>min_trx_id &lt;&#x3D; trx_id &lt;&#x3D; max_trx_id  如果trx_id不在m_ids中是可以访问该版本的   →   说明数据已经提交了</p></li></ol><p>不同的隔离级别，生成ReadView的时机不同：</p><ul><li>READ COMMITTED：在事务中每一次执行快照读时生成ReadView</li><li>REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView</li></ul><p><mark>RC隔离级别下，在事务中的每一次执行快照读时生成ReadView</mark></p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240416204531685.png" alt="image-20240416204531685"></p><p><mark>RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView</mark></p><p><img src="https://cdn.jsdelivr.net/gh/hnuyl16/images/image-20240416204519133.png" alt="image-20240416204519133"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2024/02/04/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2024/02/04/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><p>对于常见的字符串匹配问题，在n个字符中查找某个字符串。</p><p>若采用暴力方法，需要逐一匹配每个字符串，时间复杂度为O(mn)，其中m是字符串的平均长度。</p><p>字典树就是模拟查字典操作的数据结构，例如查找dog单词，第一次查找字母d，第二次查找字母o，第三次查找字母g。这样查找每一个单词，查找次数最多只需要这个单词的字母个数。</p><ul><li>时间复杂度：插入和查找的时间复杂度都是O(m)，其中m是待处理字符串的长度。</li><li>空间复杂度：有公共前缀的单词只需要存一次公共前缀，节省了空间。</li></ul><p>字典树应用：</p><ul><li>字符串检索</li><li>词频统计：统计一个单词出现了多少次</li><li>字符串排序：在插入时，在树的平级按字母表的顺序插入。字典树建好之后，用先序遍历就得到了字典树的顺序。</li><li>前缀匹配：字典树是按照公共前缀来建树的，适合用于搜索提示。</li></ul><p>题目描述：</p><p>​Ignatius最近遇到一个难题,老师交给他很多单词(只有小写字母组成,不会有重复的单词出现),现在老师要他统计出以某个字符串为前缀的单词数量(单词本身也是自己的前缀).</p><p>Input</p><p>输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是老师交给Ignatius统计的单词,一个空行代表单词表的结束.第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串.</p><p>注意:本题只有一组测试数据,处理到文件结束.</p><p>Output</p><p>对于每个提问,给出以该字符串为前缀的单词的数量.</p><p>字典树实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;<span class="comment">//字典树定义</span></span><br><span class="line">Trie* next[<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> num;<span class="comment">//以当前字符串为前缀的单词的数量</span></span><br><span class="line"><span class="built_in">Trie</span>()<span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++) &#123;</span><br><span class="line">next[i]=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Trie root;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;<span class="comment">//将字符串插入到字典树中</span></span><br><span class="line">Trie *p=&amp; root;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;<span class="comment">//遍历每一个字符</span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">NULL</span>)<span class="comment">//如果该字符没有对应结点</span></span><br><span class="line">p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> Trie;<span class="comment">//创建一个</span></span><br><span class="line">p=p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">p-&gt;num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;<span class="comment">//返回以字符串为前缀的单词的数量</span></span><br><span class="line">Trie *p=&amp; root;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;str[i];i++)&#123;<span class="comment">//在字典树中找到该单词的结尾位置</span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p=p-&gt;next[str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">gets</span>(str))&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strlen</span>(str)) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">insert</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">gets</span>(str)) cout&lt;&lt;<span class="built_in">find</span>(str)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>kmp是单模匹配算法，即在一个长度为n的文本串去查找一个长度为m的模式串，它的时间复杂度为O(m+n)。</p><p>问题描述：一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p><p>Input</p><p>输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。</p><p>Output</p><p>输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> str[maxn],pattern[maxn];</span><br><span class="line"><span class="type">int</span> next[maxn];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getFail</span><span class="params">(<span class="type">char</span> *p,<span class="type">int</span> plen)</span></span>&#123;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;next[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//预处理next[],用于在失配的情况下得到回溯j的位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;plen;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=next[i];</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j])j=next[j];</span><br><span class="line">next[i+<span class="number">1</span>]=(p[i]==p[j])?j+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">char</span> *s,<span class="type">char</span> *p)</span></span>&#123;<span class="comment">//在s中找p</span></span><br><span class="line"><span class="type">int</span> last=<span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> slen=<span class="built_in">strlen</span>(s),plen=<span class="built_in">strlen</span>(p);</span><br><span class="line"><span class="built_in">getFail</span>(p,plen);<span class="comment">//预计算next[]数组</span></span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;slen;i++)&#123;<span class="comment">//匹配s和p的每个字符</span></span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j])j=next[j];<span class="comment">//失配了，用next[]找j的回溯位置</span></span><br><span class="line"><span class="keyword">if</span>(s[i]==p[j])j++;<span class="comment">//当前位置的字符匹配，继续</span></span><br><span class="line"><span class="keyword">if</span>(j==plen)&#123;<span class="comment">//完全匹配</span></span><br><span class="line"><span class="comment">//这个匹配，在s中的起点是i+1-plen,末尾是i，如果有需要可以打印</span></span><br><span class="line"><span class="comment">//prinf(&quot;at location = %d,%s\n&quot;,i+1-plen,&amp;s[i+1-plen]);</span></span><br><span class="line"><span class="comment">//下面是与本题相关工作</span></span><br><span class="line"><span class="keyword">if</span>(i-last&gt;=plen)&#123;<span class="comment">//判断新的匹配与上一个匹配是否能分开</span></span><br><span class="line">cnt++;</span><br><span class="line">last=i;<span class="comment">//last指向上一次匹配的末尾位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str))&#123;<span class="comment">//读串</span></span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;#&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,pattern);</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">kmp</span>(str,pattern);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图形可视化编程</title>
      <link href="/2024/02/04/Java%E5%9B%BE%E5%BD%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/02/04/Java%E5%9B%BE%E5%BD%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA图形化界面编程"><a href="#JAVA图形化界面编程" class="headerlink" title="JAVA图形化界面编程"></a>JAVA图形化界面编程</h1><h2 id="一、AWT编程"><a href="#一、AWT编程" class="headerlink" title="一、AWT编程"></a>一、AWT编程</h2><p>AWT是“抽象窗口工具集”，它为Java应用程序提供了基本的图形组件，AWT是窗口框架，它从不同平台的窗口系统中抽取共同组件，当程序运行时，将这些组件的创建和动作委托给程序所在的运行平台。简而言之，当使用AWT编写图形界面应用时，程序仅指定了界面组件的位置和行为，并未实现真正的实现，Java调用操作系统本地的图形界面来创建和平台一致的对等体。</p><p>AWT继承体系：</p><p>AWT编程中有两个基类：Component和MenuComponent。</p><ul><li>Component: 代表一个能以图形化方式显示出来，并可以与用户交互的对象，例如Button代表一个按钮，TexField代表一个文本框等；</li><li>MenuComponent: 代表图形界面的菜单组件，包括MenuBar(菜单条)、MenuItem(菜单项)等子类。</li></ul><p>其中Container是一种特殊的Component，它代表一种容器，可以盛装普通的Component.</p><p>AWT还有一个非常重要的接口叫做LayoutManager,如果一个容器中有多个组件，那么容器就需要使用LayoutManager来管理这些组件的布局方式。</p><h3 id="1-Container容器"><a href="#1-Container容器" class="headerlink" title="1.Container容器"></a>1.Container容器</h3><p>Container容器继承体系</p><ul><li>Window是可以独立存在的顶级窗口，默认使用BorderLayout管理其内部组件布局；</li><li>Panel可以容纳其他组件，但不能独立存在，它必须内嵌其他容器使用，默认使用FlowLayout管理其内部组件布局；</li><li>ScrollPane是一个带滚动条的容器，它也不能独立存在，默认使用BorderLayout管理其内部组件布局；</li></ul><p>常见API</p><p>Component作为基类，提供了如下常用的方法来设置组件的大小，位置，可见性等。</p><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>setLocation(int x,int y)</td><td>设置组件的位置</td></tr><tr><td>setSize(int width,int height)</td><td>设置组件的大小</td></tr><tr><td>setBounds(int x,int y,int width,int height)</td><td>同时设置组件的位置，大小</td></tr><tr><td>setVisible(Boolean b)</td><td>设置该组件的可见性</td></tr></tbody></table><p>Container作为容器根类，提供了如下方法来访问容器中的组件</p><table><thead><tr><th>方法名</th><th>方法说明</th></tr></thead><tbody><tr><td>Component add(Component comp)</td><td>向容器中添加其他组件（该组件既可以是普通组件，也可以是容器）</td></tr><tr><td>Component getComponentAt(int x,int y)</td><td>返回指定点的组件</td></tr><tr><td>int getComponentCount()</td><td>返回该容器内组件的数量</td></tr><tr><td>Component[] getComponents()</td><td>返回该容器内的所有组件</td></tr></tbody></table><p>演示1(Window)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个窗口对象 指定窗口的位置，大小(单位是像素）  设置窗口对象可见</span></span><br><span class="line">       Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是Window测试窗口:&quot;</span>);</span><br><span class="line">       frame.setLocation(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">       frame.setSize(<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">       frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示2（Panel):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个Window对象，Panel对象以及其他的容器都不能独立存在，必须依附于Window存在</span></span><br><span class="line">        <span class="comment">//1.创建一个Panel对象</span></span><br><span class="line">        <span class="comment">//2.创建一个文本框和一个按钮，并且把他们放入到Panel容器中</span></span><br><span class="line">        <span class="comment">//3.把panel放入到Window中</span></span><br><span class="line">        <span class="comment">//4.设置Window的位置 大小</span></span><br><span class="line">        <span class="comment">//5.设置Window可见</span></span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示Panel:&quot;</span>);</span><br><span class="line">        Panel p=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;这是一个测试文本&quot;</span>));</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是一个测试按钮&quot;</span>));</span><br><span class="line">        frame.add(p);</span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>演示3（ScrollPane):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示ScrollPane:&quot;</span>);</span><br><span class="line">        ScrollPane s=<span class="keyword">new</span> <span class="title class_">ScrollPane</span>(ScrollPane.SCROLLBARS_ALWAYS);<span class="comment">//创建ScrollPane对象 滚动条</span></span><br><span class="line">        s.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;这是一个测试文本&quot;</span>));</span><br><span class="line">        s.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;这是一个测试按钮&quot;</span>));</span><br><span class="line">        frame.add(s);</span><br><span class="line">        frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Layoutmanager管理器"><a href="#2-Layoutmanager管理器" class="headerlink" title="2.Layoutmanager管理器"></a>2.Layoutmanager管理器</h3><p>LayoutManager布局管理器，可以根据运行平台来自动调整组件大小，程序员不用再手动设置组件的大小和位置了，只需要为容器选择合适的布局管理器即可。</p><p>1.FlowLayout</p><p>​在flowLayout布局管理器中，组件像水流一样向某方向流动（排列），遇到障碍（边界）就折回。重头开始排列。在默认的情况下，FlowLayout布局管理器从左向右排列所有组件，遇到边界就会折回下一行重新开始。</p><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>FlowLayout()</td><td>使用默认的对齐格式以及默认的垂直间距、水平间距创建FlowLayout布局管理器。</td></tr><tr><td>FlowLayout(int align)</td><td>使用指定的对齐格式以及默认的垂直间距、水平间距创建FlowLayout布局管理器。</td></tr><tr><td>FlowLayout(int align,int hgap,int vgap)</td><td>使用指定的对齐格式以及指定的垂直间距、水平间距创建FlowLayout布局管理器。</td></tr></tbody></table><p>FlowLayout中组件的排列方向（从左到右、从右到左，从中间到两边等等），该参数应该使用FlowLayout类的静态常量：</p><p>FlowLayout.LEET、FlowLayout.CENTER、FlowLayout.RIGHT，默认是左对齐。</p><p>FlowLayout中组件中间间距通过整数设置，单位是像素，默认是5个像素。</p><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示FlowLayout:&quot;</span>);</span><br><span class="line">        <span class="comment">//1.通过setLayout方法设置容器的布局管理器</span></span><br><span class="line">        <span class="comment">//frame.setLayout(new FlowLayout(FlowLayout.LEADING,20,30));</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.CENTER,<span class="number">40</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="comment">//2.添加多个按钮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.设置最佳大小，pack方法</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.BorderLayout</p><p>​Borderlayout将容器分为EAST、SOUTH、WEST、NORTH、CENTER五个区域，普通组件可以被放置在这5个区域的任意一个中。</p><p>当改变使用BorderLayout的容器大小时，NORTH、SOUTH、和CENTER区域水平调整，而EAST、WEST和CENTER区域垂直调整。使用BorderLayout有如下两个注意点：</p><ul><li>当向BorderLayout布局管理器的容器中添加组件时，需要指定添加到哪个区域中。如果没有指定添加到哪个区域，则默认添加到中间区域中；</li><li>如果向同一个区域中添加多个组件时，后放入的组件会覆盖先放入的组件；</li></ul><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>BorderLayout()</td><td>使用默认的水平间距、垂直间距创建BorderLayout布局管理器</td></tr><tr><td>BorderLayout(int hgap,int vgap)</td><td>使用指定的水平间距、垂直间距创建BorderLayout布局管理器</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示   BorderLayout:&quot;</span>);</span><br><span class="line">        <span class="comment">//1.指定Frame对象的布局管理器为BorderLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">30</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//2.往Frame指定东西南北各添加一个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;北侧按钮&quot;</span>), BorderLayout.NORTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;南侧按钮&quot;</span>), BorderLayout.SOUTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;东侧按钮&quot;</span>), BorderLayout.EAST);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;西侧按钮&quot;</span>), BorderLayout.WEST);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>), BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//3.设置最佳大小，pack方法</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不往某个区域放入组件，那么该区域不会空白出来，而是会被其他区域占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;演示   BorderLayout:&quot;</span>);</span><br><span class="line">        <span class="comment">//1.指定Frame对象的布局管理器为BorderLayout</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>(<span class="number">30</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//2.往Frame指定东西南北各添加一个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;北侧按钮&quot;</span>), BorderLayout.NORTH);</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;南侧按钮&quot;</span>), BorderLayout.SOUTH);</span><br><span class="line">        <span class="comment">//frame.add(new Button(&quot;东侧按钮&quot;), BorderLayout.EAST);</span></span><br><span class="line">       <span class="comment">// frame.add(new Button(&quot;西侧按钮&quot;), BorderLayout.WEST);</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>), BorderLayout.CENTER);</span><br><span class="line">        Panel p=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;中间按钮&quot;</span>));</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;测试文本框&quot;</span>));</span><br><span class="line">        frame.add(p);</span><br><span class="line">        <span class="comment">//3.设置最佳大小，pack方法</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.GirdLayout</p><p>​GirdLayout布局管理器将容器分割成纵横线分隔的网格，每个网格所占的区域大小相同，当向使用GirdLayout布局管理器中的容器中添加组件时，默认从左至右、从上至下依次添加到每个网格中，与FlowLayout不同的是，</p><p>放置在GirdLayout布局管理器中的各组件的大小由组件所处的区域决定(每个组件将自动占满整个区域)。</p><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>GirdLayout(int rows,int cols)</td><td>采用指定的行数和列数，以及默认的横向间距、纵向间距将容器分割成多个网格</td></tr><tr><td>GirdLayout(int rows,int cols,int hgap,int vgap)</td><td>采用指定的行数和列数，以及指定的横向间距、纵向间距将容器分割成多个网格</td></tr></tbody></table><p>案例：</p><p>​使用Frame+Panel，配合FlowLayout和GirdLayout完成一个计算器效果。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;计算器&quot;</span>);</span><br><span class="line">        <span class="comment">//1.创建一个Panel对象，里面存放一个TextField组件</span></span><br><span class="line">        Panel p=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>));</span><br><span class="line">        <span class="comment">//2.把当前这个Panel添加到frame的北边区域</span></span><br><span class="line">        frame.add(p,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建一个Panel对象，并且设置它的布局管理器为GridLayout</span></span><br><span class="line">        Panel p2=<span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        p2.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.往Panel中添加内容</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(i+<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;+&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.把当前Panel添加到frame中</span></span><br><span class="line">        frame.add(p2);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.GirdBagLayout</p><p>​GirdBagLayout布局管理器的功能最强大，但也是最复杂，与GirdLayout布局管理器不同的是，在GirdBagLayout布局管理器中，一个组件可以跨越一个或者多个网格，并可以设置各网格的大小互不相同，从而增强了布局的灵活性。当窗口的大小发生变化时，GirdBagLayout布局管理器可以准确控制窗口各部分的拉伸。</p><p>由于在GirdBagLayout布局中，每个组件可以占用多个网络，此时，我们往容器中添加组件时，就需要具体的控制每个组件占用多少网格，java提供的GridBagConstains类，与特定的组件绑定，可以完成具体大小和跨越性的设置</p><p>5.CardLayout</p><p>​ 以时间而非空间来管理它里面的组件，它将加入到的容器所有的组件看成一叠卡片，每个卡片其实就是一个组件，每次只有最上面的Component才可见。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>CardLayout()</td><td>创建默认的CardLayout布局管理器</td></tr><tr><td>CardLayout(int hgap,int vgap)</td><td>通过指定卡片与容器左右边界的间距C hgap)、上下边界Cvgap)的间距来创建CardLayout布局管理器</td></tr><tr><td>first(Container target)</td><td>显示target容器中的第一张卡片</td></tr><tr><td>last(Container target)</td><td>显示target容器中的最后一张卡片</td></tr><tr><td>previous(Container target)</td><td>显示target容器中的前一张卡片</td></tr><tr><td>next(Container target)</td><td>显示target容器中的后一张卡片</td></tr><tr><td>show(Container target,String name)</td><td>显示target容器中指定名字的卡片</td></tr></tbody></table><p>案例：</p><p>​使用Frame和Panel以及CardLayout完成下图中的效果，点击底部按钮，切换卡片</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;CardLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个Panel储存多个卡片</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="comment">//创建CardLayout对象，并且把该对象设置到容器中</span></span><br><span class="line">        <span class="type">CardLayout</span> <span class="variable">cardLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardLayout</span>();</span><br><span class="line">        panel.setLayout(cardLayout);</span><br><span class="line">        <span class="comment">//往panel中储存多个组件</span></span><br><span class="line">        String[] names = &#123;<span class="string">&quot;第一张&quot;</span>, <span class="string">&quot;第二张&quot;</span>, <span class="string">&quot;第三张&quot;</span>, <span class="string">&quot;第四张&quot;</span>, <span class="string">&quot;第五张&quot;</span>,&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            panel.add(names[i], <span class="keyword">new</span> <span class="title class_">Button</span>(names[i]));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把panel放到frame中间区域</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//船舰另外一个panel存放底部按钮组件</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panelButton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="comment">//创建5个按钮组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;上一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;下一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;第一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;最后一张&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;第三张&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个事件监听器对象，用于监听按钮</span></span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">actionListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//获取按钮对象</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">actionCommand</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">switch</span> (actionCommand) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;上一张&quot;</span>:</span><br><span class="line">                        cardLayout.previous(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;下一张&quot;</span>:</span><br><span class="line">                        cardLayout.next(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;第一张&quot;</span>:</span><br><span class="line">                        cardLayout.first(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;最后一张&quot;</span>:</span><br><span class="line">                        cardLayout.last(panel);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;第三张&quot;</span>:</span><br><span class="line">                        cardLayout.show(panel, <span class="string">&quot;第三张&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//把当前这个事件监听器和多个按钮绑定到一起</span></span><br><span class="line">        b1.addActionListener(actionListener);</span><br><span class="line">        b2.addActionListener(actionListener);</span><br><span class="line">        b3.addActionListener(actionListener);</span><br><span class="line">        b4.addActionListener(actionListener);</span><br><span class="line">        b5.addActionListener(actionListener);</span><br><span class="line">        <span class="comment">//把按钮添加到容器中</span></span><br><span class="line">        panelButton.add(b1);</span><br><span class="line">        panelButton.add(b2);</span><br><span class="line">        panelButton.add(b3);</span><br><span class="line">        panelButton.add(b4);</span><br><span class="line">        panelButton.add(b5);</span><br><span class="line">        <span class="comment">//把panelButton存放的frame的那边区域</span></span><br><span class="line">        frame.add(panelButton, BorderLayout.SOUTH);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.BoxLayout</p><p>为了简化开发，Swing引入了一个新的布局管理器：BoxLayout。BoxLayout可以在水平和垂直两个方向上摆放GUI组件，BoxLayout提供了如下一个简单的构造器：</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>BoxLayout(Container target,int axis)</td><td>指定创建基于target容器的BoxLayout布局管理器，该布局管理器里的组件按照axis方向排列，其中axis有BoxLayout.X_AXIS(横向)和BoxLayout.Y.AXIS(纵向)两个方向。</td></tr></tbody></table><p>案例1：</p><p>​使用Frame和BoxLayout完成下图效果</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//创建BoxLayout对象，该对象的组件垂直存放</span></span><br><span class="line"><span class="comment">//        BoxLayout boxLayout = new BoxLayout(frame,BoxLayout.X_AXIS);</span></span><br><span class="line">        <span class="type">BoxLayout</span> <span class="variable">boxLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoxLayout</span>(frame,BoxLayout.Y_AXIS);</span><br><span class="line">        <span class="comment">//把boxlayout对象设置给frame</span></span><br><span class="line">        frame.setLayout(boxLayout);</span><br><span class="line">        <span class="comment">//创建两个按钮组件</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;buttonOne&quot;</span>));</span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;buttonTwo&quot;</span>));</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​ 在java.swing包中，提供了一个新的容器Box，该容器的默认布局管理器就是BoxLayout，大多数情况下使用Box容器去容纳多个GUI组件，然后把Box容器作为一个组件，添加到其他容器中，从而形成整体窗口布局。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>static Box createHorizontalBox()</td><td>创建一个水平排列组件的Box容器</td></tr><tr><td>static Box createVerticalBox()</td><td>创建一个垂直排列组件的Box容器</td></tr></tbody></table><p>案例2：</p><p>​使用Frame和Box,完成下图效果。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxLayoutDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Box水平排列组件的容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">horizontalBox</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonOne&quot;</span>));</span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonTwo&quot;</span>));</span><br><span class="line">        <span class="comment">//创建Box垂直排列组件的容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">verticalBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮</span></span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonOne&quot;</span>));</span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonTwo&quot;</span>));</span><br><span class="line">        <span class="comment">//把容器添加到frame中</span></span><br><span class="line">        frame.add(horizontalBox,BorderLayout.NORTH);</span><br><span class="line">        frame.add(verticalBox);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ Box实现间隔组件</p><table><thead><tr><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>static Component createHorizontalGlue()</td><td>创建一条水平Glue(可在两个方向上同时拉伸的间距)</td></tr><tr><td>static Component createVerticalGlue()</td><td>创建一条垂直Glue(可在两个方向上同时拉伸的间距)</td></tr><tr><td>static Component createHorizontalStrut(int width)</td><td>创建一条指定宽度(宽度固定了，不能拉伸)的水平Strut(可在垂直方向上拉伸的间距)</td></tr><tr><td>static Component createVerticalStrut(int height)</td><td>创建一条指定高度(高度固定了，不能拉伸)的垂直Strut(可在水平方向上拉伸的间距)</td></tr></tbody></table><p>案例3：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BordLayoutDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;BoxLayout&quot;</span>);</span><br><span class="line">        <span class="comment">//船舰水平排列的Box容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">horizontalBox</span> <span class="operator">=</span> Box.createHorizontalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮和间隔</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonOne&quot;</span>));</span><br><span class="line">        horizontalBox.add(Box.createHorizontalGlue());<span class="comment">//默认间隔</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonTwo&quot;</span>));</span><br><span class="line">        horizontalBox.add(Box.createHorizontalStrut(<span class="number">30</span>));<span class="comment">//指定间隔</span></span><br><span class="line">        horizontalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;HButtonThree&quot;</span>));</span><br><span class="line">        <span class="comment">//创建垂直排列的容器</span></span><br><span class="line">        <span class="type">Box</span> <span class="variable">verticalBox</span> <span class="operator">=</span> Box.createVerticalBox();</span><br><span class="line">        <span class="comment">//往容器中添加按钮和间隔</span></span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonOne&quot;</span>));</span><br><span class="line">        verticalBox.add(Box.createVerticalGlue());</span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonTwo&quot;</span>));</span><br><span class="line">        verticalBox.add(Box.createVerticalStrut(<span class="number">30</span>));</span><br><span class="line">        verticalBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;VButtonThree&quot;</span>));</span><br><span class="line">        <span class="comment">//把box容器添加到frame中</span></span><br><span class="line">        frame.add(horizontalBox,BorderLayout.NORTH);</span><br><span class="line">        frame.add(verticalBox);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-常用组件"><a href="#3-常用组件" class="headerlink" title="3.常用组件"></a>3.常用组件</h3><h4 id="3-1基本组件"><a href="#3-1基本组件" class="headerlink" title="3.1基本组件"></a>3.1基本组件</h4><table><thead><tr><th>组件名</th><th>功能</th></tr></thead><tbody><tr><td>Button</td><td>按钮</td></tr><tr><td>Canvas</td><td>用于绘画的画布</td></tr><tr><td>Checkbox</td><td>复选框组件(也可当作单选框组件使用)</td></tr><tr><td>CheckboxGroup</td><td>用于将多个Checkbox组件合成一组，一组Checkbox组件中将只有一个可以被选中，即全部变成单选框组件</td></tr><tr><td>Choice</td><td>下拉选择框</td></tr><tr><td>Frame</td><td>窗口，在GUI程序里通过该类创建窗口</td></tr><tr><td>Label</td><td>标签类，用于放置提示性文本</td></tr><tr><td>List</td><td>列表框组件，可以添加多项条目</td></tr><tr><td>Panel</td><td>不能单独存在基本容器类，必须放置到其他容器中</td></tr><tr><td>Scrollbar</td><td>滑动条组件，如果需要用户输入某个范围中的值，就可以使用滑动条组件，比如调色板中设置RGB的三个值所用的滑动条。当创建一个滑动条时，必须指定它的方向、初始值、滑块的大小、最小值和最大值。</td></tr><tr><td>ScrollPane</td><td>带水平和垂直滚动条的容器组件</td></tr><tr><td>TextArea</td><td>多行文本域</td></tr><tr><td>TextField</td><td>单行文本框</td></tr></tbody></table><p>案例：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicComponentDemo</span> &#123;</span><br><span class="line">    Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试组件&quot;</span>);</span><br><span class="line">    TextArea ta=<span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="number">5</span>,<span class="number">20</span>);</span><br><span class="line">    Choice colorChoice=<span class="keyword">new</span> <span class="title class_">Choice</span>();</span><br><span class="line">    CheckboxGroup cbg=<span class="keyword">new</span> <span class="title class_">CheckboxGroup</span>();</span><br><span class="line">    Checkbox male=<span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;男&quot;</span>,cbg,<span class="literal">true</span>);</span><br><span class="line">    Checkbox female=<span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;女&quot;</span>,cbg,<span class="literal">false</span>);</span><br><span class="line">    Checkbox isMarried=<span class="keyword">new</span> <span class="title class_">Checkbox</span>(<span class="string">&quot;是否已婚&quot;</span>);</span><br><span class="line"></span><br><span class="line">    TextField tf=<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">50</span>);</span><br><span class="line">    Button ok=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    List colorList=<span class="keyword">new</span> <span class="title class_">List</span>(<span class="number">6</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装界面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装底部</span></span><br><span class="line">        Box bBox= Box.createHorizontalBox();</span><br><span class="line">        bBox.add(tf);</span><br><span class="line">        bBox.add(ok);</span><br><span class="line">        frame.add(bBox,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装选择部分</span></span><br><span class="line">       colorChoice.add(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">       colorChoice.add(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">       colorChoice.add(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">        Box cBox=Box.createHorizontalBox();</span><br><span class="line">        cBox.add(colorList);</span><br><span class="line">        cBox.add(male);</span><br><span class="line">        cBox.add(female);</span><br><span class="line">        cBox.add(isMarried);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装文本域和选择部分</span></span><br><span class="line">        Box topLeft=Box.createHorizontalBox();</span><br><span class="line">        topLeft.add(ta);</span><br><span class="line">        topLeft.add(cBox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装顶部左边和列表框</span></span><br><span class="line">        colorList.add(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        colorList.add(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        colorList.add(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">        Box top=Box.createHorizontalBox();</span><br><span class="line">        top.add(topLeft);</span><br><span class="line">        top.add(colorList);</span><br><span class="line"></span><br><span class="line">        frame.add(top);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame为最佳大小 可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BasicComponentDemo</span>().init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2对话框Dialog"><a href="#3-2对话框Dialog" class="headerlink" title="3.2对话框Dialog"></a>3.2对话框Dialog</h4><h5 id="3-2-1-Dialog"><a href="#3-2-1-Dialog" class="headerlink" title="3.2.1 Dialog"></a>3.2.1 Dialog</h5><p> Dialog是windos类的子类，是一个容器，属于特殊组件，对话框可以独立存在的顶级窗口，和普通窗口用法一样。</p><ul><li>使用对话框通常依赖其他窗口，就是通常有一个父窗口。</li><li>对话框分为非模式和模式两种，当某个模式被打开之后该模式对话框位于它的父窗口之上，在模式对话框被关闭之前，父窗口无法获取焦点。</li></ul><p>案例1：</p><p>​通过Frame、Button、Dialog实现下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试Dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个对话框Dialog对象，一个模式的，一个非模式的</span></span><br><span class="line">        Dialog d1=<span class="keyword">new</span> <span class="title class_">Dialog</span>(frame,<span class="string">&quot;模式对话框&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        Dialog d2=<span class="keyword">new</span> <span class="title class_">Dialog</span>(frame,<span class="string">&quot;非模式对话框&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过setBounds方法设置Dialog组件的位置以及大小</span></span><br><span class="line">        d1.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        d2.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建两个按钮</span></span><br><span class="line">        Button b1=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1：打开模式对话框&quot;</span>);</span><br><span class="line">        Button b2=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮2：打开非模式对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.给这两个按钮添加点击后的行为</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d2.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//5.把按钮添加到frame中</span></span><br><span class="line">        frame.add(b1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(b2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：</p><p>​设置如下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试Dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个对话框Dialog对象，一个模式的</span></span><br><span class="line">        Dialog d1=<span class="keyword">new</span> <span class="title class_">Dialog</span>(frame,<span class="string">&quot;模式对话框&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个垂直的Box容器把文本框和一个按钮添加到Box容器中</span></span><br><span class="line">        Box vBox=Box.createHorizontalBox();</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>));</span><br><span class="line">        vBox.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确定&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把Box容器添加到Dialog中</span></span><br><span class="line">        d1.add(vBox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过setBounds方法设置Dialog组件的位置以及大小</span></span><br><span class="line">        d1.setBounds(<span class="number">20</span>,<span class="number">30</span>,<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建按钮</span></span><br><span class="line">        Button b1=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮1：打开模式对话框&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.给按钮添加点击后的行为</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                d1.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.把按钮添加到frame中</span></span><br><span class="line">        frame.add(b1,BorderLayout.NORTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-2-2-FileDiaglog"><a href="#3-2-2-FileDiaglog" class="headerlink" title="3.2.2 FileDiaglog"></a>3.2.2 FileDiaglog</h5><p>Dialog类还有一个子类：FileDialog，它代表一个文件对话框，用于打开或者保存文件，需要注意的是FileDialog无法指定模态或者非模态，这是因为FileDialog依赖于运行平台的实现，如果运行平台的文件对话框是模态的，那么FileDialog也是模态的，那么FileDialog也是模态的，否则就是非模态的。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>FileDialog(Frame parent，String title，int mode)</td><td>创建一个对话框：parent:指定一个父窗口   title：对话框标题  mode:文件对话框类型，如果指定为FileDialog.LOAD，用于打开文件，如果指定为FileDialog.SAVE，用于保存文件</td></tr><tr><td>String getDirectory()</td><td>获取被打开或保存文件的绝对路径</td></tr><tr><td>String getFile()</td><td>获取被打开或保存文件的文件名</td></tr></tbody></table><p>案例：</p><p>​使用Frame、Button、和FileDialog完成下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDialogDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试FileDialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个FileDialog对象</span></span><br><span class="line">        FileDialog f1=<span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;选择要打开的文件：&quot;</span>,FileDialog.LOAD);</span><br><span class="line">        FileDialog f2=<span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;选择要保存的文件：&quot;</span>,FileDialog.SAVE);</span><br><span class="line">        <span class="comment">//2.创建两个按钮</span></span><br><span class="line">        Button b1=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;打开文件&quot;</span>);</span><br><span class="line">        Button b2=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;保存文件&quot;</span>);</span><br><span class="line">        <span class="comment">//3.给这两个按钮设置点击后的行为：获取打开或者保存的路径文件名</span></span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                f1.setVisible(<span class="literal">true</span>);<span class="comment">//代码会阻塞到这里</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取选择的路径以及文件</span></span><br><span class="line">                String directory=f1.getDirectory();</span><br><span class="line">                String file=f1.getFile();</span><br><span class="line">                System.out.println(<span class="string">&quot;打开的文件路径为：&quot;</span>+directory);</span><br><span class="line">                System.out.println(<span class="string">&quot;打开的文件名：&quot;</span>+file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                f2.setVisible(<span class="literal">true</span>);<span class="comment">//代码会阻塞到这里</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取选择的路径以及文件</span></span><br><span class="line">                String directory=f2.getDirectory();</span><br><span class="line">                String file=f2.getFile();</span><br><span class="line">                System.out.println(<span class="string">&quot;保存的文件路径为：&quot;</span>+directory);</span><br><span class="line">                System.out.println(<span class="string">&quot;保存的文件名：&quot;</span>+file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//4.把按钮添加到Frame中</span></span><br><span class="line">        frame.add(b1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(b2,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置frame的最佳大小以及可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-事件处理机制"><a href="#4-事件处理机制" class="headerlink" title="4.事件处理机制"></a>4.事件处理机制</h3><h5 id="4-1GUI事件处理机制"><a href="#4-1GUI事件处理机制" class="headerlink" title="4.1GUI事件处理机制"></a>4.1GUI事件处理机制</h5><p>定义：</p><p>​在某个组件上发生操作的时候，会自动触发一段代码的执行。</p><p>在GUI事件处理机制中涉及到4个重要的概念需要理解：</p><p><strong>事件源</strong>:操作发生的场所，通常指某个组件，例如按钮，窗口等。</p><p><strong>事件</strong>：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。</p><p><strong>事件监听器</strong>：当在某个事件源上发生了某个对象，事件监听器就可以对这个事件进行处理。</p><p><strong>注册监听</strong>：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生事件B后，那么事件监听器A的代码就会自动执行。</p><p>使用步骤：</p><p>1.创建事件源组件对象；</p><p>2.自定义类，实现xxxListener接口，重写方法；</p><p>3.创建事件监听器对象(自定义类对象)</p><p>4.调用事件源组件对象的addXxxxListener方法完成注册监听</p><p>案例：</p><p>​完成下图效果，点击确定按钮，在单行文本框内显示hello world</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventDemo1</span> &#123;</span><br><span class="line">    Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试事件处理&quot;</span>);</span><br><span class="line">    TextField tf=<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>);</span><br><span class="line">    Button ok=<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;确认&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        <span class="comment">//监听器</span></span><br><span class="line">        MyListener myListener=<span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册监听</span></span><br><span class="line">        ok.addActionListener(myListener);</span><br><span class="line">        <span class="comment">//把tf和ok放到frame中</span></span><br><span class="line">        frame.add(tf,BorderLayout.NORTH);</span><br><span class="line">        frame.add(ok);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span>&#123;</span><br><span class="line">            tf.setText(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">EventDemo1</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-2GUI常用事件和事件监听器"><a href="#4-2GUI常用事件和事件监听器" class="headerlink" title="4.2GUI常用事件和事件监听器"></a>4.2GUI常用事件和事件监听器</h5><p>​事件监听器必须实现事件监听器接口，AWT提供了大量的事件监听器接口用于实现不同类型的事件监听器，用于监听不同类型的事件。AWT中提供了丰富的事件类，用于封装不同组件上所发生的特定操作，AWT的事件类都是AWTEvent类的子类，AWTEvent是EventObject的子类。</p><h6 id="4-2-1事件"><a href="#4-2-1事件" class="headerlink" title="4.2.1事件"></a>4.2.1事件</h6><p>AWT把事件分为了两大类：</p><p>​1.低级事件：这类事件是基于某个特定动作的事件。比如进入、点击、播放等动作的鼠标事件，再比如得到焦点和失去焦点等焦点事件。</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>ComponentEvent</td><td>组件事件，当组件尺寸发生变化，位置发生移动，显示&#x2F;隐藏状态发生改变时触发该事件</td></tr><tr><td>ContainerEvent</td><td>容器事件，当容器里发生添加组件、删除组件时触发该事件</td></tr><tr><td>WindowEvent</td><td>窗口事件，当窗口状态发生改变(如打开、关闭、最大化、最小化)时触发该事件</td></tr><tr><td>FocusEvent</td><td>焦点事件，当事件得到焦点或者失去焦点时触发该事件</td></tr><tr><td>KeyEvent</td><td>键盘事件，当按键被按下、松开、单击时触发该事件</td></tr><tr><td>MouseEvent</td><td>鼠标事件，当进行单击、按下、松开、移动鼠标等动作时触发该事件</td></tr><tr><td>PaintEvent</td><td>组件绘制事件，该事件是一个特殊的事件类型，当GUI组件</td></tr></tbody></table><p>​2.高级事件：这类事件不会基于某个特定动作，而是根据功能含义的事件。</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>ActionEvent</td><td>动作事件，当按钮、菜单项被单击，在TextField中按Enter键触发</td></tr><tr><td>AjustmentEvent</td><td>调节事件，在滑动条上移动滑块以调节数值时触发该事件</td></tr><tr><td>ItemEvent</td><td>选项事件，在用户选中某项，或取消选中某项时触发该事件</td></tr><tr><td>TextEvent</td><td>文本事件，当文本框、文字域里的文本发生改变时触发该事件</td></tr></tbody></table><p>​</p><h6 id="4-2-2事件监听器"><a href="#4-2-2事件监听器" class="headerlink" title="4.2.2事件监听器"></a>4.2.2事件监听器</h6><p>不同的事件需要不同的监听器监听，不同的监听器需要实现不同的监听器接口，当指定事件发生后，事件监听器就会调用所包含的事件处理器(实例方法)来处理事件。</p><table><thead><tr><th>事件类别</th><th>描述信息</th><th>监听器接口名</th></tr></thead><tbody><tr><td>ContainerEvent</td><td>容器中增加或者删除了组件</td><td>ContainerListener</td></tr><tr><td>TextEvent</td><td>文本字段或者文本区发生改变</td><td>TextListener</td></tr><tr><td>ActionEvent</td><td>激活组件</td><td>ActionListener</td></tr><tr><td>ItemEvent</td><td>选择了某些项目</td><td>ItemListener</td></tr><tr><td>MouseEvent</td><td>鼠标移动</td><td>MouseMotionListener</td></tr><tr><td>MouseEvent</td><td>鼠标点击等</td><td>MouseListener</td></tr><tr><td>KeyEvent</td><td>键盘输入</td><td>KeyListener</td></tr><tr><td>FoucsEvnet</td><td>组件收到或者失去焦点</td><td>FoucsListener</td></tr><tr><td>AdjustmentEvent</td><td>移动了滚动条等组件</td><td>AdjustListener</td></tr><tr><td>ComponentEvent</td><td>对象移动缩放显示隐藏等</td><td>ComponentListener</td></tr><tr><td>WindowEvent</td><td>窗口收到窗口级事件</td><td>WindowListener</td></tr></tbody></table><p>案例一：</p><p>​通过ContainerListener监听Frame容器添加组件；</p><p>​通过TextListener监听TextField内容变化；</p><p>​通过ItemListener监听Choice条目中状态变化；</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试监听器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建组件(事件源)</span></span><br><span class="line">        TextField tf=<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">30</span>);</span><br><span class="line">        Choice names=<span class="keyword">new</span> <span class="title class_">Choice</span>();</span><br><span class="line">        names.add(<span class="string">&quot;第一&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;第二&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;第三&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;第四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给文本域添加TextListener，监听内容的变化</span></span><br><span class="line">        tf.addTextListener(<span class="keyword">new</span> <span class="title class_">TextListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textValueChanged</span><span class="params">(TextEvent e)</span> &#123;</span><br><span class="line">              String text=tf.getText();</span><br><span class="line">                System.out.println(<span class="string">&quot;当前文本框内容为：&quot;</span>+text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给下拉选择框添加ItemListener，监听条目选项的变化</span></span><br><span class="line">        names.addItemListener(<span class="keyword">new</span> <span class="title class_">ItemListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">itemStateChanged</span><span class="params">(ItemEvent e)</span> &#123;</span><br><span class="line">             Object item=e.getItem();</span><br><span class="line">                System.out.println(<span class="string">&quot;当前选中的条目为：&quot;</span>+item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给frame注册ContainerListener监听器，监听容器中组件的添加</span></span><br><span class="line">        frame.addContainerListener(<span class="keyword">new</span> <span class="title class_">ContainerListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">componentAdded</span><span class="params">(ContainerEvent e)</span> &#123;</span><br><span class="line">                Component child=e.getChild();</span><br><span class="line">                System.out.println(<span class="string">&quot;frame中添加了:&quot;</span>+child);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">componentRemoved</span><span class="params">(ContainerEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到frame中</span></span><br><span class="line">        Box hBox= Box.createHorizontalBox();</span><br><span class="line">        hBox.add(tf);</span><br><span class="line">        hBox.add(names);</span><br><span class="line">        frame.add(hBox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置frame的最佳大小以及可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例2：</p><p>​给Frame设置WindowListener，监听用户点击X的动作，如果用户点击X，则关闭当前的窗口</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里是测试WindowListener&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowOpened</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;打开了Window界面&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;关闭了Window界面&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-菜单组件"><a href="#5-菜单组件" class="headerlink" title="5.菜单组件"></a>5.菜单组件</h3><p>​在实际开发中，除了主界面，还有一类比较重要的内容就是菜单相关组件，可以通过菜单相关组件很方便的使用特定的功能，在AWT中，菜单相关组件的使用和之前的组件一模一样，只需要把菜单条、菜单、菜单项组合到一起，按照一定的布局，放入到容器中即可。</p><p>下表给出常见的菜单相关组件：</p><table><thead><tr><th>菜单组件名称</th><th>功能</th></tr></thead><tbody><tr><td>MenuBar</td><td>菜单条，菜单的容器</td></tr><tr><td>Menu</td><td>菜单组件，菜单项的容器。它也是MenuItem的子类，所以可以作为菜单项使用</td></tr><tr><td>PopupMenu</td><td>上下文菜单组件(右键菜单组件)</td></tr><tr><td>MenuItem</td><td>菜单项选项</td></tr><tr><td>CheckboxMenuItem</td><td>复选框菜单项组</td></tr></tbody></table><p>菜单相关组件使用：</p><p>1.准备菜单项组件，这些组件可以是MenuItem及其子类对象</p><p>2.准备菜单组件Menu或者PopupMenu(右击弹出子菜单)，把第一步中准备好的菜单项组件添加进来</p><p>3.准备菜单条组件MenuBar，把第二步中准备好的菜单组件Menu添加进来</p><p>4.把第三步中准备好的菜单条组件添加到窗口对象中显示</p><p>小技巧：</p><p>1.如果要在某个菜单的菜单项之前添加分割线，那么只需要调用Menu的add(new MenuItem(“.”))即可。</p><p>2.如果要在某个菜单项关联快捷键功能，那么只需要在创建菜单项对象时设置即可，例如给菜单项关联crtl+shift+Q快捷键，只需要：new MenuItem(“菜单项名字”，new MenuShortcut(KeyEvent.VK_Q，true));</p><p>案例：</p><p>​使用常用awt中常用菜单组件，完成下图效果。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.dsig.SignatureProperties;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMenu</span> &#123;</span><br><span class="line">    <span class="comment">//创建窗口</span></span><br><span class="line">    <span class="keyword">private</span> Frame frame=<span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;这里测试菜单相关组件&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单条</span></span><br><span class="line">    MenuBar menuBar=<span class="keyword">new</span> <span class="title class_">MenuBar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建菜单组件</span></span><br><span class="line">    Menu fileMenu=<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">    Menu editMenu=<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">    Menu formatMenu=<span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;格式&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单项组件</span></span><br><span class="line">    MenuItem auto=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;自动换行&quot;</span>);</span><br><span class="line">    MenuItem copy=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">    MenuItem paste=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">    MenuItem comment=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;注释 &quot;</span>,<span class="keyword">new</span> <span class="title class_">MenuShortcut</span>(KeyEvent.VK_Q,<span class="literal">true</span>));</span><br><span class="line">    <span class="comment">//关联快捷键 Ctrl+shift+Q</span></span><br><span class="line">    MenuItem cancel=<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;取消注释&quot;</span>);</span><br><span class="line">    TextArea ta=<span class="keyword">new</span> <span class="title class_">TextArea</span>(<span class="number">6</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        comment.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                ta.append(<span class="string">&quot;您点击了菜单项&quot;</span>+e.getActionCommand()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        formatMenu.add(comment);</span><br><span class="line">        formatMenu.add(cancel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装编译菜单</span></span><br><span class="line">        editMenu.add(auto);</span><br><span class="line">        editMenu.add(copy);</span><br><span class="line">        editMenu.add(paste);</span><br><span class="line">        editMenu.add(formatMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装菜单条</span></span><br><span class="line">        menuBar.add(fileMenu);</span><br><span class="line">        menuBar.add(editMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把菜单条放到frame</span></span><br><span class="line">        frame.setMenuBar(menuBar);</span><br><span class="line">        frame.add(ta);</span><br><span class="line">        <span class="comment">//设置frame的最佳大小和可见</span></span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SimpleMenu</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-绘图"><a href="#6-绘图" class="headerlink" title="6.绘图"></a>6.绘图</h3><p>​很多程序例如各种游戏都需要在窗口绘制各种图形，除此之外，即使在开发javaEE项目时，有时候也必须”动态”地向客户端生成各种图形、图表，比如图形验证码、统计图等，这都需要利用AWT的绘图功能。</p><p>组件绘图原理：</p><p>​在AWT中，真正提供绘图功能的对象是Graphics对象。</p><p>​paint(Graphics g):绘制组件的外观；</p><p>​update(Graphics g):内部调用paint方法，刷新组件外观；</p><p>​repaint(Graphics g):调用update方法，刷新组件外观；</p><p>一般情况下，update和paint方法是由AWT系统负责调用，如果程序要希望系统程序绘制组件，可以调用repaint方法实现。</p><p>Graphics类的使用：</p><p>​AWT中提供了Canvas类充当画布，提供了Graphics类充当画笔，通过调用Graphics对象的setColor()方法可以给画笔设置颜色。</p><p><strong>画图的步骤：</strong></p><p>​1.自定义类，继承Canvas类，重写paint(Graphics g)方法完成画图；</p><p>​2.在paint方法内部，真正开始画图之前调用Graphics对象的setColor()，setFont()方法设置画笔的颜色、字体等属性；</p><p>​3.调用画笔的Graphics的drawXxx()方法开始画图。</p><p>​Graphics类的常用方法：</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>setColor(Color c)</td><td>设置颜色</td></tr><tr><td>setFont(Font font)</td><td>设置字体</td></tr><tr><td>drawLine()</td><td>绘制直线</td></tr><tr><td>drawRect()</td><td>绘制矩形</td></tr><tr><td>drawRoundRect()</td><td>绘制圆角矩形</td></tr><tr><td>drawOval()</td><td>绘制椭圆</td></tr><tr><td>drawPolygon()</td><td>绘制多边形</td></tr><tr><td>drawArc()</td><td>绘制圆弧</td></tr><tr><td>drawPolyLine()</td><td>绘制折线</td></tr><tr><td>fillRect()</td><td>填充矩形区域</td></tr><tr><td>fillRoundRect()</td><td>填充圆角矩形区域</td></tr><tr><td>fillOval()</td><td>填充椭圆区域</td></tr><tr><td>fillPolygon()</td><td>填充多边形区域</td></tr><tr><td>fillArc()</td><td>填充圆弧对应的扇形区域</td></tr><tr><td>drawImage()</td><td>绘制位图</td></tr></tbody></table><p>案例：</p><p>​使用AWT绘图，绘制下图效果：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">simpleDraw</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RECT_SHAPE</span> <span class="operator">=</span> <span class="string">&quot;rect&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OVAL_SHAPE</span> <span class="operator">=</span> <span class="string">&quot;oval&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;绘制图形&quot;</span>);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">butRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;绘制矩形&quot;</span>);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">butOval</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;绘制椭圆&quot;</span>);</span><br><span class="line">    <span class="comment">//定义一个变量，记录当前绘制的图形</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//自定义类继承Canvas类，从写paint方放完成画图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            <span class="comment">//绘制不同的图形</span></span><br><span class="line">            <span class="keyword">if</span> (shape.equals(RECT_SHAPE)) &#123;</span><br><span class="line">                <span class="comment">//矩形</span></span><br><span class="line">                g.setColor(Color.BLACK);</span><br><span class="line">                g.drawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.equals(OVAL_SHAPE)) &#123;</span><br><span class="line">                <span class="comment">//圆形</span></span><br><span class="line">                g.setColor(Color.RED);</span><br><span class="line">                g.drawOval(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建自定义画布</span></span><br><span class="line">    <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        butRect.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//修改记录值为rect</span></span><br><span class="line">                shape=RECT_SHAPE;</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        butOval.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//修改记录值为oval</span></span><br><span class="line">                shape=OVAL_SHAPE;</span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//创建panel承载按钮</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        panel.add(butRect);</span><br><span class="line">        panel.add(butOval);</span><br><span class="line">        frame.add(panel,BorderLayout.SOUTH);</span><br><span class="line">        drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">300</span>,<span class="number">300</span>));</span><br><span class="line">        frame.add(drawArea);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">simpleDraw</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位图： Graphics提供了drawImage方法来绘制位图，该方法需要一个image参数，通过该方法可以绘制出指定的位图</p><p>使用步骤：</p><p>​1.创建image的子类对象BufferedImage(int width，int height，int ImageType)，创建时需要指定位图的宽高以及类型属性；此时相当于在内存中生成了一张照片</p><p>​2.调用BufferedImage对象的getGraphics()方法获取画笔，此时就可以往内存中的这张图片上绘图了，绘图的方法和之前的学习一模一样</p><p>​3.调用组件paint()方法中提供的Graphics对象的drawImage()方法，一次性的内存中的图片BufferedImage绘制到特定的组件上去。</p><p>使用位图绘制的好处：</p><p>​使用位图来绘制组件，相当于实现了图的缓冲区，此时绘图中没有直接把图形绘制到组件，而是先绘制到内存中的BufferedImage上，等全部绘制完成后，再一次性的图像显示到组件上即可，这样用户的体验会好一些。</p><p>案例：</p><p>​通过BufferedImage实现一个简单的手绘程序，通过鼠标能够在窗口中绘图。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandDraw</span> &#123;</span><br><span class="line">    <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;HandDraw&quot;</span>);</span><br><span class="line">    <span class="comment">//定义画图区域的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AREA_WIDTH</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AREA_HEIGHT</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line">    <span class="comment">//定义右击菜单，设置画笔的color</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">PopupMenu</span> <span class="variable">colorMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PopupMenu</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">redItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">greenItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">MenuItem</span> <span class="variable">blueItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    <span class="comment">//定义一个变量定义，记录当前画笔的颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Color</span> <span class="variable">foceColor</span> <span class="operator">=</span> Color.black;</span><br><span class="line">    <span class="comment">//创建一个位图对象</span></span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(AREA_WIDTH,AREA_HEIGHT,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    <span class="comment">//通过位图获取关联的Graphics对象</span></span><br><span class="line">    <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> image.getGraphics();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义一个类 继承Canvas</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line">    <span class="comment">//定义变量，记录鼠标拖动过程中上一处的坐标</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> preX=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> preY=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">actionCommand</span> <span class="operator">=</span> e.getActionCommand();</span><br><span class="line">                <span class="keyword">switch</span> (actionCommand) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;red&quot;</span>:</span><br><span class="line">                        foceColor = Color.RED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;green&quot;</span>:</span><br><span class="line">                        foceColor = Color.GREEN;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">                        foceColor = Color.BLUE;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        redItem.addActionListener(listener);</span><br><span class="line">        greenItem.addActionListener(listener);</span><br><span class="line">        blueItem.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        colorMenu.add(redItem);</span><br><span class="line">        colorMenu.add(greenItem);</span><br><span class="line">        colorMenu.add(blueItem);</span><br><span class="line">        <span class="comment">//把colorMenu设置绘图区域</span></span><br><span class="line">        drawArea.add(colorMenu);</span><br><span class="line"></span><br><span class="line">        drawArea.addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">popupTrigger</span> <span class="operator">=</span> e.isPopupTrigger();</span><br><span class="line">                <span class="keyword">if</span> (popupTrigger)&#123;</span><br><span class="line">                    colorMenu.show(drawArea,e.getX(),e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重置</span></span><br><span class="line">                preX=-<span class="number">1</span>;</span><br><span class="line">                preY=-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置位图的背景色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,AREA_WIDTH,AREA_HEIGHT);</span><br><span class="line">        <span class="comment">//鼠标点击移动事件</span></span><br><span class="line">        drawArea.addMouseMotionListener(<span class="keyword">new</span> <span class="title class_">MouseMotionAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseDragged</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (preX&gt;<span class="number">0</span>&amp;&amp;preY&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    g.setColor(foceColor);</span><br><span class="line">                    g.drawLine(preX,preY,e.getX(),e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//修正preX值和preY的值</span></span><br><span class="line">                preX=e.getX();</span><br><span class="line">                preY=e.getY();</span><br><span class="line">                <span class="comment">//重绘组件</span></span><br><span class="line">                drawArea.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        drawArea.setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(AREA_WIDTH,AREA_HEIGHT));</span><br><span class="line">        frame.add(drawArea);</span><br><span class="line">        <span class="comment">//组装视图</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.pack();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HandDraw</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImageIO的使用</p><p>​在实际生活中，很多软件都支持打开本地磁盘已经保存的图片，然后点击进行编辑，编译完成后，再重新保存到本地磁盘。如使用AWT要完成这样的功能，那么需要用到ImageIO这个类，可以操作本地磁盘的图片文件。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>static BufferedImage read(File input)</td><td>读取本地磁盘图片文件</td></tr><tr><td>static BufferedImage read(InputStream input)</td><td>读取本地磁盘图片文件</td></tr><tr><td>static boolean write(RenderedImage im，String formatName，File output)</td><td>往本地磁盘中输出图片</td></tr></tbody></table><p>案例：</p><p>​编写图片查看程序，支持另存操作</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> AWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadAndSaveImage</span> &#123;</span><br><span class="line">   <span class="keyword">private</span>  <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;图片查看器&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="type">MenuBar</span> <span class="variable">menuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuBar</span>();</span><br><span class="line">   <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">   <span class="type">MenuItem</span> <span class="variable">open</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="type">MenuItem</span> <span class="variable">save</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;另存为&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明BufferedImage对象，记录本地存取到内存中的图片</span></span><br><span class="line">    BufferedImage image ;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">           g.drawImage(image,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">MyCanvas</span> <span class="variable">drawArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCanvas</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//组装视图</span></span><br><span class="line">       open.addActionListener(e -&gt; &#123;</span><br><span class="line">           <span class="comment">//打开一个文件框</span></span><br><span class="line">           <span class="type">FileDialog</span> <span class="variable">fileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;打开图片&quot;</span>,FileDialog.LOAD);</span><br><span class="line">           fileDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取用户选择的图片路径以及名称</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> fileDialog.getDirectory();</span><br><span class="line">           <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileDialog.getName();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             image =  ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(dir,fileName));</span><br><span class="line">             drawArea.repaint();</span><br><span class="line">         &#125;<span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">             ex.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       save.addActionListener(e -&gt; &#123;</span><br><span class="line">           <span class="comment">//展示一个文件对话框</span></span><br><span class="line">           <span class="type">FileDialog</span> <span class="variable">fileDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDialog</span>(frame,<span class="string">&quot;保存图片&quot;</span>,FileDialog.SAVE);</span><br><span class="line">           fileDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取用户选择的图片路径以及名称</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> fileDialog.getDirectory();</span><br><span class="line">           <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileDialog.getName();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               ImageIO.write(image,<span class="string">&quot;JPEG&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(dir,fileName));</span><br><span class="line">           &#125;<span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">               ex.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       menu.add(open);</span><br><span class="line">       menu.add(save);</span><br><span class="line">       menuBar.add(menu);</span><br><span class="line">       <span class="comment">//把菜单条放入到窗口中</span></span><br><span class="line">       frame.setMenuBar(menuBar);</span><br><span class="line">       frame.add(drawArea);</span><br><span class="line">       frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">1080</span>,<span class="number">1080</span>);</span><br><span class="line"></span><br><span class="line">       frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">       frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">               System.exit(<span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">ReadAndSaveImage</span>().init();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、Swing编程"><a href="#二、Swing编程" class="headerlink" title="二、Swing编程"></a>二、Swing编程</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>​Swing是纯100%Java实现的，不再依赖于本地平台的GUI，因此可以在所有平台上都保持相同的界面外观。独立于本地平台的Swing组件被称为<strong>轻量级组件</strong>，而依赖于本地平台的AWT组件被称为<strong>重量级组件</strong>。</p><p>​由于Swing的所有组件完全采用Java实现，不再调用本地平台的GUI，所以导致Swing图形界面的显示速度要比AWT图形界面的显示速度要慢一些，但相对于快速发展的硬件设施而言，这种微小的速度差别无妨大碍。</p><p><strong>使用Swing的优势</strong>：</p><p>​1.Swing组件不再依赖于本地平台的GUI，无须采用各种平台的GUI交集，因此Swing提供了大量图形界面组件，远远超出了AWT提供的图形界面组件集。</p><p>​2.Swing组件不再依赖于本地平台GUI，因此不会产生与平台相关的bug。</p><p>​3.Swing组件在各种平台上运行时可以保证具有相同的图形界面外观。</p><p>​Swing提供的这些优势，让java图形界面程序真正实现了”Write Once，Run Anywhere”的目标。</p><p><strong>Swing的特征</strong>：</p><p>​1.Swing组件采用MVC(Model-View-Controller，即模型-视图-控制器)设计模式：</p><p>​模型(Model):用于维护组件的各种状态</p><p>​视图(View):是组件的可视化表现</p><p>​控制器(controller):用于控制对于各种事件、组件做出响应。</p><p>​当模型发生改变时，它会通知所有依赖它的视图，视图会根据模型数据来更新自己。Swing使用UI代理来包装视图和控制器，还有一个模型对象来维护该组件的状态。例如，按钮JButton有一个维护其状态信息的模型ButtonModel对象。Swing组件的模型是自动设置的，因此一般都使用JButton，而无须关心ButtonModel对象。</p><p>​2.Swing在不同平台上表现一致，并且有能力提供本地平台不支持的显示外观。由于Swing采用MVC模式来维护各组件，所以当组件的外观被改变时，对组件的状态信息(由模型维护)没有影响。因此，Swing可以使用插拔式外观感受(Pluggable Look And Feel，PLAF)来控制组件外观，使得Swing图形界面在同一个平台上运行时能拥有不同的外观，用户可以选择自己喜欢的外观。相比之下，在AWT图形界面中，由于控制组件外观的对象类与具体平台有关，因此AWT组件总是具有和本地平台相同的外观。</p><h3 id="2-基本组件的用法"><a href="#2-基本组件的用法" class="headerlink" title="2.基本组件的用法"></a>2.基本组件的用法</h3><h4 id="2-1、Swing组件层次"><a href="#2-1、Swing组件层次" class="headerlink" title="2.1、Swing组件层次"></a>2.1、Swing组件层次</h4><p>大部分Swing组件都是JComponent抽象类的直接或间接子类（并不是全部的Swing组件），JComponent类定义了所有子类组件的通用方法，JComponent类是AWT里java.awt.Container类的子类，这也是AWT和Swing的联系之一。绝大部分Swing组件类继承了Container类，所以Swing组件都可作为容器使用（JFrame类继承了Frame类）。</p><p>Swing组件和AWT组件的对应关系：大部分情况下，只需要在AWT组件的名称前面加个J，就可以得到其对应的Swing组件名称，但有几个例外：</p><ul><li>JComboBox：对应于AWT里的Choice组件，但比Choice组件功能更丰富；</li><li>JFileChooser：对应于AWT里的FileDialog组件；</li><li>JScrollBar：对应于AWT里的ScrollBar组件，注意两个组件类名中b字母的大小写差别；</li><li>JCheckBox：对应于AWT里的Checkbox组件，注意两个组件类名中b字母的大小写差别；</li><li>JCheckBoxMenuItem：对应于AWT里的CheckboxMenuItem组件，注意两个组件类名中b字母的大小写差别。</li></ul><p>Swing组件按照功能来分类：</p><ul><li>顶层容器：JFrame、JApplet、JDialog和JWindow。</li><li>中间容器：JPanel、JScrollPane、JSplitPane、JToolBar等。</li><li>特殊容器：在用户界面上具有特殊作用的中间容器，如JInternalFrame、JRootPane、JLayeredPane和JDesktopPane等。</li><li>基本组件：实现人机交互的组件，如JButton、JComboBox、JList、JMenu、JSlider等。</li><li>不可编辑信息的显示组件：向用户显示不可编辑信息的组件，如JLabel、JProgressBar和JToolTip等。</li><li>可编辑信息的显示组件：向用户显示能被编辑的格式化信息的组件，如JTable、JTextArea和JTextField等。</li><li>特殊对话框组件：可以直接产生特殊对话框的组件，如JColorChooser和JFileChooser等。</li></ul><h4 id="2-2AWT组件的Swing实现"><a href="#2-2AWT组件的Swing实现" class="headerlink" title="2.2AWT组件的Swing实现"></a>2.2AWT组件的Swing实现</h4><p>Swing为除Canvas之外的所有AWT组件提供了相应的实现，Swing组件比AWT组件的功能更加强大。相对于AWT组件，Swing组件具有如下的4个额外的功能：</p><ol><li>可以为Swing组件设置提示信息。使用setToolTipText()方法，为组件设置对用户有帮助的提示信息。</li><li>很多Swing组件如按钮、标签、菜单项等，除使用文字外，还可以使用图标修饰自己。为了允许在Swing组件中使用图标，Swing为Icon接口提供了一个实现类：ImageIcon，该实现类代表一个图像图标。</li><li>支持插拔式的外观风格。每个JComponent对象都有一个相应的ComponentUI对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。ComponentUI对象依赖当前使用的PLAF，使用UIManager.setLookAndFeel()方法可以改变图形界面的外观风格。</li><li>支持设置边框。Swing组件可以设置一个或多个边框。Swing中提供了各式各样的边框供用户使用，也能建立组合边框或自己设置边框。一种空白边框可以用于增大组件，同时协助布局管理器对容器中的组件进行合理的布局。</li></ol><p>每个Swing组件都有一个对应的UI类。例如JButton组件就有一个对应的ButtonUI类来作为UI代理。每个Swing组件的UI代理的类名总是将该Swing组件类名的J去掉，然后在后面添加UI后缀。UI代理类通常是一个抽象基类，不同的PLAF会有不同的UI代理实现类。Swing类库中包含了几套UI代理，分别放在不同的包下，每套UI代理都几乎包含了所有Swing组件的ComponentUI实现，每套这样的实现都被称为一种PLAF实现。</p>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++STL容器</title>
      <link href="/2024/02/04/C-STL%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/02/04/C-STL%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="C-STL容器"><a href="#C-STL容器" class="headerlink" title="C++STL容器"></a>C++STL容器</h1><h2 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h2><ul><li>vector的构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器的构造</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;<span class="comment">//默认构造（无参）构造</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//通过区间方式进行构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v2</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line">cout &lt;&lt;endl;</span><br><span class="line"><span class="comment">//通过n个elem方式来进行构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v3</span>(<span class="number">3</span>, <span class="number">100</span>);<span class="comment">// 第一个参数是个数，第二个参数是数据</span></span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">v4</span>(v3);</span><br><span class="line"><span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>赋值操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器-赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printvector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;<span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printvector</span>(v);</span><br><span class="line"><span class="comment">//赋值   operator=</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">v2 = v;</span><br><span class="line"><span class="built_in">printvector</span>(v2);</span><br><span class="line"><span class="comment">//赋值    assign</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">v3 .<span class="built_in">assign</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">//begin是闭区间，end是开区间</span></span><br><span class="line"><span class="built_in">printvector</span>(v3);</span><br><span class="line"><span class="comment">//赋值    assign   n个elem方式赋值</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line">v4.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printvector</span>(v4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>容量和大小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器的容量和大小操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="keyword">if</span> (v1.<span class="built_in">empty</span>())<span class="comment">//为真  代表容器为空</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1为空 &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1不为空 &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的容量为：&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的大小为： &quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新指定大小</span></span><br><span class="line">v1.<span class="built_in">resize</span>(<span class="number">15</span>, <span class="number">4</span>);<span class="comment">//如果重新指定的size比原来大，则默认用0填充,若指定一个数，则会用指定数来填充</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);<span class="comment">//如果重新定义的比原来短了，超出部分会删除掉</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector插入和删除</span></span><br><span class="line"><span class="comment">/*·push_back(elem);    //尾部插入元素elem</span></span><br><span class="line"><span class="comment">·pop_back();         //删除最后一个元素</span></span><br><span class="line"><span class="comment">·insert(const_iterator pos, elem);   //迭代器指向位置pos插入元素elem</span></span><br><span class="line"><span class="comment">·insert(const_iterator pos, int count,elem);  迭代器指向位置pos插入count个元素elem</span></span><br><span class="line"><span class="comment">·erase(const_iterator  pos);  //删除迭代器指向元素</span></span><br><span class="line"><span class="comment">·erase(const_iterator start, const iterator end);   //删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="comment">·clear();         //删除容器中所有元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">60</span>);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">v1.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//插入  第一个参数为迭代器</span></span><br><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">3</span>, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//删除 第一个参数也是迭代器</span></span><br><span class="line">v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">begin</span>() + <span class="number">2</span>);<span class="comment">//删除begin到begin+2之间的元素</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">v1.<span class="built_in">clear</span>();<span class="comment">//删除容器中所以元素</span></span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据存取</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器  数据存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用[]方式访问数组中元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//利用成员函数at来访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//获取第一个元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个元素为：&quot;</span> &lt;&lt; v1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//获取最后一个元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最后一个元素为：&quot;</span> &lt;&lt; v1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>互换容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector  互换容器</span></span><br><span class="line"><span class="comment">//1.基本使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前的打印：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后的打印：&quot;</span> &lt;&lt; endl;</span><br><span class="line">v1.<span class="built_in">swap</span>(v2);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实际用途</span></span><br><span class="line"><span class="comment">//巧用swap可以收缩内存空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">3</span>);<span class="comment">//重新指定大小</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//巧用swap收缩内存</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);</span><br><span class="line"><span class="comment">//vector&lt;int&gt;(v);//匿名对象</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预留空间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//vector容器-预留空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line"><span class="comment">//利用reserve预留空间</span></span><br><span class="line">v1.<span class="built_in">reserve</span>(<span class="number">100000</span>);</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;<span class="comment">//统计开辟次数</span></span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>]) &#123;</span><br><span class="line">p = &amp;v1[<span class="number">0</span>];<span class="comment">//每开辟一次新的内存空间，地址发生变化</span></span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map容器"><a href="#map容器" class="headerlink" title="map容器"></a>map容器</h2><ul><li>构造与赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器  构造和赋值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建map容器</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="built_in">printmap</span>(mp);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;<span class="built_in">mp2</span>(mp);</span><br><span class="line"><span class="built_in">printmap</span>(mp2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;mp3;</span><br><span class="line">mp3 = mp2;</span><br><span class="line"><span class="built_in">printmap</span>(mp3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大小和交换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器大小和交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;m为空 ！&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m的大小为：&quot;</span> &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m2;</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">6</span>, <span class="number">10</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">7</span>, <span class="number">20</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">8</span>, <span class="number">30</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">9</span>, <span class="number">40</span>));</span><br><span class="line">m2.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">50</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printmap</span>(m2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">m.<span class="built_in">swap</span>(m2);</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printmap</span>(m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器 插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;   &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line"><span class="comment">//第四种</span></span><br><span class="line"><span class="comment">//[]不建议插入，用途 可以利用key访问到value</span></span><br><span class="line">m[<span class="number">4</span>] = <span class="number">40</span>; </span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">erase</span>(<span class="number">3</span>);<span class="comment">//按照key删除</span></span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找和统计</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//map容器  查找和统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator pos = m.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != m.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="string">&quot;     &quot;</span> &lt;&lt; <span class="string">&quot;value = &quot;</span> &lt;&lt; pos-&gt;second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到该元素！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计</span></span><br><span class="line"><span class="comment">//map不允许插入重复的key元素， count统计而言，结果要么为1 要么为0</span></span><br><span class="line"><span class="comment">//multimap的count统计可能大于1</span></span><br><span class="line"><span class="type">int</span> num = m.<span class="built_in">count</span>(<span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//map容器 排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>,myCompare&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">6</span>, <span class="number">60</span>));</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>,myCompare&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//栈容器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//特点：符合先进后出数据结构</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line"><span class="comment">//只要栈不为空，查看栈顶，并且执行出栈操作</span></span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查看栈顶元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶元素为：&quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 队列 queue容器  front队头  back队尾</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建队列</span></span><br><span class="line">queue&lt;person&gt;q;</span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="string">&quot;唐僧&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p4</span><span class="params">(<span class="string">&quot;沙僧&quot;</span>, <span class="number">300</span>)</span></span>;</span><br><span class="line">q.<span class="built_in">push</span>(p1);</span><br><span class="line">q.<span class="built_in">push</span>(p2);</span><br><span class="line">q.<span class="built_in">push</span>(p3);</span><br><span class="line">q.<span class="built_in">push</span>(p4);</span><br><span class="line"><span class="comment">//判断队列是否为空，查看队头，查看队尾，出队</span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//查看队头</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队头元素-姓名：&quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_age &lt;&lt; endl;</span><br><span class="line"><span class="comment">//查看队尾</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队尾元素-姓名：&quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_age &lt;&lt; endl;</span><br><span class="line"><span class="comment">//查看队中元素个数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前队列中元素个数为:&quot;</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set容器"><a href="#set容器" class="headerlink" title="set容器"></a>set容器</h2><ul><li>构造与赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set构造以及赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_set</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据只有insert方式</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="comment">//set容器特点，所有元素插入时自动排序</span></span><br><span class="line"><span class="comment">//set容器不允许插入重复值</span></span><br><span class="line"><span class="built_in">print_set</span>(s1);</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;<span class="built_in">s2</span>(s1);</span><br><span class="line"><span class="built_in">print_set</span>(s2);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;s3;</span><br><span class="line">s3 = s2;</span><br><span class="line"><span class="built_in">print_set</span>(s3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>大小和交换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set容器大小和交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;s1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s2;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">90</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">s1.<span class="built_in">swap</span>(s2);</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set容器大小和交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(set&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;s1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s2;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">90</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">s1.<span class="built_in">swap</span>(s2);</span><br><span class="line"><span class="built_in">print</span>(s1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找和统计</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//set查找和统计</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">69</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator pos = s1.<span class="built_in">find</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != s1.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到元素：&quot;</span> &lt;&lt; *pos &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;s1;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">69</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line"><span class="type">int</span> num = s1.<span class="built_in">count</span>(<span class="number">30</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num=&quot;</span> &lt;&lt; num;</span><br><span class="line"><span class="comment">//对于set而言 统计结果要么为1 要么为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h2><ul><li>构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//deque构造函数</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//容器里的数据不可以修改，只读</span></span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;<span class="built_in">d2</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;<span class="built_in">d3</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(d3);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;<span class="built_in">d4</span>(d3);</span><br><span class="line"><span class="built_in">print</span>(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>赋值操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//deque容器赋值操作</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="comment">//operator = 赋值</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">d2 = d1;</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line">   <span class="comment">//assign 赋值</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">d3.<span class="built_in">assign</span>(d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d3);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d4;</span><br><span class="line">d4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(d4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大小操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//deque容器  大小操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)d1.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="keyword">if</span> (d1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d1的大小为：&quot;</span> &lt;&lt; d1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//deque容器没有容量概念</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新指定容器大小</span></span><br><span class="line">d1.<span class="built_in">resize</span>(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">d1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//deque容器插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两端操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">d1.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line">d1.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对指定位置操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">d2.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">d2.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">d2.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">d2.<span class="built_in">push_front</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line"><span class="comment">//insert插入</span></span><br><span class="line">d2.<span class="built_in">insert</span>(d2.<span class="built_in">begin</span>(), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line">d2.<span class="built_in">insert</span>(d2.<span class="built_in">begin</span>() + <span class="number">1</span>, <span class="number">2</span>, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">print</span>(d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照区间进行插入</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">d3.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">d3.<span class="built_in">insert</span>(d3.<span class="built_in">begin</span>(), d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">d1.<span class="built_in">erase</span>(d1.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;::iterator it = d1.<span class="built_in">begin</span>();</span><br><span class="line">it++;</span><br><span class="line">d1.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line"><span class="comment">//按照区间的方式删除</span></span><br><span class="line">d1.<span class="built_in">erase</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line">d1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据存取</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="comment">//deque容器数存取</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过[]方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; d1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//通过at方式访问元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; d1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; d1.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="comment">//deque排序</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">d1.<span class="built_in">push_back</span>(<span class="number">70</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">30</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">60</span>);</span><br><span class="line">d1.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序前的容器:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后的容器:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//排序 默认排序规则是从小到大</span></span><br><span class="line"><span class="comment">//对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</span></span><br><span class="line"><span class="comment">//vector容器也可以利用sort进行排序</span></span><br><span class="line"><span class="built_in">sort</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="priority-queue容器"><a href="#priority-queue容器" class="headerlink" title="priority_queue容器"></a>priority_queue容器</h2><p>优先队列，其底层是基于堆来进行实现的，在优先队列中，队首元素一定是当前队列中优先级最高的那一个</p><p>1.priority_queue的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>2.priority_queue容器内元素的访问</p><p>只能通过top()函数来访问队首元素（堆顶元素）,时间复杂度为O（1）,也就是优先级最高的元素,通过push()函数入队，其时间复杂度为O（logN)，通过pop()函数弹出队首元素出队，时间复杂度为O（logN)。empty()函数判断优先队列是否为空，返回true为空，返回false为非空。size()函数返回优先队列内元素的个数,时间复杂度为O（1）;</p><p>3.priority_queue内元素优先级的设置</p><p>（1）基本数据类型的优先级设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt; &gt;q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure><p>第二个参数vector<int>参数填写的是承载底层数据结构堆（heap)的容器，第三个参数less<int>则是对第一个参数的比较类，less<int>表示数字大的优先级大，greater<int>表示数字小的优先级大。</p><p>（2）结构体的优先级设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fruit</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> price;</span><br><span class="line">&#125;f1, f2, f3;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> fruit&amp; a,<span class="type">const</span> fruit&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.price &lt; b.price;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;fruit, vector&lt;fruit&gt;, cmp&gt; q;</span><br><span class="line">f1.name = <span class="string">&quot;桃子&quot;</span>;</span><br><span class="line">f1.price = <span class="number">15</span>;</span><br><span class="line">f2.name = <span class="string">&quot;苹果&quot;</span>;</span><br><span class="line">f2.price = <span class="number">20</span>;</span><br><span class="line">f3.name = <span class="string">&quot;菠萝&quot;</span>;</span><br><span class="line">f3.price = <span class="number">12</span>;</span><br><span class="line">q.<span class="built_in">push</span>(f1);</span><br><span class="line">q.<span class="built_in">push</span>(f2);</span><br><span class="line">q.<span class="built_in">push</span>(f3);</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">top</span>().name &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; q.<span class="built_in">top</span>().price &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pair容器"><a href="#pair容器" class="headerlink" title="pair容器"></a>pair容器</h2><p>pair实际上可以看作一个内部含有两个元素的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pair</span>&#123;</span></span><br><span class="line">    typename first;</span><br><span class="line">    typename second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1.pair的定义，要使用pair要添加头文件#include<utility>，由于map的内部涉及pair，故添加map头文件也能使用pair.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;typename1, typename2&gt; name;</span><br></pre></td></tr></table></figure><p>2.pair中元素的访问</p><p>pair中只有两个元素，分别是frist和second，只需要按照正常结构体方式去访问即可。</p><p>3.pair常用函数</p><p>比较操作数</p><p>两个pair类型数据进行比较可以直接使用&#x3D;&#x3D;，！&#x3D;，&gt;,&lt;比较大小，比较规则是先以first的大小作为标准，只有当first相等时才会去判别second的大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">p1</span>(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">p2</span>(<span class="number">5</span>,<span class="number">22</span>);</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">p3</span>(<span class="number">3</span>,<span class="number">20</span>);</span><br><span class="line">cout&lt;&lt;(p1&lt;p2?<span class="string">&quot;p1&lt;p2&quot;</span>:<span class="string">&quot;p1&gt;=p2&quot;</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;(p1&lt;p3?<span class="string">&quot;p1&lt;p3&quot;</span>:<span class="string">&quot;p1&gt;=p3&quot;</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="algorithm头文件下的常用函数"><a href="#algorithm头文件下的常用函数" class="headerlink" title="algorithm头文件下的常用函数"></a>algorithm头文件下的常用函数</h2><p>1.max(),min(),abs()</p><p>max(x,y)和min(x,y)分别返回x与y中的最大值与最小值，且参数必须是两个（可以是浮点数）,abs(x)返回x的绝对值。且x必须是整数，浮点数的绝对值采用fabs()。</p><p>2.swap()</p><p>swap(x,y)用来交换x与y的值。</p><p>3.reverse(it,it2)可以将数组指针在[it,it2)之间的元素或者容器的迭代器在[it，it2)范围内的元素进行反转。</p><p>4.next_permutation()</p><p>next_permutation()给出一个序列在全序列中的下一个序列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;arr[<span class="number">1</span>]&lt;&lt;arr[<span class="number">2</span>]&lt;&lt;arr[<span class="number">3</span>]&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(arr,arr+<span class="number">4</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.fill()</p><p>fill()可以把数组或者容器中的某一段区间赋值某个相同的值。和memset不同，这里的赋值可以是数组类型对应范围中的任意值。</p><p>6.sort()</p><p>sort(首元素地址，尾元素地址的下一个地址，比较函数)对数据进行排序</p><p>7.lower_bound()和upper_bound()</p><p>lower_bound和upper_bound需要用在一个有序数组或者容器中</p><p>lower_bound(first,last,val)用来寻找在数组或者容器的[first,last)范围内第一个值大于等于val的元素的位置</p><p>upper_bound(first,last,val)用来寻找在数组或者容器的[first,last)范围内第一个值大于val的元素的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> *lowerPos=<span class="built_in">lower_bound</span>(arr,arr+<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> *upperPos=<span class="built_in">upper_bound</span>(arr,arr+<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;第一个大于等于2的元素的位置为：&quot;</span>&lt;&lt;lowerPos&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;第一个大于2的元素的位置为：&quot;</span>&lt;&lt;upperPos&lt;&lt;endl;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2024/02/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2024/02/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划（Dynamic Programming,DP)是一种用来解决一类最优化问题的算法思想。简单来说，动态规划就是将一个复杂的问题分解成若干个子问题，通过综合子问题的最优解来得到原问题的最优解。需要注意的是，动态规划会将每个求解过的子问题的解记录下来，这样当下次碰到相同的子问题时，就可以直接使用之前记录的结果，而不是重复计算。</p><p>关键:每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划(DP)。</p><p>核心：如何设计状态和状态转移方程</p><h2 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h2><p>二维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二维数组形式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 8</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> dp[N][N],w[N],v[N];<span class="comment">//w数组存储物品重量 v数组存储物品价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">//物品数量 背包容量</span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);<span class="comment">//核心递推式</span></span><br><span class="line"><span class="keyword">else</span> dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;max = &quot;</span>&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滚动数组一维优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//滚动一维数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 8</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> dp[N],w[N],v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=w[i];j--)<span class="comment">//逆序更新dp数组，因为dp[j]依赖于dp表左上方的值来进行更新</span></span><br><span class="line">&#123;</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;max = &quot;</span>&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>二维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="comment">/* 4 10</span></span><br><span class="line"><span class="comment">   3 3</span></span><br><span class="line"><span class="comment">   2 1</span></span><br><span class="line"><span class="comment">   4 5</span></span><br><span class="line"><span class="comment">   7 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> w[N],v[N];<span class="comment">//w数组存放重量，v数组存放价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++) &#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i&lt;=n ; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=m ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j-w[i]]+v[i]);<span class="comment">/*核心递推式 与0-1背包区别是dp[i][j-w[i]]+v[i]，而0-1背包是dp[i-1][j-w[i]]+v[i]*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一维滚动数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//一维滚动数组</span></span><br><span class="line"><span class="comment">/* 4 10</span></span><br><span class="line"><span class="comment">   3 3</span></span><br><span class="line"><span class="comment">   2 1</span></span><br><span class="line"><span class="comment">   4 5</span></span><br><span class="line"><span class="comment">   7 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="type">int</span> w[N],v[N];<span class="comment">//质量 价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; j++)<span class="comment">//注意了，这里的j是从小到大枚举，和01背包不一样,01背包必须逆序</span></span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;maxn=&quot;</span>&lt;&lt;dp[m] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最长连续子序列之和"><a href="#最长连续子序列之和" class="headerlink" title="最长连续子序列之和"></a>最长连续子序列之和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn=200010</span></span><br><span class="line"><span class="type">int</span> arr[maxn],dp[maxn];<span class="comment">//arr[i]存放序列 dp[i]存放以arr[i]结尾的连续序列之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=arr[<span class="number">0</span>];<span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=<span class="built_in">max</span>(arr[i],dp[i<span class="number">-1</span>]+arr[i]);<span class="comment">//状态转移方程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i]&gt;dp[k])<span class="comment">//寻找最大值</span></span><br><span class="line">&#123;</span><br><span class="line">k=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[k]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//-2 11 -4 13 -5 -2</span></span><br><span class="line"><span class="comment">//输出 20</span></span><br></pre></td></tr></table></figure><h2 id="最长不下降子序列-LIS"><a href="#最长不下降子序列-LIS" class="headerlink" title="最长不下降子序列(LIS)"></a>最长不下降子序列(LIS)</h2><p>在一个数字序列中找到一个最长的子序列（可以不连续），使得这个序列是不下降的（非递减的).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：8</span></span><br><span class="line"><span class="comment">1 2 3 -9 3 9 0 11</span></span><br><span class="line"><span class="comment">输出：6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> A[N],dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)cin&gt;&gt;A[i];</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-1</span>;<span class="comment">//记录最大值的dp[i]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">dp[i]=<span class="number">1</span>;<span class="comment">//边界初始条件</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&gt;=A[j]&amp;&amp;dp[j]+<span class="number">1</span>&gt;dp[i]) &#123;<span class="comment">//转移方程</span></span><br><span class="line">dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(dp[i],ans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列（LCS）"><a href="#最长公共子序列（LCS）" class="headerlink" title="最长公共子序列（LCS）"></a>最长公共子序列（LCS）</h2><p>给定两个字符串（或者数字序列）A和B,求一个字符串，使得这个字符串是A和B的最长公共部分（子序列可以不连续）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">char</span> A[N],B[N];<span class="comment">//A B字符串</span></span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">gets</span>(A+<span class="number">1</span>);<span class="comment">//从下标1开始读入</span></span><br><span class="line"><span class="built_in">gets</span>(B+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> lenA=<span class="built_in">strlen</span>(A+<span class="number">1</span>);<span class="comment">//由于读入时从下标1开始，因此读取长度也是从1开始</span></span><br><span class="line"><span class="type">int</span> lenB=<span class="built_in">strlen</span>(B+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//边界初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=lenA;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=lenB;j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态转移方程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lenA;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=lenB;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==B[j])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;<span class="comment">//如果相同，则从dp表左上角+1赋值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> dp[i][j]=<span class="built_in">max</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j]);<span class="comment">//不相同 则取左边或者上面较大的赋值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[lenA][lenB]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>给出一个字符串S，求S的最长回文子串的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="type">char</span> S[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">gets</span>(S);<span class="comment">//从下标0开始读入字符串</span></span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(S),ans=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));<span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(S[i]==S[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">ans=<span class="number">2</span>;<span class="comment">//初始化时注意当前最长回文子串长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态转移方程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">3</span>;L&lt;=len;L++)<span class="comment">//枚举子串的长度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i+L<span class="number">-1</span>&lt;len;i++)<span class="comment">//枚举子串的起始端点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=i+L<span class="number">-1</span>;<span class="comment">//子串的右端点</span></span><br><span class="line"><span class="keyword">if</span>(S[i]==S[j]&amp;&amp;dp[i+<span class="number">1</span>][j<span class="number">-1</span>]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j]=<span class="number">1</span>;</span><br><span class="line">ans=L;<span class="comment">//更新回文子串长度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAG（有向无环图）最长路"><a href="#DAG（有向无环图）最长路" class="headerlink" title="DAG（有向无环图）最长路"></a>DAG（有向无环图）最长路</h2><h3 id="求整个DAG的最长路径（即不固定起点和终点）"><a href="#求整个DAG的最长路径（即不固定起点和终点）" class="headerlink" title="求整个DAG的最长路径（即不固定起点和终点）"></a>求整个<a href="https://so.csdn.net/so/search?q=DAG&spm=1001.2101.3001.7020">DAG</a>的最长路径（即不固定起点和终点）</h3><p>给定一个<a href="https://so.csdn.net/so/search?q=%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE&spm=1001.2101.3001.7020">有向无环图</a>，怎么求解整个图所有路径中权值之和最大的那条。</p><p>令dp[i]表示从i号顶点出发能获得的最长路径长度，这样所有dp[i]中的最大值就是整个DAG的最长路径。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DP</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];<span class="comment">//dp[i]已计算完毕</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)<span class="comment">//遍历i的所有出边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">DP</span>(j)+G[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];<span class="comment">//返回计算完毕的dp[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从出度为0的顶点出发的最长路径长度为0，因此边界为这些顶点的dp值为0。<br>但具体实现，可以对整个数组dp初始化为0，这样dp函数当前访问的顶点i的出度为0时，就会返回dp[i]&#x3D; 0(以此为dp的边界)，而出度不为0的顶点则会递归求解，递归过程中遇到已经计算过的顶点，则会直接返回对应的dp值。</p><h3 id="求解最长路径"><a href="#求解最长路径" class="headerlink" title="求解最长路径"></a>求解最长路径</h3><p>可以开一个int型数组choice来记录最长路径上顶点的后继顶点。【如果存在多条最长路径，把choice数组改为vector数组】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DP</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];<span class="comment">//dp[i]已计算完毕</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)<span class="comment">//遍历i的所有出边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != INF)&#123;</span><br><span class="line">            <span class="type">int</span> temp = <span class="built_in">DP</span>(j) + G[i][j];<span class="comment">//单独计算，防止if调用DP函数两次</span></span><br><span class="line">            <span class="keyword">if</span>(temp &gt; dp[i])&#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">                choice[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];<span class="comment">//返回计算完毕的dp[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用前，要先求出最大的dp[i],然后将i作为路径起点传人</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPath</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">while</span>(choice[i] != <span class="number">-1</span>)&#123;<span class="comment">//choice初始化为-1</span></span><br><span class="line">        i = choice[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&gt;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>记录每次决策所选择的策略，然后在dp数组计算完毕之后，根据具体情况进行递归或迭代来获取方案。</li></ul><h3 id="实际例题"><a href="#实际例题" class="headerlink" title="实际例题"></a>实际例题</h3><p>问题 A: 矩形嵌套</p><p>题目描述<br>有n个矩形，每个矩形可以用a,b来描述，表示长和宽。矩形X(a,b)可以嵌套在矩形Y(c,d)中当且仅当a&lt;c,b&lt;d或者b&lt;c,a&lt;d（相当于旋转X90度）。例如（1,5）可以嵌套在（6,2）内，但不能嵌套在（3,4）中。你的任务是选出尽可能多的矩形排成一行，使得除最后一个外，每一个矩形都可以嵌套在下一个矩形内。<br>输入<br>第一行是一个正正数N(0&lt;N&lt;10)，表示测试数据组数，<br>每组测试数据的第一行是一个正正数n，表示该组测试数据中含有矩形的个数(n&lt;&#x3D;1000)<br>随后的n行，每行有两个数a,b(0&lt;a,b&lt;100)，表示矩形的长和宽<br>输出<br>每组测试数据都输出一个数，表示最多符合条件的矩形数目，每组输出占一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">样例输入 </span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">5 8</span><br><span class="line">6 10</span><br><span class="line">7 9</span><br><span class="line">3 1</span><br><span class="line">5 8</span><br><span class="line">12 10</span><br><span class="line">9 7</span><br><span class="line">2 2</span><br><span class="line">样例输出 </span><br><span class="line">5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">-1000000000</span>;</span><br><span class="line"><span class="type">int</span> dp[MAXN];</span><br><span class="line"><span class="type">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> edge[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最长路径长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dp</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> temp = <span class="built_in">Dp</span>(j) + G[i][j];</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; dp[i])&#123;</span><br><span class="line">                dp[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="built_in">sizeof</span>(G));<span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">fill</span>(dp, dp + MAXN, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, maxIndex;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;edge[i][<span class="number">0</span>], &amp;edge[i][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(edge[i][<span class="number">0</span>] &lt; edge[i][<span class="number">1</span>])&#123;<span class="comment">//长的边靠前</span></span><br><span class="line">                <span class="built_in">swap</span>(edge[i][<span class="number">0</span>], edge[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(edge[i][<span class="number">0</span>] &gt; a &amp;&amp; edge[i][<span class="number">1</span>] &gt; b)&#123;<span class="comment">//求最大的矩形，即源点</span></span><br><span class="line">                a = edge[i][<span class="number">0</span>];</span><br><span class="line">                b = edge[i][<span class="number">1</span>];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)<span class="comment">//构建有向图</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(edge[i][<span class="number">0</span>] &gt; edge[j][<span class="number">0</span>] &amp;&amp; edge[i][<span class="number">1</span>] &gt; edge[j][<span class="number">1</span>])&#123;<span class="comment">//矩形i能嵌套矩形j</span></span><br><span class="line">                    G[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(edge[i][<span class="number">0</span>] &lt; edge[j][<span class="number">0</span>] &amp;&amp; edge[i][<span class="number">1</span>] &lt; edge[j][<span class="number">1</span>])&#123;<span class="comment">//矩形j能被矩形i嵌套</span></span><br><span class="line">                    G[j][i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">Dp</span>(maxIndex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + <span class="number">1</span>);<span class="comment">//顶点数为最长路径长度（边数）+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2024/02/04/java%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/04/java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习笔记"><a href="#Java学习笔记" class="headerlink" title="Java学习笔记"></a>Java学习笔记</h1><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="1、遍历数组"><a href="#1、遍历数组" class="headerlink" title="1、遍历数组"></a>1、遍历数组</h3><ul><li>法1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> b[][]=&#123;&#123;<span class="number">1</span>&#125;.&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//定义二维数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;b.length;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;b[k].length;c++)&#123;</span><br><span class="line">                System.out.print(b[k][c]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>法2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">deo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[][]= &#123;&#123;<span class="number">4</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的元素是：&quot;</span>);</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//外层循环计数器变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x[]:arr) &#123; <span class="comment">//外层循环变量为一维数组</span></span><br><span class="line">i++;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e:x) &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(i==arr.length&amp;&amp;j==x.length) &#123;</span><br><span class="line">System.out.print(e);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(e+<span class="string">&quot;、&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、填充替换数组元素"><a href="#2、填充替换数组元素" class="headerlink" title="2、填充替换数组元素"></a>2、填充替换数组元素</h3><ul><li>fill(int [] arr,int value)；</li><li>1.arr：要进行填充的数组；</li><li>2.value：要存储数组中所有元素的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays; <span class="comment">//导包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">8</span>);<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>fill(int[] arr,int from,int to,int value)；</li><li>1.arr：要进行填充的数组；</li><li>2.from：要使用指定值填充的第一个元素的索引（包括）；</li><li>3.to：要使用指定值填充的最后一个元素的索引（不包括）；</li><li>4.value：要分配给数组指定范围中的每个元素的值.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">Arrays.fill(arr,<span class="number">1</span>,<span class="number">3</span>, <span class="number">8</span>);<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、对数组进行排序"><a href="#3、对数组进行排序" class="headerlink" title="3、对数组进行排序"></a>3、对数组进行排序</h3><p>Arrays.sort(object)；</p><p>object为需要进行排序的数组名称.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">Arrays.fill(arr,<span class="number">1</span>,<span class="number">3</span>, <span class="number">8</span>);<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line">Arrays.sort(arr);<span class="comment">//从小到大排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">int</span> []arr=<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">43</span>,<span class="number">54</span>,<span class="number">65</span>&#125;;<span class="comment">//创建一个数组</span></span><br><span class="line">     BubbleSort sorter=<span class="keyword">new</span> <span class="title class_">BubbleSort</span>();<span class="comment">//创建冒泡排序类的对象</span></span><br><span class="line">     sorter.sort(arr);<span class="comment">//调用排序方法，对数组进行排序</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> []arr)</span> &#123;<span class="comment">//冒泡排序</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;<span class="comment">//排序趟数</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-i;j++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">     <span class="type">int</span> temp=arr[j];</span><br><span class="line">     arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">     arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;<span class="comment">//打印输出数组</span></span><br><span class="line">     System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;<span class="comment">//选择排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[]arr= &#123;<span class="number">43</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">7</span>&#125;;</span><br><span class="line">sort(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line"><span class="comment">//每次排序一趟找出待排序元素中的最大值放到末尾</span></span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=arr.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[index]) &#123;</span><br><span class="line">index=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换index和arr.length-i的值</span></span><br><span class="line"><span class="type">int</span> temp=arr[arr.length-i];</span><br><span class="line">arr[arr.length-i]=arr[index];</span><br><span class="line">arr[index]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;<span class="comment">//打印输出数组</span></span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]= &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>&#125;;</span><br><span class="line">sort(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> []arr)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;原数组元素内容为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="type">int</span> temp,len=arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++) &#123;</span><br><span class="line"><span class="comment">//交换元素位置   </span></span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i]=arr[len-i-<span class="number">1</span>];</span><br><span class="line">arr[len-<span class="number">1</span>-i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;新数组元素内容为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&gt;&quot;</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、复制数组"><a href="#4、复制数组" class="headerlink" title="4、复制数组"></a>4、复制数组</h3><p>copyOf(arr,int newlength)；</p><p>arr：要进行复制的数组；</p><p>newlength：int型常量，指复制后的新数组的长度。如果新数组长度大于原数组长度，则用0（null)来填充；</p><p>若小于原数组长度，则会从原数组的第一个元素开始截取至满足新数组长度为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr2[]=Arrays.copyOf(arr,<span class="number">3</span>);<span class="comment">//复制数组，新数组长度小于原数组</span></span><br><span class="line"><span class="type">int</span> arr3[]=Arrays.copyOf(arr, <span class="number">10</span>);<span class="comment">//复制数组，新数组长度大于原数组，多的部分用0填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr2.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr3.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr3[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>copyOfRange(arr,int from,int to)；</p><p>arr：要复制的数组</p><p>from：指开始复制数组的索引位置(包括）;</p><p>to：指开始复制数组的结束索引位置（不包括）;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr2[]=Arrays.copyOfRange(arr,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//复制数组</span></span><br><span class="line"><span class="type">int</span> arr3[]=Arrays.copyOfRange(arr,<span class="number">0</span>,<span class="number">10</span>);<span class="comment">//超过部分会用0填充</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr2.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr3.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+arr3[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、查询数组"><a href="#5、查询数组" class="headerlink" title="5、查询数组"></a>5、查询数组</h3><p>binarySearch(Object[] arr, Object value); &#x2F;&#x2F;返回的是搜素值得索引，否则返回-1或‘  -  ’（插入点）;</p><p>arr：要搜素的数组；</p><p>value：要搜素的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> index=Arrays.binarySearch(arr, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3的索引位置是：&quot;</span>+index);</span><br><span class="line"><span class="type">int</span> index2=Arrays.binarySearch(arr, <span class="number">11</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;11的索引位置是：&quot;</span>+index2+<span class="string">&quot;(数组中未找到该元素）&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>binarySearch(object[] arr,int from,int to,int value);</p><p>arr：要进行检索的数组；</p><p>from：指定范围检索的开始处索引（包括）;</p><p>to：指定范围检索的结束处索引（不包括）;</p><p>value：要搜素的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swap</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> index=Arrays.binarySearch(arr,<span class="number">0</span>,<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3的索引位置是：&quot;</span>+index);</span><br><span class="line"><span class="type">int</span> index2=Arrays.binarySearch(arr,<span class="number">0</span>,<span class="number">5</span>, <span class="number">11</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;11的索引位置是：&quot;</span>+index2+<span class="string">&quot;(数组中未找到该元素）&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><p>单个字符可以用char类型保存，多个字符组成的文本就需要保存在String对象中。String通常称为字符串，一个String对象最多可以保存2^32-1个字节（占用4GB空间大小）的文本内容。</p><h3 id="1、声明、创建字符串"><a href="#1、声明、创建字符串" class="headerlink" title="1、声明、创建字符串"></a>1、声明、创建字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str;<span class="comment">//声明字符串</span></span><br><span class="line"><span class="comment">//声明的字符串变量必须经过初始化后才能使用，否则编译器会报出&quot;变量未被初始化错误&quot;。</span></span><br><span class="line"><span class="comment">//创建字符串</span></span><br><span class="line"><span class="type">char</span> a[]=&#123;<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">String s=<span class="keyword">new</span> <span class="title class_">String</span>(a);    <span class="comment">//等价于String s=new String(&quot;good&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[]=[<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line">String s=<span class="keyword">new</span> <span class="title class_">String</span>(a,<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//等价于String s=new String(&quot;udent&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String str1;</span><br><span class="line">str1=<span class="string">&quot;Student&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2、连接字符串"><a href="#2、连接字符串" class="headerlink" title="2、连接字符串"></a>2、连接字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Link</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String str1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;春色绿千里&quot;</span>);</span><br><span class="line">String str2=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;马蹄香万家&quot;</span>);</span><br><span class="line">String s=str1+<span class="string">&quot;\n&quot;</span>+str2;</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="type">int</span> booktime=<span class="number">4</span>;</span><br><span class="line"><span class="type">float</span> practice=<span class="number">6.5f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;我每天花费&quot;</span>+booktime+<span class="string">&quot;小时看书；&quot;</span>+practice+<span class="string">&quot;小时上机训练&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、获取字符串信息"><a href="#3、获取字符串信息" class="headerlink" title="3、获取字符串信息"></a>3、获取字符串信息</h3><ul><li>使用String类的length()方法可以获取声明的字符串对象的长度.</li><li>indexOf(String s)；&#x2F;&#x2F;该方法返回参数字符串s在指定字符串中首次出现的索引位置。若未找到字符串s，则会返回-1.</li><li>lastIndexOf(String str)；&#x2F;&#x2F;该方法返回参数字符串s在指定字符串中最后一次出现的索引位置。若未找到字符串s，则会返回-1.</li><li>charAt(int index)方法可以将指定索引处的字符返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取字符串长度</span></span><br><span class="line">String str=<span class="string">&quot;We are student&quot;</span>;</span><br><span class="line"><span class="type">int</span> size=str.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.字符串查找</span></span><br><span class="line">String str=<span class="string">&quot;We are student&quot;</span>;</span><br><span class="line"><span class="type">int</span> index=str.indexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="type">int</span> index2=str.lastIndexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取指定索引位置的字符</span></span><br><span class="line">String str=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> mychar=str.chatAt(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="4、字符串操作"><a href="#4、字符串操作" class="headerlink" title="4、字符串操作"></a>4、字符串操作</h3><ul><li>获取子字符串</li></ul><p>substring(int begin)；</p><p>该方法返回的是从指定的索引位置开始截取到该字符串结尾的子串</p><p>substring(int begin,int end)；</p><p>该方法返回的是从字符串某一索引位置开始截取到某一索引位置结束的子串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取子字符串</span></span><br><span class="line">String sub1=str.substring(<span class="number">2</span>);</span><br><span class="line">String sub2=str.substring(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(sub1);</span><br><span class="line">System.out.println(sub2);</span><br></pre></td></tr></table></figure><ul><li>去除空格</li></ul><p>trim();</p><p>该方法返回字符串的副本，忽略掉前导空格和后导空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.去除空格</span></span><br><span class="line">String s=<span class="string">&quot; Java  学习 &quot;</span>;</span><br><span class="line">System.out.println(s.length());</span><br><span class="line">System.out.println(s.trim().length());</span><br></pre></td></tr></table></figure><ul><li>字符串替换</li></ul><p>replace(target, replacement)；</p><p>该方法可以实现将指定的字符或字符串替换成新的字符或字符串。</p><p>target:要替换的字符或字符串</p><p>replacement:用于替换原来字符串的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.替换字符串</span></span><br><span class="line">String s1=<span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String s2=s1.replace( <span class="string">&quot;l&quot;</span>,<span class="string">&quot;L&quot;</span>);</span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure><ul><li>判断字符串的开始与结尾</li></ul><p>startWith(String prefix)；</p><p>该方法判断当前字符串对象的前缀是否为参数指定的字符串。</p><p>prefix是指作为前缀的字符串。</p><p>endWith(String suffix)；</p><p>该方法用于判断当前字符串是否以给定的字符串结束。</p><p>suffix是指作为后缀的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.判断字符串的开始与结束</span></span><br><span class="line">String num1=<span class="string">&quot;22045612&quot;</span>;</span><br><span class="line">String num2=<span class="string">&quot;21304578&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> flag1=num1.startsWith(<span class="string">&quot;22&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> flag2=num2.endsWith(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串num1是以&#x27;22&#x27;开始的吗？&quot;</span>+flag1);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串num2是以&#x27;11&#x27;结束的吗？&quot;</span>+flag2);</span><br></pre></td></tr></table></figure><ul><li>判断字符是否相等</li></ul><p>equals(String str)；</p><p>该方法用于判断两个字符串是否相等，且区分大小写，返回的是boolean类型。</p><p>equalsLgnoreCase(String str)；</p><p>该方法用于判断两个字符串是否相等，忽略字母的大小写，返回的是boolean类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.判断字符串是否相等</span></span><br><span class="line">String sh1=<span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">String sh2=<span class="string">&quot;HElloworld&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> a1=sh1.equals(sh2);<span class="comment">//区分大小写</span></span><br><span class="line"><span class="type">boolean</span> a2=sh1.equalsIgnoreCase(sh2);<span class="comment">//忽略大小写</span></span><br><span class="line">System.out.println(a1);</span><br><span class="line">System.out.println(a2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>按字典序比较两个字符串</li></ul><p>compareTo(String str)；</p><p>该方法按照字典顺序比较两个字符串，若按照字典顺序此String对象位于参数字符串之前则返回一个负整数，位于之后，则返回一个正整数，如果两个字符串相同则返回0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.按字典顺序比较两个字符串</span></span><br><span class="line">String sa1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String sa2=<span class="string">&quot;hallo&quot;</span>;</span><br><span class="line"><span class="type">int</span> compare=sa1.compareTo(sa2);</span><br><span class="line">System.out.println(compare);</span><br></pre></td></tr></table></figure><ul><li>字母大小写转换</li></ul><p>toLowerCase()；</p><p>将字符串中所有大写字母转化为小写字母；</p><p>toUpperCase()；</p><p>将字符串中所有小写字母转化为大写字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.字母大小写转换</span></span><br><span class="line">sa1=<span class="string">&quot;heelll&quot;</span>;</span><br><span class="line">String ss=sa1.toUpperCase();</span><br><span class="line">String sss=ss.toLowerCase();</span><br><span class="line">System.out.println(ss);</span><br><span class="line">System.out.println(sss);</span><br></pre></td></tr></table></figure><ul><li>字符串分割</li></ul><p>1.split(String sign)；</p><p>该方法可以将给定的分割符对字符串进行拆分，其中sign为分割字符串的分割符。</p><p>2.split(String sign,int limit)；</p><p>该方法可以根据给定的分割符对字符串进行拆分，并限定拆分的次数，其中sign为分割字符串的分割符，limit为限制的拆分次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.字符串分割</span></span><br><span class="line">str=<span class="string">&quot;192.168.0.1&quot;</span>;</span><br><span class="line">String[]firstArray=str.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">String[]secondArray=str.split(<span class="string">&quot;\\.&quot;</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;str的原值为：[&quot;</span>+str+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;全部分割后的结果为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String a:firstArray) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>+a+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(<span class="string">&quot;分割两次后的结果为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String a:secondArray) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;[&quot;</span>+a+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h3 id="5、字符串生成器"><a href="#5、字符串生成器" class="headerlink" title="5、字符串生成器"></a>5、字符串生成器</h3><p>如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费内存空间，而这种操作还不可避免。因此我们可以通过StringBuild类来解决这个问题。</p><p>StringBuilder是一个可变的字符串类，我们可以把它看作一个容器，这里的可变指的是StringBuilder对象中的内容是可变的</p><p><strong>StringBuilder和String的区别：</strong></p><ul><li>StringBuilder：内容是可变的</li><li>String：内容是不变的</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>public StringBuilder()；  创建一个空白可变字符串对象，不含任何内容</p><p>public StringBuilder(String str)；  根据字符串的内容，来创建可变字符串对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//public StringBuilder();创建一个空白可变字符串对象，不含任何内容</span></span><br><span class="line"><span class="comment">//public StringBuilder(String str);根据字符串的内容，来创建可变字符串对象</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">System.out.println(<span class="string">&quot;sb.length():&quot;</span>+sb.length());</span><br><span class="line">StringBuilder sb2=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2:&quot;</span>+sb2);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2.length():&quot;</span>+sb2.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加和反转方法"><a href="#添加和反转方法" class="headerlink" title="添加和反转方法"></a>添加和反转方法</h4><p>public StringBuilder append(任意类型) ；   添加数据，并返回对象本身</p><p>public StringBuilder reverse()；     返回相反的字符序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加和反转方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//public StringBuilder append(任意类型);添加数据，并返回对象本身</span></span><br><span class="line"><span class="comment">//public StringBuilder reverse();返回相反的字符序列</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">StringBuilder sb2=sb.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2:&quot;</span>+sb2);</span><br><span class="line">System.out.println(<span class="string">&quot;sb2.length():&quot;</span>+sb2.length());</span><br><span class="line">sb.append(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">//链式编程</span></span><br><span class="line">sb.append(<span class="string">&quot; good &quot;</span>).append(<span class="string">&quot;C++ &quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">System.out.println(<span class="string">&quot;sb.length():&quot;</span>+sb.length());</span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">System.out.println(<span class="string">&quot;sb.length():&quot;</span>+sb.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="StringBuilder和String的相互转换"><a href="#StringBuilder和String的相互转换" class="headerlink" title="StringBuilder和String的相互转换"></a>StringBuilder和String的相互转换</h4><ul><li><p>StringBuilder转换为String</p><p>public String toString()；  通过toSTring可以实现把StringBuilder转换为String</p></li><li><p>String转换为StringBuilder</p><p>public StringBuilder(String str)；  通过构造方法实现把String转换为StringBuilder</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StringTest;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhuanhuan</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//public String toString();通过toSTring可以实现把StringBuilder转换为String</span></span><br><span class="line"><span class="comment">//public StringBuilder(String str);通过构造方法实现把String转换为StringBuilder</span></span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String str=sb.toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line">String temp=<span class="string">&quot;java&quot;</span>;</span><br><span class="line">StringBuilder temp2=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(temp);</span><br><span class="line">System.out.println(temp2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、正则表达式"><a href="#6、正则表达式" class="headerlink" title="6、正则表达式"></a>6、正则表达式</h3><p>正则表达式可以检验字符串是否满足一定的规则，并用来校验数据格式的合法性。</p><p>作用：</p><ul><li>校验字符串是否满足规则</li><li>在一段文本中查找满足要求的内容</li></ul><p><strong>字符类(只匹配一个字符)</strong></p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>[abc]</td><td>只能是a,b,c</td></tr><tr><td>[^abc]</td><td>除了a,b,c之外的任何字符</td></tr><tr><td>[a-zA-Z]</td><td>a到z，A到Z，包括(范围)</td></tr><tr><td>[a-d[m-p]]</td><td>a到d或者m到p</td></tr><tr><td>[a-z&amp;&amp;[def]]</td><td>a-z和def的交集，为：d,e,f</td></tr><tr><td>[a-z&amp;&amp;[^bc]]</td><td>a-z和非bc的交集。等同于[ad-z]</td></tr><tr><td>[a-z&amp;&amp;[^m-p]]</td><td>a到z除了m到p的交集。等同于[a-lq-z]]</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static matches(String regex): 判断是否与正则表达式匹配，匹配返回true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//只能是a,b,c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------1--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ab&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">//false 一个中括号只表示一个字符，含有2个字符故会返回false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不能出现a,b,c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------2---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false 一个中括号只表示一个字符，含有2个字符故会返回false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc][^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//a到z A到Z（包括头尾的范围）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------3--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//a[d[m-p]] a到d 或m-p</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------4--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;p&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;e&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//[a-z&amp;&amp;[def]]  a-z和def的交集，为def</span></span><br><span class="line">        <span class="comment">//细节：如果要求两个范围的交集，那么需要写符号&amp;&amp;</span></span><br><span class="line">        <span class="comment">//如果写成了&amp;，那么此时&amp;不表示交集，仅仅表示一个简简单单的符号&amp;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------5---------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&amp;&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^bc]] a-z和非bc的交集。 等同于[ad-z]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------6--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^m-p]] a到和和除了m到p的交集。 等同于[a-lq-z]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------7--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>预定义字符(只匹配一个字符)</strong></p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>任何字符</td></tr><tr><td>\d</td><td>一个数字：[0-9]</td></tr><tr><td>\D</td><td>非数字：[^0-9]</td></tr><tr><td>\s</td><td>一个空白字符[\t\n\x0B\f\r]</td></tr><tr><td>\S</td><td>非空白字符[^\s]</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9] 英文、数字、下划线</td></tr><tr><td>\W</td><td>[^\w]  一个非单词字符</td></tr></tbody></table><p><strong>数量词</strong></p><p>X?     X，一次或0次</p><p>X* X，零次或多次</p><p>X+ X，一次或多次</p><p>X{n}X，至少n次</p><p>X{n,m}至少n但不超过m次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  \  转义字符  改变后面那个字符原来的含义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// .表示任意一个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你a&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\d只能是任意一个数字 简单来记：两个\\表示一个\</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;22&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\w表示只能是一位单词字符 [a-zA-Z_0-9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;_&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;W&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1w&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\W 非单词字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\W&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//以上正则表达式只能校验单个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须是数字 字母 下划线 至少6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;22138ws32&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z_0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23df&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;\\w&amp;&amp;[^-]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、ArrayList"><a href="#三、ArrayList" class="headerlink" title="三、ArrayList"></a>三、ArrayList</h2><h3 id="1-ArrayList的构造与添加方法"><a href="#1-ArrayList的构造与添加方法" class="headerlink" title="1.ArrayList的构造与添加方法"></a>1.ArrayList的构造与添加方法</h3><p> ArrayList构造方法：<br>         public ArrayList();创建一个空的对象集合</p><p>  ArrayList添加方法：<br>         public boolean add(E e);&#x2F;&#x2F;将指定元素追加到此集合的末尾<br>         public void add(int index, E element);&#x2F;&#x2F;在此集合的指定位置插入指定的元素   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ArrayList构造方法：</span></span><br><span class="line"><span class="comment">         public ArrayList();创建一个空的对象集合</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">  ArrayList添加方法：</span></span><br><span class="line"><span class="comment">         public boolean add(E e);//将指定元素追加到此集合的末尾</span></span><br><span class="line"><span class="comment">         public void add(int index, E element);//在此集合的指定位置插入指定的元素   </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">case1</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个空的对象</span></span><br><span class="line">       ArrayList&lt;String&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">       <span class="comment">//在集合末尾追加元素</span></span><br><span class="line">       System.out.println(array.add(<span class="string">&quot;Hello&quot;</span>));<span class="comment">//返回的是boolean类型</span></span><br><span class="line">       array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">       array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       <span class="comment">//在集合指定位置添加元素</span></span><br><span class="line">       array.add(<span class="number">1</span>,<span class="string">&quot;good&quot;</span>);</span><br><span class="line">       array.add(<span class="number">4</span>,<span class="string">&quot;people&quot;</span>);</span><br><span class="line">       <span class="comment">//输出集合</span></span><br><span class="line">       System.out.println(<span class="string">&quot;array : &quot;</span>+array);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、ArrayList的常用方法"><a href="#2、ArrayList的常用方法" class="headerlink" title="2、ArrayList的常用方法"></a>2、ArrayList的常用方法</h3><p>public boolean remove(Object o);删除指定元素，返回删除是否成功</p><p> public E remove(int index);删除指定索引位置上的元素，并返回删除元素</p><p> public E set(int index, E element);修改指定位置处的元素，返回被修改的元素</p><p> public E get(int index);返回指定索引处的元素</p><p> public int size();返回集合中元素的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"><span class="comment">//ArrayList的常用方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public boolean remove(Object o);删除指定元素，返回删除是否成功</span></span><br><span class="line"><span class="comment"> public E remove(int index);删除指定索引位置上的元素，并返回删除元素</span></span><br><span class="line"><span class="comment"> public E set(int index, E element);修改指定位置处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment"> public E get(int index);返回指定索引处的元素</span></span><br><span class="line"><span class="comment"> public int size();返回集合中元素的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">case2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">array.remove(<span class="number">0</span>);</span><br><span class="line">array.remove(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line">array.set(<span class="number">1</span>,<span class="string">&quot;begin&quot;</span>);</span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;下标为2的元素为：&quot;</span>+array.get(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//获取集合元素个数</span></span><br><span class="line">System.out.println(<span class="string">&quot;集合中元素个数为：&quot;</span>+array.size());</span><br><span class="line">System.out.println(<span class="string">&quot;array:&quot;</span>+array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、面向对象编程"><a href="#四、面向对象编程" class="headerlink" title="四、面向对象编程"></a>四、面向对象编程</h2><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>在软件系统中，类不是孤立存在的，类与类之间存在各种关系。根据类与类之间的耦合度从弱到强排列，UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。</p><p>1.依赖关系</p><p>依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。</p><p>2.关联关系</p><p>关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。</p><p>3.聚合关系</p><p>聚合（Aggregation）关系是 关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。</p><p>4.组合关系</p><p>组合（Composition）关系也是 关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。</p><p>5.泛化（继承）关系</p><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。</p><p>6.实现关系</p><p>实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。</p><p>异同分析</p><ul><li><p>聚合和组合的区别：<br>聚合是个体离开了整体，依然可以存在.<br>组合是个体和整体不可以分开，个体不能离开整体单独存在.</p></li><li><p>依赖，关联 和聚合，组合的区别：<br>依赖，关联 : 类之间的关系是在同一层次上.<br>聚合，组合: 类之间的关系表现为整体和部分</p></li></ul><p>在代码层面的体现方式</p><ul><li><p>依赖：<br>一般情况下，依赖关系体现为：局域变量、方法的形参(返回值)、对静态方法的调用。</p></li><li><p>关联：</p><p>一般情况下，关联（组合，聚合都是关联关系的一种）关系体现为：成员变量</p></li></ul><h3 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h3><p>在Java语言中，一个类继承另一个类需要使用关键字extends，关键字extends的使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">child</span> <span class="keyword">extends</span> <span class="title class_">parent</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Java只支持单继承，即一个类只有一个父类，子类在继承父类的方法后，创建子类对象的同时也会调用父类的构造方法，其中会先执行父类的构造方法，再执行子类的构造方法。子类继承父类后，可以调用父类创建好的方法和属性。</p><p>继承的好处与弊端：</p><p>好处：</p><ul><li>提高了代码的复用性</li><li>提高了代码的维护性</li></ul><p>弊端：</p><ul><li>继承让类与类之间产生了关系，类的耦合性增强了。当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li></ul><hr><p>继承中变量的访问特点</p><p>在子类方法中访问一个变量</p><ol><li>子类局部范围内找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果没有就会报错（不考虑父亲的父亲)</li></ol><hr><p><mark>super</mark>关键字</p><p>super关键字和this关键字的用法相似</p><ul><li>this代表本类对象的引用</li><li>super代表父类存储空间的标识（可以理解为父类对象引用）</li></ul><table><thead><tr><th>关键字</th><th>访问成员变量</th><th>访问构造方法</th><th>访问成员方法</th></tr></thead><tbody><tr><td>this</td><td>this.成员变量 访问本类成员变量</td><td>this(……) 访问本类构造方法</td><td>this.成员方法（……）访问本类成员方法</td></tr><tr><td>super</td><td>super.成员变量 访问父类成员变量</td><td>super(……) 访问父类构造方法</td><td>super.成员方法（……）访问父类成员方法</td></tr></tbody></table><hr><p><mark>instanceof</mark>关键字</p><p>该关键字可以用来判断是否一个类实现了某个接口或者用来判断一个实例化对象是否属于一个类，其返回类型是布尔类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Quadrangle</span>&#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Quadrangle</span>&#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circular</span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Quadrangle q=<span class="keyword">new</span> <span class="title class_">Quadrangle</span>();</span><br><span class="line">        Square s=<span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        System.out.println(q <span class="keyword">instanceof</span> Square);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承中构造方法的访问特点</p><p>子类中所有的构造方法默认都会访问父类中无参的构造方法</p><ul><li>子类会继承父类中的数据，可能还会使用父类中的数据。所以，子类初始化前，一定要先完成父类数据的初始化</li><li>每一个子类构造方法的第一条语句默认为: super()</li></ul><p>如果父类中没有无参构造方法，只有带参构造方法，有两种解决方案：</p><ul><li>通过使用super关键字去显式的调用父类的带参构造方法</li><li>在父类中提供一个无参构造方法</li></ul><hr><p>继承中成员方法的访问特点</p><p>通过子类对象访问一个方法</p><ol><li>子类成员范围中找</li><li>父类范围成员找</li><li>如果都没有则会报错（不考虑父亲的父亲）</li></ol><hr><p>方法重写：</p><ul><li>子类中出现了和父类一样的方法声明</li></ul><p>应用：</p><ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，既沿袭了父类的功能，又定义了子类特有的内容</li></ul><p><mark>@Override</mark></p><ul><li>是一个注解</li><li>可以帮助我们检查重写方法的方法声明的正确性</li></ul><p>注意事项：</p><ul><li>私有方法不能被重写（父类私有成员子类不能继承）</li><li>子类方法的访问权限不能更低（public&gt;默认&gt;私有）</li></ul><hr><p>Java继承中注意事项：</p><ul><li>Java中类只支持单继承，不支持多继承</li><li>Java中类支持多层继承</li></ul><hr><p>修饰符</p><p>1.包的概述与使用</p><p>其实就是文件夹，作用是对类进行分类管理</p><p>包的定义格式：</p><p>package 包名；（多级包.分开)</p><p>带包的Java类编译和执行</p><ul><li><p>手动建包：按照以前的格式编译java文件 javac   xxx.java</p><p>​                   手动创建包                                       在x盘建立文件夹com然后在com下建立文件夹itheima</p><p>​                   把class文件放到包的最里面             把xxx.class文件放到com.itheima这个文件夹下</p><p>​                   带包执行                                          java  com.itheima.xxx</p></li><li><p>自动建包：javac-d .xxx.java                                            java com.itheima.xxx</p></li></ul><p>2.导包</p><p>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了，为了简化带包的操作，Java提供了导包的功能</p><p>导包的格式：</p><p>import 包名；</p><p>3.修饰符</p><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中子类无关类</th><th>不同包的子类</th><th>不同包的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>状态修饰符：</p><p><mark>final</mark> 最终 可以修饰成员方法，成员变量，类</p><p>final修饰的特点</p><ul><li>修饰方法：表明该方法是最终方法，不能被重写</li><li>修饰变量：表明该变量是常量，不能再次被赋值</li><li>修饰类：表明该类是最终类，不能被继承</li></ul><p>final修饰局部变量</p><ul><li>变量是基本数据类型：final修饰指的是基本数据类型的数据值不能发生改变</li><li>变量是引用类型：final修饰指的是引用类型的地址值不能改变，但是地址里面的内容是可以改变的</li></ul><p><mark>static</mark> 静态 可以修饰成员方法和成员变量</p><p>static修饰的特点</p><ul><li>被类的所有对象共享（这也是判断我们是否使用静态关键字的条件）</li><li>可以通过类名调用（也可以通过对象调用）</li></ul><p>static访问特点</p><p>非静态的成员方法</p><ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul><p>静态的成员方法</p><ul><li>能访问静态的成员方法</li><li>能访问静态的成员变量</li></ul><hr><h3 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h3><p>同一个对象，在不同时刻表现出来的不同的形态</p><p>举例：</p><p>猫 cat&#x3D; new 猫（）；</p><p>动物 animal &#x3D;new 猫（）;</p><p>这里猫在不同时刻表现出来了不同的形态，这就是多态。</p><p>多态的前提和体现</p><ul><li>有继承&#x2F;实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><hr><p>多态中成员的访问特点</p><p>成员变量：编译看左边，执行看左边</p><p>成员方法：编译看左边，执行看右边（因为成员方法有重写，而成员变量没有重写）</p><hr><p>多态的好处与弊端</p><p>好处：提高了程序的扩展性</p><p>具体实现：定义方法的时候，使用父类型作为参数，将来使用的时候，使用具体的子类型参与操作</p><p>弊端：不能使用子类的特有功能</p><p><mark><strong>执行顺序</strong>：先执行父类的静态语句（哪句语句在前先执行）再执行子类的静态语句（哪句语句在前先执行），再执行父类的代码块、成员属性赋值（哪个在前哪个先执行），后执行父类的构造方法，最后执行子类的代码块、成员属性赋值（哪个在前哪个先执行），后执行子类的构造方法。</mark></p><hr><p>多态中的转型</p><ul><li><p>向上转型</p><p>从子到父</p><p>父类引用指向子类对象</p></li><li><p>向下转型</p><p>从父到子</p><p>父类引用转化为子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//eat（）方法已重写</span></span><br><span class="line"><span class="comment">//playGame()方法未被重写</span></span><br><span class="line">Animal a=<span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//向上转型</span></span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//向下转型</span></span><br><span class="line">        Cat c=(Cat)a;</span><br><span class="line">        c.eat();</span><br><span class="line">        c.playGame();</span><br></pre></td></tr></table></figure><hr><p>抽象类</p><p>在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类</p><p>抽象类的特点：</p><ul><li><p>抽象类和抽象方法必须使用<mark>abstract</mark>关键字修饰</p><p>​     public abstract class 类名 {}</p><p>​     public abstract void eat();</p></li><li><p>抽象类中不一定有抽象方法，但有抽象方法的一定是抽象类</p></li><li><p>抽象类不能实例化对象</p></li><li><p>抽象类可以参考多态的形式，通过子类对象实例化，这叫抽象类多态</p></li><li><p>抽象类的子类</p><p>​要么重写抽象类中的所有抽象方法</p><p>​    要么该子类也必须是一个抽象类</p></li></ul><p>抽象类的成员特点：</p><ul><li><p>成员变量</p><p>​可以是变量，也可以是常量</p></li><li><p>构造方法</p><p>​有构造方法，但是不能实例化，构造方法用于子类访问父类数据的初始化</p></li><li><p>成员方法</p><p>​可以有抽象方法：限定子类必须完成某些任务</p><p>​也可以有非抽象类方法：提高代码复用性</p></li></ul><hr><p>接口：</p><p>接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用</p><p>Java中的接口更多的体现在对行为的抽象</p><p>接口的特点：</p><ul><li><p>接口用关键字<mark>interface</mark>修饰</p><p>​public interface 接口名 {}</p></li><li><p>类实现接口用<mark>implements</mark>表示</p><p>​public class 类名 implements 接口名{}</p></li><li><p>接口不能实例化</p><p>​接口实例参照多态的方式，通过实现类对象实例化，这叫接口多态</p><p>​多态的形式：具体类多态，抽象类多态，接口多态</p><p>​多态的前提：有继承或者实现关系；有方法重写；有父（类&#x2F;接口）引用指向（子&#x2F;实现）类对象</p></li><li><p>接口的实现类</p><p>​要么重写接口中的所有抽象类方法，要么是抽象类</p></li></ul><p>接口的成员特点：</p><ul><li><p>成员变量</p><p>​只能是常量，默认修饰符：<mark>public static final</mark></p></li><li><p>构造方法：</p><p>​接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</p><p>​一个类如果没有父类，默认继承超类Object类</p></li><li><p>成员方法：</p><p>​只能是抽象方法，默认修饰符：public abstract</p></li></ul><hr><p>类和接口之间的关系：</p><ul><li><p>类和类的关系</p><p>​继承关系，只能单继承，但是可以多层继承</p></li><li><p>类和接口之间的关系</p><p>​实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p></li><li><p>接口和接口之间的关系</p><p>​继承关系，可以单继承，也可以多继承</p></li></ul><p>抽象类和接口的区别：</p><ul><li><p>成员区别</p><p>​抽象类 变量，常量；有构造方法；有抽象方法，也有非抽象方法</p><p>​接口常量；抽象方法</p></li><li><p>关系区别</p><p>​类与类继承，单继承</p><p>​类与接口实现，可以单实现，也可以多实现</p><p>​接口与接口继承，单继承，多继承</p></li><li><p>设计理念区别</p><p>​抽象类对类抽象，包括属性，行为</p><p>​接口对行为抽象，主要是行为</p></li></ul><p>抽象类是对事物的抽象，而接口是对行为的抽象</p></li></ul><h3 id="3-内部类"><a href="#3-内部类" class="headerlink" title="3.内部类"></a>3.内部类</h3><p>1.类名作为形参和返回值</p><ul><li>方法的形参是类名，其实需要的是该类的对象</li><li>方法的返回值值是类名，其实返回的是该类的对象</li></ul><p>2.抽象类名作为形参和返回值</p><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li></ul><p>3.接口名作为形参和返回值</p><ul><li>方法的形参是接口名，其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li></ul><hr><p>内部类：就是在一个类中定义一个类。</p><p>内部类的定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    修饰符 class 类名&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类的访问特点：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><p>成员内部类不止可以在外部类中使用，在其他类中也可以使用。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类 outer =<span class="keyword">new</span> 外部类();</span><br><span class="line">外部类.内部类 inter=<span class="keyword">new</span> <span class="title class_">outer</span>.new 内部类();</span><br></pre></td></tr></table></figure><ul><li>如果在外部类和非静态方法之外实例化内部类对象，需要使用“外部类.内部类”的形式指向该对象的类型。</li><li>内部类对象会依赖于外部类对象，除非已经存在一个外部类对象，否则类中不会出现内部类对象。</li></ul><p>使用<mark>this</mark>关键字获取内部类和外部类之间的引用</p><p>​如果在外部类中定义的成员变量与内部类的成员变量名称相同，可以使用this关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TheSameName</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="number">11</span>;</span><br><span class="line">            x++;<span class="comment">//局部变量x++</span></span><br><span class="line">            <span class="built_in">this</span>.x++;<span class="comment">//内部类中的成员变量x++</span></span><br><span class="line">            TheSameName.<span class="built_in">this</span>.x++;<span class="comment">//外部类中的成员变量x++</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类：</p><p>匿名内部类是在创建对象时才会编写类体的一种写法，匿名类的特点是“<mark>现用现写</mark>”，其语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类/接口&#123;</span><br><span class="line">    子类实现的内容</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：最后一个大括号之后有<strong>分号</strong></p><p>匿名类的特点：</p><ul><li>匿名类不能写构造方法</li><li>匿名类不能定义静态的成员变量</li><li>如果匿名类创建的对象没有赋值给任何引用变量，会导致该对象用完一次后就会被Java虚拟机销毁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用匿名类创建一个抽象狗类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    String Color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Dog temp=<span class="keyword">new</span> <span class="title class_">Dog</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;四腿狂奔&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;嗷呜~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        temp.Color=<span class="string">&quot;灰色&quot;</span>;</span><br><span class="line">        temp.move();</span><br><span class="line">        temp.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：匿名内部类编译以后，会产生以“外部类名$序号”为名称的.class文件，序号以1~n排列，分别代表1-n个匿名内部类。</p><h3 id="4-Object类"><a href="#4-Object类" class="headerlink" title="4.Object类"></a>4.Object类</h3><p>Java中所有类都直接或者间接继承了java.lang.Object类.Object类是比较特殊的类，它是所有类的父类，是Java类中的最高层类。</p><p>Object类的常用方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getClass()</td><td>它会返回对象执行时的Class实例，此外也可以通过此实例调用getName()方法取得类名。getClass().getName();</td></tr><tr><td>toString()</td><td>将一个对象返回以字符串的形式，它会返回一个String实例。</td></tr><tr><td>equals()</td><td>“&#x3D;&#x3D;”比较的是两个对象引用地址是否相等，而equals()比较的是两个对象的实际内容。</td></tr></tbody></table><p>toString()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString 返回对象的字符串表示形式</span></span><br><span class="line">        <span class="comment">//包名 + 类名 + 地址值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> obj.toString();</span><br><span class="line">        System.out.println(str1);   <span class="comment">//java.lang.Object@723279cf</span></span><br><span class="line">        System.out.println(obj);    <span class="comment">//直接打印也可以获得相同结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * System：类名</span></span><br><span class="line"><span class="comment">        * out：静态变量</span></span><br><span class="line"><span class="comment">        * System.out：获取打印的对象</span></span><br><span class="line"><span class="comment">        * print()：方法，会调用toString</span></span><br><span class="line"><span class="comment">        * 参数：表示打印的内容</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//如果要打印对象属性，可以重写toString方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>equals()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//IDEA中使用 alt + insert，快捷重写equals方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一个对象，直接true</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;  <span class="comment">//强转成子类对象</span></span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);    <span class="comment">//进行对比</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、常用API"><a href="#五、常用API" class="headerlink" title="五、常用API"></a>五、常用API</h2><h3 id="1-Math类"><a href="#1-Math类" class="headerlink" title="1.Math类"></a>1.Math类</h3><p>Math包括执行基本数学运算的方法，如基本指数，对数，平方根和三角函数。</p><p>调用形式：</p><p>Math.数学方法 </p><p>也存在一些常用数字常量 如：Math.PI        Math.E</p><p>1.三角函数方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sin</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回角的正弦值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cos</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">// 返回角的余弦值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">tan</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回角的正切值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">asin</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">// 返回一个值的反正弦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">acos</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回一个值的反余弦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">atan</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回一个值的反正切</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">toRadians</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//将角度转化为弧度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">toDegrees</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//将弧度转化为角度</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>2.指数函数方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">exp</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//获取e的a次方，即取e^a的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">log</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取自然对数，即lna的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">log10</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取底数为10的a的对数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sqrt</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取a的算术平方根，其中a的值不能为负值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cbrt</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//用于取a的立方根</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;<span class="comment">//用于取a的b次方</span></span><br></pre></td></tr></table></figure><p>3.取整函数方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回大于等于参数的最小整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回小于等于参数的最小整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">rint</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回与参数最接近的整数，若存在两个同样接近的数，取偶数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//四舍五入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//四舍五入，然后强制转换为长整型</span></span><br></pre></td></tr></table></figure><p>4.取最大值、最小值、绝对值方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;<span class="comment">//取最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>/<span class="type">long</span>/<span class="type">float</span>/<span class="type">double</span> <span class="title function_">min</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;<span class="comment">//取最小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>/<span class="type">long</span>/<span class="type">float</span>/<span class="type">double</span> <span class="title function_">abs</span><span class="params">(<span class="type">double</span> a)</span>;<span class="comment">//返回int/long/float/double类型参数的绝对值</span></span><br></pre></td></tr></table></figure><h3 id="2-BigInteger类"><a href="#2-BigInteger类" class="headerlink" title="2.BigInteger类"></a>2.BigInteger类</h3><p>BigInteger类的数字范围比Integer类的大得多，BigInteger类支持任意精度的整数，使用BigInteger类进行运算可以准确无误地表示任何大小的整数值并且不会丢失任何信息。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">twoInstance</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">//参数2的双引号不能省略，因为参数是以字符串的形式存在的</span></span><br></pre></td></tr></table></figure><p>BigInteger类的常用运算方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">add</span><span class="params">(BigInteger val)</span>;<span class="comment">//做加法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">subtract</span><span class="params">(BigInteger val)</span>;<span class="comment">//做减法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">multiply</span><span class="params">(BigInteger val)</span>;<span class="comment">//做乘法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">divide</span><span class="params">(BigInteger val)</span>;<span class="comment">//做除法运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">remainder</span><span class="params">(BigInteger val)</span>;<span class="comment">//做取余运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger[] divideAndRemainder(BigInteger val);<span class="comment">//用数组返回余数和商，数组的第一个值为商，第二个值为余数</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">pow</span><span class="params">(<span class="type">int</span> exponent)</span>;<span class="comment">//进行取参数的exponent次方操作</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">negate</span><span class="params">()</span>;<span class="comment">//取相反数</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">shiftLeft</span><span class="params">(<span class="type">int</span> n)</span>;<span class="comment">//数字左移n位，若n为负数，则右移</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">shiftRight</span><span class="params">(<span class="type">int</span> n)</span>;<span class="comment">//数字右移n位，若n为负数，则左移</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">and</span><span class="params">(BigInteger val)</span>;<span class="comment">//与操作</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">or</span><span class="params">(BigInteger val)</span>;<span class="comment">//或操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(BigInteger val)</span>;<span class="comment">//做数字比较操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object x)</span>;<span class="comment">//当参数x是BigInteger类并且数值与对象实例的数值相等时，返回true</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">max</span><span class="params">(BigIntegr val)</span>;<span class="comment">//返回较大的数值</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">min</span><span class="params">(BigInteger val)</span>;<span class="comment">//返回较小的数值</span></span><br></pre></td></tr></table></figure><p>样例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        BigInteger x=<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;222222222&quot;</span>);</span><br><span class="line">        BigInteger y=<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;111111111&quot;</span>);</span><br><span class="line">        BigInteger z=x.add(y);<span class="comment">//加法</span></span><br><span class="line">        BigInteger c=x.subtract(y);<span class="comment">//减法</span></span><br><span class="line">        BigInteger v=x.multiply(y);<span class="comment">//乘法</span></span><br><span class="line">        BigInteger u=x.divide(y);<span class="comment">//除法</span></span><br><span class="line">        BigInteger r=x.remainder(y);<span class="comment">//取余</span></span><br><span class="line">        BigInteger Max=x.max(y);<span class="comment">//取最大值</span></span><br><span class="line">        BigInteger Min=x.min(y);<span class="comment">//取最小值</span></span><br><span class="line">        BigInteger yu=x.and(y);<span class="comment">//与运算</span></span><br><span class="line">        BigInteger huo=x.or(y);<span class="comment">//或运算</span></span><br><span class="line">        BigInteger oppo=x.negate();<span class="comment">//取相反数</span></span><br><span class="line">        BigInteger exp=x.pow(<span class="number">2</span>);<span class="comment">//进行取参数的exponent次方操作</span></span><br><span class="line">        <span class="type">int</span> ans=x.compareTo(y);<span class="comment">//做数字的比较操作,大于参数返回正整数，等于返回0，小于返回负整数</span></span><br><span class="line">        BigInteger left=x.shiftLeft(<span class="number">1</span>);<span class="comment">//将数字左移n位，如果n为负数，做右移操作</span></span><br><span class="line">        BigInteger right=x.shiftRight(<span class="number">1</span>);<span class="comment">//将数字右移n位，如果n为负数，做左移操作</span></span><br><span class="line">        BigInteger []arr=x.divideAndRemainder(y);<span class="comment">//用数组返回余数和商，结果数组中第一个值为商，第二个值为余数</span></span><br><span class="line">        <span class="type">boolean</span> flag=x.equals(<span class="number">12</span>);<span class="comment">//当参数x是BigInteger类型的数字并且数值与对象实例的数值相等时，返回true，否则返回false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加法运算后的结果：&quot;</span>+z);</span><br><span class="line">        System.out.println(<span class="string">&quot;减法运算后的结果：&quot;</span>+c);</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法运算后的结果：&quot;</span>+v);</span><br><span class="line">        System.out.println(<span class="string">&quot;除法运算后的结果：&quot;</span>+u);</span><br><span class="line">        System.out.println(<span class="string">&quot;取余运算后的结果：&quot;</span>+r);</span><br><span class="line">        System.out.println(<span class="string">&quot;两者中的最大值为：&quot;</span>+Max);</span><br><span class="line">        System.out.println(<span class="string">&quot;两者中的最小值为：&quot;</span>+Min);</span><br><span class="line">        System.out.println(<span class="string">&quot;与操作后的结果：&quot;</span>+yu);</span><br><span class="line">        System.out.println(<span class="string">&quot;或操作后的结果：&quot;</span>+huo);</span><br><span class="line">        System.out.println(<span class="string">&quot;相反数为：&quot;</span>+oppo);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数的2次方结果为：&quot;</span>+exp);</span><br><span class="line">        System.out.println(<span class="string">&quot;做比较操作后的结果为：&quot;</span>+ans);</span><br><span class="line">        System.out.println(<span class="string">&quot;做左移1位后的结果:&quot;</span>+left);</span><br><span class="line">        System.out.println(<span class="string">&quot;做右移1位后的结果：&quot;</span>+right);</span><br><span class="line">        System.out.println(<span class="string">&quot;商：&quot;</span>+arr[<span class="number">0</span>]+<span class="string">&quot; 余数：&quot;</span>+arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;判断参数与12是否相等：&quot;</span>+flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-System类"><a href="#3-System类" class="headerlink" title="3.System类"></a>3.System类</h3><p>System类是JDK提供的系统类，该类是用<mark>final</mark>修饰的，所以不允许继承，System类提供了很多系统层面的操作方法，并且这些方法全部都是静态的。以下为System类常用方法：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>currentTimeMillis()</td><td>返回以毫秒为单位的当前时间</td></tr><tr><td>exit(int status)</td><td>通过启动虚拟机的关闭序列，终止当前正在运行的Java虚拟机，此方法从不正常返回，可以将变量作为一个状态码，根据惯例，非零的状态码表示非正常终止；0表示正常终止</td></tr><tr><td>Map<String String>getenv()</td><td>返回一个不能修改的当前系统环境的字符串映射视图</td></tr><tr><td>getenv(String name)</td><td>获取指定的环境变量值</td></tr><tr><td>getProperties()</td><td>确定当前的系统属性</td></tr><tr><td>getProperty(String key)</td><td>获取用指定键描述的系统属性</td></tr><tr><td>setIn(InputStream in)</td><td>重新分配“标准输入流”</td></tr></tbody></table><p>System类提供了标准输入、标准输出和错误输出流，即System类提供了三个静态对象：in、out、err.在控制台输出字符串，有两种方法：</p><ul><li>不会自动换行的print()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>会自动换行的println()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;书籍是人类进步的阶梯&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>System.out.println(“\n”);   &#x2F;&#x2F;会打印两个空行</li><li>System.out.print();          &#x2F;&#x2F;没有参数会报错</li></ul><p>计时</p><p>利用System.currentTimeMillis()方法可以用来记录程序的运行时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemTimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">long</span> start=System.currentTimeMillis();<span class="comment">//程序开始记录时间</span></span><br><span class="line">        String str=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            str+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.currentTimeMillis();<span class="comment">//记录循环结束时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;循环用时为：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Arrays类"><a href="#4-Arrays类" class="headerlink" title="4.Arrays类"></a>4.Arrays类</h3><p>Array类包含于用于操作数组的各种方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(int[] a)</td><td>返回指定数组的内容的字符串表达形式</td></tr><tr><td>public static void sort(int[] a)</td><td>按照数字顺序排列指定的数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">20</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工具类的设计思想：</p><ul><li>构造方法用private修饰</li><li>成员用public static修饰</li></ul><h3 id="5-基本类型包装类"><a href="#5-基本类型包装类" class="headerlink" title="5.基本类型包装类"></a>5.基本类型包装类</h3><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>常用的操作之一：用于基本数据类型和字符串之间的转换</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>Integer类的概述和使用</p><p>Integer:包装一个对象中的原始类型int的值</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Integer(int value)</td><td>根据int值创建Integer对象（过时）</td></tr><tr><td>public Integer(String s)</td><td>根据String值创建Integer对象（过时）</td></tr><tr><td>public static Integer valueOf(int i)</td><td>返回指定的int值的Integer实例</td></tr><tr><td>public static Integer valueOf(String s)</td><td>返回一个保存指定值的Interger对象String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Integer i1=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);<span class="comment">//过时</span></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        Integer i2=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;100&quot;</span>);<span class="comment">//过时 字符串里面的内容必须由数字组成</span></span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        Integer i3=Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        Integer i4=Integer.valueOf(<span class="string">&quot;100&quot;</span>);<span class="comment">//字符串里面的内容必须由数字组成</span></span><br><span class="line">        System.out.println(i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>int和String的相互转换</p><p>1.int →String类型</p><ul><li>public static String valueOf(int i):返回int类型参数的字符串表示形式，该方法是String类中的方法。</li></ul><p>2.String →int类型</p><ul><li>public  static int parseInt(String s);将字符串解析成int类型，该方法是Integer类中的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int -- String 的相互转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="number">100</span>;</span><br><span class="line">        <span class="comment">///int -&gt;String</span></span><br><span class="line">        <span class="comment">//方式1 +</span></span><br><span class="line">        String s=<span class="string">&quot;&quot;</span>+number;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//方式2 public static String valueOf(int i)</span></span><br><span class="line">        String s2=String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//String -&gt; int</span></span><br><span class="line">        String str=<span class="string">&quot;1000&quot;</span>;</span><br><span class="line">        <span class="comment">//方式1 String -&gt; Integer -&gt; int</span></span><br><span class="line">        Integer temp=Integer.valueOf(str);</span><br><span class="line">        <span class="type">int</span> x=temp.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">//方式2 public static int parseInt(String s)</span></span><br><span class="line">        <span class="type">int</span> y=Integer.parseInt(str);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-日期时间类"><a href="#6-日期时间类" class="headerlink" title="6.日期时间类"></a>6.日期时间类</h3><h4 id="1-Date类"><a href="#1-Date类" class="headerlink" title="1.Date类"></a>1.Date类</h4><p>Date类用于表示日期和时间，使用该类表示时间需要使用其构造方法来创建对象，其构造方法以及说明表如下。</p><p>​</p><table><thead><tr><th>构造方法</th><th>方法说明</th></tr></thead><tbody><tr><td>Date()</td><td>分配Date对象并初始化对象，以表示分配它的时间(精确到毫秒)</td></tr><tr><td>Date(long date)</td><td>分配Date对象并初始化此对象，以表示自标准基准时间(即1970年1月1日00：00：00GMT)起经过指定毫秒数date后的时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> timeMillis=System.currentTimeMillis();  <span class="comment">//当前系统时间所经历的毫秒数</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Date</span>(timeMillis);</span><br></pre></td></tr></table></figure><p>创建Date对象使用的是long型整数，而不是double型，这主要是因为double类型可能会损失精度。</p><p>​Date类的常用方法以及说明</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>after(Date when)</td><td>测试当前日期是否在指定日期之后</td></tr><tr><td>before(Date when)</td><td>测试当前日期是否在指定日期之前</td></tr><tr><td>getTime()</td><td>获取自1970年1月1日00：00：00GMT开始到现在所经过的毫秒数</td></tr><tr><td>setTime(long time)</td><td>设置当前Date对象所表示的日期时间值，该值用以1970年1月1日00：00：00GMT以后time毫秒的时间点</td></tr></tbody></table><p>案例1：</p><p>​获取当前的日期和时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDmo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//创建现在的日期</span></span><br><span class="line">        <span class="type">long</span> value=date.getTime();<span class="comment">//获取毫秒数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;日期： &quot;</span>+date);</span><br><span class="line">        System.out.println(<span class="string">&quot;到现在所经历的毫秒数：&quot;</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期时间格式化</p><p>​DateFormat类是日期时间格式化子类的抽象类，可以按照指定的格式对日期或时间进行格式化。DateFormat类提供了很多类方法，以获得基于默认或给定语言环境和多种格式化风格的默认日期时间Formatter,格式化主要包括四种风格：</p><p>SHORT：完全为数字，如12.13.52或3：30pm</p><p>MEDIUM：较长，如Jan 12, 1952</p><p>LONG：更长，如January 12，1953或3：39：32pm</p><p>FULL：完全指定，如Tuesday、April 12、1952AD或3：30：34pm PST</p><p>另外，使用DateFormat类还可以自定义日期时间的格式。要格式化一个当前语言环境下的日期，首先要创建一个DateFormat类的一个对象，由于它是抽象类，因此可以使用getDateInstance()进行创建，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> DateFormat.getDateLnstance();</span><br></pre></td></tr></table></figure><p>使用getDateInstance()方法获取的是所在国家或地区的标准日期格式，而使用getTimeInstance()获取的是当前所在国家或地区的时间格式，而使用getDateTimeInstance()获取的是当前国家或者地区的日期时间格式。</p><p>​DateFormat类的常用方法及其说明</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>format(Date date)</td><td>将一个Date对象实例格式化为日期&#x2F;时间字符串</td></tr><tr><td>getCalendar()</td><td>获取与此日期时间&#x2F;时间格式器关联的日历</td></tr><tr><td>getDateInstance()</td><td>获取日期格式器，该格式器具有默认语言环境的默认格式化风格</td></tr><tr><td>getTimeInstance()</td><td>获取时间格式器，该格式器具有默认语言环境的默认格式化风格</td></tr><tr><td>getDateTimeInstance()</td><td>获取日期&#x2F;时间格式器，该格式器具有默认语言环境的默认格式化风格</td></tr><tr><td>getInstance()</td><td>获取为日期&#x2F;时间使用SHORT风格的默认日期&#x2F;时间格式器</td></tr><tr><td>parse(String source)</td><td>将字符串解析成一个日期，并返回这个日期的Date对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDmo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">// DateFormat df=DateFormat.getTimeInstance(DateFormat.LONG);</span></span><br><span class="line">       <span class="comment">// DateFormat df=DateFormat.getDateInstance(DateFormat.LONG);</span></span><br><span class="line">        DateFormat df=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);</span><br><span class="line">        DateFormat df2=DateFormat.getInstance();</span><br><span class="line">        Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(df.format(date));</span><br><span class="line">        <span class="comment">//System.out.println(df.getCalendar());</span></span><br><span class="line">        System.out.println(df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(df2.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​由于DateFormat类是一个抽象类，不能new创建实例对象。因此，出来使用getXXXinstance()方法创建其对象，还可以使用其子类，如SimpleDateFormat类，该类是一个以与语言环境相关的方式来格式化和分析日期的具体类，它允许进行格式化(日期→文本)、分析(文本→日期)和规范化。</p><p>​SimpleDateFormat的格式化字符</p><table><thead><tr><th>字母</th><th>日期或时间元素</th><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>G</td><td>Era标示符</td><td>Text</td><td>AD</td></tr><tr><td>y</td><td>年</td><td>Year</td><td>1996</td></tr><tr><td>M</td><td>年中的月份</td><td>Month</td><td>July;Jul;07</td></tr><tr><td>w</td><td>年中的天数</td><td>Number</td><td>27</td></tr><tr><td>W</td><td>月份中的天数</td><td>Number</td><td>2</td></tr><tr><td>D</td><td>年中的天数</td><td>Number</td><td>179</td></tr><tr><td>d</td><td>月份中的天数</td><td>Number</td><td>10</td></tr><tr><td>F</td><td>月份中的星期</td><td>Number</td><td>2</td></tr><tr><td>E</td><td>星期中的天数</td><td>Text</td><td>Tuesday;Tue</td></tr><tr><td>t</td><td>Am&#x2F;pm的标记</td><td>Text</td><td>PM</td></tr><tr><td>H</td><td>一天中的小时数(0~23)</td><td>Number</td><td>0</td></tr><tr><td>h</td><td>am&#x2F;pm中的小时数(1~12)</td><td>Number</td><td>12</td></tr><tr><td>k</td><td>一天中的小时数(1~24)</td><td>Number</td><td>24</td></tr><tr><td>K</td><td>am&#x2F;pm中的小时数(0~11)</td><td>Number</td><td>0</td></tr><tr><td>m</td><td>小时中的分钟数</td><td>Number</td><td>30</td></tr><tr><td>s</td><td>分钟中的秒数</td><td>Number</td><td>55</td></tr><tr><td>S</td><td>毫秒数</td><td>Number</td><td>978</td></tr><tr><td>z</td><td>时区</td><td>General time zone</td><td>PST</td></tr><tr><td>Z</td><td>时区</td><td>RFC 822 time zone</td><td>-800</td></tr></tbody></table><p>​常用时间格式</p><table><thead><tr><th>日期时间</th><th>对于的格式</th></tr></thead><tbody><tr><td>2021&#x2F;10&#x2F;25</td><td>yyyy&#x2F;MM&#x2F;dd</td></tr><tr><td>2021.10.25</td><td>yyyy.MM.dd</td></tr><tr><td>2021-09-14 13：20：43</td><td>yyyy-MM-dd HH:mm:ss</td></tr><tr><td>2021年10月21日 10时21分05秒 星期日</td><td>yyyy年MM月dd日 HH时mm分ss秒 EEEE</td></tr><tr><td>下午3时</td><td>ah时</td></tr><tr><td>今年已经过去了297天</td><td>今年已经过去了D天</td></tr></tbody></table><p>案例2：</p><p>​以中文形式打印当前的日期和时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDmo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        DateFormat df=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒 EEEE&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;各位观众大家好，现在是：&quot;</span>);</span><br><span class="line">        System.out.print(df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(<span class="string">&quot;, 欢迎大家收看新闻&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-集合类"><a href="#7-集合类" class="headerlink" title="7.集合类"></a>7.集合类</h3><p>​集合可以看成一个容器，Java中提供了不同的集合类，这些类有不同的存储对象，同时提供了相应的方法，以方便用户对集合进行遍历、添加、删除和查找指定的对象。集合类与数组的不同之处是：数组长度是固定的，集合的长度是可变的；数组常用来存储基本类型的数据，集合用来存放对象的引用。常用的集合有List集合、Set集合和Map集合，其中List集合与Set集合继承了Collection接口，各接口还提供了不同的实现类。</p><h4 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1.Collection接口"></a>1.Collection接口</h4><p>​Collection接口是层次结构中的根接口，构成Collection的单位称为元素。Collection接口通常不能直接使用，但该接口提供了添加元素、删除元素、管理数据的方法。由于List接口与Set接口都继承了Collection接口，因此这些方法对List集合与Set集合是通用的。Collection接口的常用方法如下：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>add(E e)</td><td>将指定对象添加到集合中</td></tr><tr><td>remove(Object o)</td><td>将指定的对象从该集合中移除</td></tr><tr><td>isEmpty()</td><td>返回boolean值，用于判断当前集合是否为空</td></tr><tr><td>iterator()</td><td>返回在此Collection的元素上进行迭代的迭代器，用于遍历集合中的对象</td></tr><tr><td>size()</td><td>返回int型值，获取该集合中元素的个数</td></tr></tbody></table><p>​通常遍历集合，都是通过迭代器来实现</p><p>案例：</p><p>​向购物车添加商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Collection&lt;String&gt;list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//实例化集合对象</span></span><br><span class="line">        list.add(<span class="string">&quot;《Java从入门到精通》&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;《零基础学Java》&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;《Java编程思想》&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it=list.iterator();<span class="comment">//创建迭代器</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;<span class="comment">//判断是否有下一个元素</span></span><br><span class="line">            String str=(String)it.next();<span class="comment">//获取集合中的元素</span></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2.List集合"></a>2.List集合</h4><p>1.List接口</p><p>​List接口继承了Collection接口，因此包含Collection接口中的所有方法。此外List接口还定义了两个重要的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>get(int index)</td><td>获得指定索引位置的元素</td></tr><tr><td>set(int index,Object obj)</td><td>将集合中指定索引位置的对象修改为指定的对象</td></tr></tbody></table><p>2.List接口的实现类</p><ul><li>ArrayList类实现了可变的数组，允许保存所有元素，包括null，并可以根据索引位置对集合进行快速的随机访问。缺点是向指定的索引位置插入对象或者删除对象的速度较慢。</li><li>LinkedList类采用链表的结构保存对象。这种结构的优点是便于向集合中插入和删除元素。需要向集合中插入、删除对象时，使用LinkedList类实现的List集合的效率较高；但对于随机访问集合中的元素，使用LinkedList类实现List集合的效率较低。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;E&gt; list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><mark>注意：与数组相同，集合的索引也是从0开始的。</mark></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建集合对象</span></span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.set(<span class="number">0</span>,<span class="string">&quot;d&quot;</span>);<span class="comment">//修改0索引位置上的元素值</span></span><br><span class="line">        <span class="type">int</span> i=(<span class="type">int</span>)(Math.random()*list.size());<span class="comment">//获得0~2的随机数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;随机获取集合中的元素：&quot;</span>+list.get(i));</span><br><span class="line">        list.remove(i);<span class="comment">//将指定索引位置中的元素从集合中移除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中剩下的元素分别是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;list.size();j++)&#123;</span><br><span class="line">            System.out.println(list.get(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Set集合"><a href="#3-Set集合" class="headerlink" title="3.Set集合"></a>3.Set集合</h4><p>​Set集合中的对象不按特定的方式排序，只是简单地把对象加入到集合中，但Set集合中不能包含重复对象。Set集合由Set接口和Set接口的实现类组成。因此包含Collection接口的所有方法。</p><p>​Set接口常用的实现类有HashSet类和TreeSet类，简述如下：</p><ul><li>HashSet类实现Set接口，由哈希表(实际上是一个HashMap实例)支持。它不保证Set集合的迭代顺序，特别是它不保证该顺序永恒不变。此类允许使用元素null。</li><li>TreeSet类不仅实现了Set接口，还实现了java.util.SortSet接口，因此TreeSet类实现的Set集合在遍历集合按照自然顺序递增排序，也可以按照指定比较器递增排序，即可以通过比较器对用TreeSet类实现的Set集合中的对象进行排序。</li></ul><p>​TreeSet类增加的方法</p><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>first()</td><td>返回此Set集合中当前第一个(最低)元素</td></tr><tr><td>last()</td><td>返回此Set集合中当前最后一个(最高)元素</td></tr><tr><td>comparator()</td><td>返回对此Set集合中的元素是进行排序的比较器。如果该集合采用的是自然顺序排序，则返回null</td></tr><tr><td>headSet(E toElenment)</td><td>返回一个新的Set集合，新集合是toElement对象(不包含)之前的所有对象</td></tr><tr><td>subSet(E fromElement，E fromElement)</td><td>返回一个新的Set集合，新集合是fromElement对象(包含)与fromElement对象(不包含)之间的所有对象</td></tr><tr><td>tailSet(E fromElement)</td><td>返回一个新的Set集合，新集合包含fromElement对象(包含)之后的所有对象</td></tr></tbody></table><p>案例：</p><p>​使用TreeSet类完成自然(升序)排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> APIDemp;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; temp=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        temp.add(<span class="number">12</span>);</span><br><span class="line">        temp.add(<span class="number">21</span>);</span><br><span class="line">        temp.add(-<span class="number">3</span>);</span><br><span class="line">        temp.add(<span class="number">6</span>);</span><br><span class="line">        temp.add(<span class="number">85</span>);</span><br><span class="line">        <span class="comment">//temp.add(12);  重复元素不会被添加</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的第一个元素：&quot;</span>+temp.first());</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的最后一个元素：&quot;</span>+temp.last());</span><br><span class="line">        Iterator&lt;Integer&gt; it=temp.iterator();</span><br><span class="line">        System.out.print(<span class="string">&quot;temp中的集合元素为：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.print(it.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//headSet</span></span><br><span class="line">        Set&lt;Integer&gt; temp2=temp.headSet(<span class="number">12</span>);<span class="comment">//截取当前元素前面的元素，不包含当前元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; it2=temp2.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;temp2中的集合元素为：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">                System.out.print(it2.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//tailSet</span></span><br><span class="line">        Set&lt;Integer&gt; temp3=temp.tailSet(<span class="number">12</span>);<span class="comment">//截取当前元素后面的元素，包含当前元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; it3=temp3.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;temp3中的集合元素为：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(it3.hasNext())&#123;</span><br><span class="line">                System.out.print(it3.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//subSet</span></span><br><span class="line">        Set&lt;Integer&gt; temp4=temp.subSet(<span class="number">6</span>,<span class="number">21</span>);<span class="comment">//截取两个元素之前的元素，包含前面元素，不包含后面元素</span></span><br><span class="line">        Iterator&lt;Integer&gt; it4=temp4.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it4.hasNext())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;temp4中的集合元素为：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(it4.hasNext())&#123;</span><br><span class="line">                System.out.print(it4.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Map集合"><a href="#4-Map集合" class="headerlink" title="4.Map集合"></a>4.Map集合</h4><p>​Map集合没有继承Collection接口，其提供的是key到value的映射。Map集合中不能包含相同的Key，每个key只能映射一个value.key还决定了存储对象在映射中的存储位置，但不是由key对象本身决定的，而是通过一种”散列技术”进行处理，产生一个散列码的整数值。散列码通常用作一个偏移量，该偏移量对应分配给映射的内存区域的起始位置，从而确定存储对象在映射中的存储位置。Map集合包含Map接口和Map接口的所有实现类。</p><p>1.Map接口</p><p>​Map接口提供了将key映射到值的对象。一个映射不能包含重复的key，每个key最多只能映射到一个值。除集合的常用方法外，Map接口还提供了下图所示方法：</p><p>​Map常用方法</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>put(K key，V value)</td><td>向集合中添加所指定的key与value的映射关系</td></tr><tr><td>containsKey(Object key)</td><td>如果此映射中包含指定key的映射关系，则返回true</td></tr><tr><td>contaninsValue(Object value)</td><td>如果此映射将一个或者多个key映射到指定值，则返回true</td></tr><tr><td>get(Object key)</td><td>如果存在指定的key对象，则返回该对象的值，否则返回null</td></tr><tr><td>keySet()</td><td>返回该集合中的所有key对象形成的Set集合</td></tr><tr><td>values()</td><td>返回该集合中的所有值对象形成的Collectin集合</td></tr><tr><td>remove(Object key)</td><td>从映射中删除与Key相关的映射</td></tr><tr><td>putAll(Map t)</td><td>将来自特定映像的所有元素添加给该映像</td></tr><tr><td>clear()</td><td>删除所有映射</td></tr></tbody></table><p>2.Map接口的实现类</p><ul><li><p>SortedMap接口 用来保持键的有序顺序</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>Comparator comparator()</td><td>返回对关键字进行排序时使用的比较器，如果使用Comparable接口的compareTo() 方法进行关键字比较，则返回null</td></tr><tr><td>Object firstKey()</td><td>返回映射中第一个(最低)关键字</td></tr><tr><td>Object lastKey()</td><td>返回映射中最后一个(最高)关键字</td></tr><tr><td>SortedMap subMap(Object fromKey，Object toKey)</td><td>返回从fromKey(包括)到toKey(不包括)范围内的元素的SortedMap视图(子集)</td></tr><tr><td>SortedMap headMap(Object toKey)</td><td>返回SortedMap的第一个视图，其内各元素的key都小于toKey</td></tr><tr><td>SortedMap tailMap(Object fromKey)</td><td>返回SortedMap中的最后一个视图，里面元素的key都大于或者等于fromKey</td></tr></tbody></table></li><li><p>HashMap是基于哈希表的Map接口实现，此实现提供所有可选的映射操作，并允许使用null值和null键，但必须保证键的唯一性。HashMap类通过哈希表对其内部的映射关系进行快速查找。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p></li><li><p>TreeMap类不仅实现了Map接口，还实现了java.util.SortMap接口，因此集合中的映射关系具有一定的顺序。但在添加、删除、定位映射关系时，TreeMap类比HashMap类性能较差。由于TreeMap类实现的Map集合中的映射关系是根据键对象按照一定的顺序排列的，因此不允许键对象是null。</p></li></ul><h2 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h2><p><strong>泛型</strong>：是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型 它的本质是<mark><strong>参数化类型</strong></mark>，也就是说所操作的数据类型被指定为一个参数，顾名思义，就是<strong>将类型由原来的具体的类型参数化，然后在使用&#x2F;调用时传入具体的类型</strong>，这种参数类型可以用在类、方法和接口中，分别称为泛型类、泛型方法、泛型接口</p><p>泛型定义格式：</p><ul><li>&lt;类型&gt; : 指定一种类型的格式，这里的类型可以看成是形参</li><li>&lt;类型1，类型2&gt;：指定多种类型的格式，多种类型用逗号隔开。这里的类型可以看成是形参</li><li>将来具体调用时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型</li></ul><p>泛型的好处：</p><ul><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：Collection集合存储字符串并遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//        Collection c = new ArrayList();</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       <span class="comment">// c.add(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="comment">//Iterator it = c.iterator();</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"><span class="comment">//            Object obj = it.next();</span></span><br><span class="line"><span class="comment">//            System.out.println(obj);</span></span><br><span class="line"><span class="comment">//            String s = (String)it.next();  //ClassCastException</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();  <span class="comment">//ClassCastException</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>泛型类</strong></p><p>泛型类的定义格式：</p><ul><li><p>格式：修饰符 class 类名 &lt;类型&gt; { }</p></li><li><p>范例：public class Generic <T> { }</p><p>​此处的T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span> &lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         </span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;String&gt;();</span><br><span class="line">        g1.setT(<span class="string">&quot;李清霞&quot;</span>);</span><br><span class="line">        System.out.println(g1.getT());</span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Integer&gt;();</span><br><span class="line">        g2.setT(<span class="number">30</span>);</span><br><span class="line">        System.out.println(g2.getT());</span><br><span class="line">        Generic&lt;Boolean&gt; g3 = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Boolean&gt;();</span><br><span class="line">        </span><br><span class="line">        g3.setT(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(g3.getT());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><mark>泛型类中的泛型成员不能直接实例化。</mark>它们的实例化必须通过相关方法的参数来传递给他们。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;  <span class="comment">//这里不能直接newT[]来实例化array</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(T[] tt)</span>&#123;</span><br><span class="line">        array = tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同一个泛型类，如果实例化时给予的实际具体类型不一样，那么这些实例类型是不兼容的，不能相互赋值。</li></ul><p><strong>泛型方法</strong></p><p>泛型方法的定义格式：</p><ul><li>格式：修饰符 &lt;类型&gt; 返回值类型 方法名 （类型 变量名）{ }</li><li>范例：public <T> void show( T t) { }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//泛型方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>  &#123;</span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;</span><br><span class="line">      System.out.println(t);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Generic</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Generic</span>();</span><br><span class="line">      g.show(<span class="string">&quot;李清霞&quot;</span>);</span><br><span class="line">      g.show(<span class="number">100</span>);</span><br><span class="line">      g.show(<span class="literal">true</span>);</span><br><span class="line">      g.show(<span class="number">100.100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>泛型接口</strong></p><p>泛型接口的定义格式：</p><ul><li>格式：修饰符 interface 接口名 &lt;类型&gt; { }</li><li>范例：public interface Generic <T> { }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generic</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Genericlmpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> <span class="title class_">Genericlmpl</span>&lt;String&gt;();</span><br><span class="line">        g1.show(<span class="string">&quot;李清霞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> <span class="title class_">Genericlmpl</span>&lt;Integer&gt;();</span><br><span class="line">        g2.show(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>类型通配符</strong></p><p>为了表示各种泛型List的父类，可以使用通配符</p><ul><li>类型通配符：&lt;?&gt;</li><li>List&lt;?&gt;：表示元素类型未知的List，它的元素可以匹配任何的类型</li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul><p>如果说我们不希望任何List&lt;?&gt;是任何泛型List的父类，只希望它代表某一类泛型List的父类，可以使用类型通配符的上限</p><ul><li>类型通配符上限：&lt;? extends 类型&gt;</li><li>List&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</li></ul><p>除了可以指定类型通配符的上限，也可以指定类型通配符的下限</p><ul><li>类型通配符下限：&lt;? super 类型&gt;</li><li>List&lt;? super Number&gt;：它表示的类型是Number或者其父类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类型通配符: &lt;?&gt;</span></span><br><span class="line">        List&lt;?&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">        List&lt;?&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        List&lt;?&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//类型通配符上限: &lt;? extends 类型&gt;</span></span><br><span class="line">        <span class="comment">//List&lt;? extends Integer&gt; list4 = new ArrayList&lt;Number&gt;(); 报错 Integer是Number的子类</span></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//类型通配符下限: &lt;? super 类型&gt;</span></span><br><span class="line">        List&lt;? <span class="built_in">super</span> Integer&gt; list6 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;(); </span><br><span class="line">        List&lt;? <span class="built_in">super</span> Number&gt; list7 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        <span class="comment">//List&lt;? super Number&gt; list8 = new ArrayList&lt;Integer&gt;();  报错 Integer是Number的子类</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可变参数</strong></p><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的</p><ul><li>格式：修饰符 返回值类型 方法名(数据类型… 变量名){ }</li><li>范例：public static int sum(int… a){ }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"><span class="comment">//可变参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... a)</span>&#123;<span class="comment">//a相当于一个数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:a)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可变参数注意事项：</p><ul><li>这里的变量其实是一个数组</li><li>如果一个方法有多个参数，包含可变参数，<mark>可变参数要放最后</mark></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span>... a)</span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>可变参数的使用</strong></p><p>Arrays工具类中有一个静态方法：</p><ul><li>public static <T> List<T> asList(T… a);  返回由指定数组支持的固定大小的列表</li><li>返回的集合不能做增删操作，可以做修改操作</li></ul><p>List接口中有一个静态方法：</p><ul><li>public static <E> List<E> of(E… elements); 返回包含任意数量元素的不可变列表</li><li>返回的集合不能做增删改操作</li></ul><p>Set接口中有一个静态方法：</p><ul><li>public static <E> Set<E> of(E… elements); 返回一个包含任意数量元素的不可变集合</li><li>在给元素时，不能给重复的元素</li><li>返回的集合不能做增删操作，没有修改的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static &lt;T&gt; List&lt;T&gt; asList(T... a);  返回由指定数组支持的固定大小的列表</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//  list.add(&quot;javascript&quot;);  UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">//  list.remove(&quot;java&quot;);    UnsupportedOperationException</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; List&lt;E&gt; of(E... elements); 返回包含任意数量元素的不可变列表</span></span><br><span class="line">        List&lt;String&gt; list2 = List.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">// list2.add(&quot;你好&quot;);  UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">// list2.remove(&quot;world&quot;);  UnsupportedOperationException</span></span><br><span class="line">        <span class="comment">//  list2.set(2,&quot;你好&quot;);  UnsupportedOperationException</span></span><br><span class="line">        System.out.println(list2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; Set&lt;E&gt; of(E... elements); 返回一个包含任意数量元素的不可变集合</span></span><br><span class="line">       <span class="comment">// Set&lt;String&gt; set = Set.of(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;,&quot;world&quot;); ImmutableCollections$SetN.&lt;init&gt;</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>);</span><br><span class="line">       <span class="comment">// set.add(&quot;你好&quot;);  UnsupportedOperationException</span></span><br><span class="line">       <span class="comment">// set.remove(&quot;hello&quot;);  UnsupportedOperationException</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h2><p>异常就是代表程序出现的问题。其父类是 Throwable。其下两个子类，Error 和 Exception。Error 代表的是系统级别的错误（严重问题），是SUN公司自己用的。而 Exception 代表程序可能出现的问题。Exception 分为 RuntimeException 和其他异常。其中，<strong>RuntimeException 是运行时异常，编译阶段不会被检测出来，编译阶段 Java 不会执行代码，只会检查语法是否错误，或者做一些性能优化</strong>。<mark>编译时异常更多是提醒程序员检查本地信息，运行时异常是代码逻辑出错而导致程序出现的问题。</mark></p><p><mark>idea 当中使用 Ctrl + Alt + T 进行 try catch 包裹。</mark></p><p>Error：代表的系统级别错误(属于严重问题)</p><p>Exception：异常，代表程序可能出现的问题，通常用Exception以及它的子类来封装程序出现的问题。</p><p>运行时异常：RuntimeException及其子类，编译阶段不会出现异常提醒。运行时出现的异常(如：数组索引越界异常)</p><p>编译时异常：除了Exception及其子类，其他都是编译时异常。编译阶段就会出现异常提醒的。(如：日期解析异常)</p><p>编译阶段：java不会运行代码，只会检查语法错误，或者做一些性能的优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java文件</span><br><span class="line">   ⬇ Javac命令</span><br><span class="line">   字节码文件</span><br><span class="line">   ⬇ Java命令</span><br><span class="line">   运行结果</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译时异常(在编译阶段，必必须手动处理，否则代码报错)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;2023年12月18日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(time);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行时异常(在编译阶段是不需要处理的，是代码运行时出现的异常)</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><ul><li>是用来查询bug的关键参考信息。</li><li>异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况<strong>（看异常的发生位置可以从下往上读）</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">18</span> || age &gt; <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();   <span class="comment">//抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setAge(<span class="number">19</span>);</span><br><span class="line">        s1.setAge(<span class="number">17</span>);<span class="comment">//RuntimeException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h3><p>异常的常见处理方式有：</p><ol><li>JVM默认处理。</li><li>捕获异常。</li><li>抛出异常。</li></ol><p>其中，<strong>抛出</strong>主要是<strong>告诉调用者出错</strong>了。而<strong>捕获</strong>主要是为了<strong>不让程序停止</strong>。</p><h4 id="JVM默认处理"><a href="#JVM默认处理" class="headerlink" title="JVM默认处理"></a>JVM默认处理</h4><p>把异常的名称，异常原因以及异常出现的位置等信息用红色字体打印在控制台上。并且此时的程序停止，代码不再执行。</p><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><p>目的是让异常出现的时候，<strong>让程序继续执行</strong>。基本语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类名 变量名)&#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能出现异常的代码</span></span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            <span class="comment">//这里会创建ArrayIndexOutOfBoundsException的对象</span></span><br><span class="line">            <span class="comment">//与catch中的e对比，看看类型是否匹配，匹配了，就让程序继续进行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">//出现异常后该如何处理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;看看我执行了吗&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终执行的结果为：</span></span><br><span class="line">        <span class="comment">//索引越界了</span></span><br><span class="line">        <span class="comment">//看看我执行了吗</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于捕获异常的四个注意点：</p><ul><li><p><strong>如果 try 中没有遇到问题</strong>，会执行 try 当中的所有代码，不会执行 catch 的代码。也就是说，catch 当中的代码只有出现了了异常才会执行。</p></li><li><p><strong>如果 try 中遇到多个问题</strong>，如果第一个问题能够被顺利捕获，则<strong>接下来</strong> try 中代码便<strong>不会执行</strong>。最佳解决方案是写多个 catch 捕获多个问题（一行一个 catch或者一行中利用 <code>|</code> 连接），并且，如果异常之间有父子类关系的话，<strong>父类一定要写在下面</strong>。</p></li><li><p><strong>如果 try 中遇到的问题没有被捕获</strong>，则使用 JVM 默认处理异常的方式进行处理。</p></li><li><p><strong>如果 try 中遇到了问题</strong>，try 下面的其他代码便<strong>不会执行</strong>了，直接跳到 catch，但如果没有 catch 与之匹配，则按照 JVM 默认处理异常的方式进行处理。</p></li><li><p><strong>赋值运算符(&#x3D;)的关联性是从右到左，</strong>因此若一条赋值语句的左右两边都出现异常，则会先抛出等号右边的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exceptions2.ExDemo3.java</span></span><br><span class="line"><span class="keyword">package</span> exceptions2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExDemo3</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arrayOfNumbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"> <span class="keyword">try</span> </span><br><span class="line"> &#123;</span><br><span class="line"> arrayOfNumbers[<span class="number">10</span>] = <span class="number">11</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">catch</span> (NumberFormatException e1) </span><br><span class="line"> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;NumberFormatException =&gt; &quot;</span> + e1.getMessage());</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">catch</span> (IndexOutOfBoundsException e2) </span><br><span class="line"> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;IndexOutOfBoundsException =&gt; &quot;</span> + e2.getMessage());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> array[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">array[<span class="number">10</span>] = <span class="number">30</span> / <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (ArithmeticException e) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) </span><br><span class="line">&#123;</span><br><span class="line">      System.out.println(e.getMessage());</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">method2(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用method2方法时左边数组越界，右边除数为0，出现两个异常，但由于=的关联性是从右到左，因此会抛出右边的异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><ul><li><strong>throws</strong>：写在方法定义处，表示声明一个异常。告诉调用者，使用本方法可能会有哪些异常。如果是编译时异常，必须要写，如果是运行时异常，可以不写。</li><li><strong>throw</strong>：写在方法内，结束方法。手动抛出异常对象，交给调用者。方法中下面的代码不在执行了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理时使用try catch捕获</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sum = getSum(arr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法求总和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] number)</span> </span><br><span class="line">        <span class="keyword">throws</span> NullPointerException, ArrayIndexOutOfBoundsException &#123;    <span class="comment">//可以声明异常</span></span><br><span class="line">        <span class="keyword">if</span>(number == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();   <span class="comment">//也可以抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(number.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> index : number) &#123;</span><br><span class="line">            result += index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常中的常见方法"><a href="#异常中的常见方法" class="headerlink" title="异常中的常见方法"></a>异常中的常见方法</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td><code>public String getMessage()</code></td><td>返回此 throwable 的详细消息字符串</td></tr><tr><td><code>public String toString()</code></td><td>返回此可抛出的简短描述</td></tr><tr><td><code>public void printStackTrace()</code></td><td>把异常的错误信息输出在控制台，<strong>但不停止虚拟机的运行</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage()); <span class="comment">//Index 10 out of bounds for length 4</span></span><br><span class="line">            <span class="comment">//以上语句会打印异常的消息</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 4</span></span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();    <span class="comment">//打印操作，但实际不会停止虚拟机，因为第16行的测试代码会被成功打印</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;看看我执行了吗&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>自定义异常的目的是为了让报错信息更加见名知意。步骤如下：</p><ol><li>定义异常类（编译时异常继承 Exception，运行时异常继承 RuntimeException）。</li><li>写继承关系。</li><li>空参构造。</li><li>带参构造。</li></ol><ul><li>如果try catch 语句中有返回值，并且语句中含有finally关键字，则return 后仍然会执行finally中的语句，<strong>即finally关键字包围的语句一定执行。</strong>return的如果是基本数据类型，则在finally块中不可以修改已返回的数据，如果是引用类型，则可以改变。</li></ul><h2 id="八、I-O流"><a href="#八、I-O流" class="headerlink" title="八、I&#x2F;O流"></a>八、I&#x2F;O流</h2><h3 id="8-1File"><a href="#8-1File" class="headerlink" title="8.1File"></a>8.1File</h3><p><strong>File类概述和构造方法</strong></p><p>File：它是文件和目录路径名的抽象表示</p><ul><li>文件和目录是可以通过File封装成对象的</li><li>对于File而言，其封装的并不是一个真正存在的文件，仅仅只是一个路径名。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转化为具体存在的</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定的路径名字符串转化为抽象路径名来创建新的File实例</td></tr><tr><td>File(String parent，String child)</td><td>从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td>File(File parent，String child)</td><td>从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//File(String pathname) 通过将给定的路径名字符串转化为抽象路径名来创建新的File实例</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent，String child) 从父路径名字符串和子路径名字符串创建新的File实例</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent，String child) 从父抽象路径名和子路径名字符串创建新的File实例</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>File类创建功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当具有该名称的文件不存在时，创建一个由该抽象路径命名的新空文件</td></tr><tr><td>public boolean mkdir()</td><td>创建由此抽象路径命名的目录</td></tr><tr><td>public boolean mkdirs()</td><td>创建由此抽象路径命名的目录，包括任何必需但不存在的父目录</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//需求1:在D:\\IDEA目录下创建一个文件java.txt</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果文件不存在，就创建文件，返回true</span></span><br><span class="line"><span class="comment">        如果文件存在，就不创建文件，返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求2:在D:\\IDEA目录下创建一个目录JavaSE</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果目录不存在，就创建目录，返回true</span></span><br><span class="line"><span class="comment">        如果目录存在，就不创建目录，返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\JavaSE&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求3:在D:\\IDEA目录下创建一个多级目录JavaWEB\\HTML</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          如果目录不存在，就创建目录，返回true</span></span><br><span class="line"><span class="comment">        如果目录存在，就不创建目录，返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\JavaWEB\\HTML&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求4:在D:\\IDEA目录下创建一个文件Javase.txt</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\javase.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(f4.mkdir());</span></span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>File类判断和获取功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public  boolean isDirectory()</td><td>测试此抽象路径名表示的File是否为目录</td></tr><tr><td>public boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>pblic boolean exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr><tr><td>public String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public String getPath()</td><td>将此抽象路径名转换为路径字符串</td></tr><tr><td>public String getName()</td><td>返回此抽象路径名表示的文件或者目录的名称</td></tr><tr><td>public String[] list()</td><td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td>public File[] listFiles()</td><td>返回此抽象路径名表示的目录中的文件和目录中的File对象数组</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;protect\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.isDirectory());</span><br><span class="line">        System.out.println(f1.isFile());</span><br><span class="line">        System.out.println(f1.exists());</span><br><span class="line"></span><br><span class="line">        System.out.println(f1.getAbsolutePath());<span class="comment">//绝对路径</span></span><br><span class="line">        System.out.println(f1.getPath());<span class="comment">//相对路径</span></span><br><span class="line">        System.out.println(f1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA&quot;</span>);</span><br><span class="line">        String[] strArray = f2.list();</span><br><span class="line">        <span class="keyword">for</span>(String str:strArray)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        File [] fileArray = f2.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file : fileArray)&#123;</span><br><span class="line">            <span class="comment">//System.out.println(file);//会调用其toString方法</span></span><br><span class="line">            <span class="comment">//System.out.println(file.getName());</span></span><br><span class="line">            <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>File删除功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean delete()</td><td>删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><p>绝对路径和相对路径的区别：</p><ul><li>绝对路径：<mark>完整的路径名</mark>，不需要任何其他信息就可以定位它所表示的文件。例如：D:\IDEA\java.txt</li><li>相对路径：必须使用取自其他路径名的信息进行解释。例如：IDEA\java.txt</li></ul><p>删除目录时的注意事项：</p><ul><li>如果一个目录中有内容(目录、文件)，<mark>不能直接删除</mark>，必须先删除目录中的内容，最后才能删除目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个文件</span></span><br><span class="line">        <span class="comment">// File f1= new File(&quot;D:\\IDEA\\java.txt&quot;);</span></span><br><span class="line">        <span class="comment">//需求1：在当前模块目录下创建java.txt文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：删除当前模块目录下的java.txt文件</span></span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求3：在当前目录下创建itcast目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\itcast&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：删除当前模块下的itcast目录</span></span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：在当前模块下创建一个目录itcast，然后在itcast目录下创建一个文件java.txt</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\itcast&quot;</span>);</span><br><span class="line">        System.out.println(f3.mkdir());</span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IDEA\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6：删除当前模块的目录itcast以及里面的文件java.txt</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果该目录下存在文件，则需要先将目录下的文件删除才能再将该目录删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(f4.delete());</span><br><span class="line">        System.out.println(f3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：遍历目录</p><p>需求：给定一个路径(D:\IDEA)，请通过递归完成遍历该目录下的所有内容，并把所有内容的绝对路径输出在控制台</p><h2 id="九、反射"><a href="#九、反射" class="headerlink" title="九、反射"></a>九、反射</h2><p>反射允许对封装类的字段、方法和构造函数的信息进行编程访问</p><p><mark>IDEA中crtl+p能够弹出括号内需要的参数类型</mark></p><p>字段(成员变量)：获取修饰符、名字、类型，赋值&#x2F;获取值</p><p>构造方法：获取修饰符、名字、形参，创建对象</p><p>成员方法：获取修饰符、名字、形参、返回值，抛出的异常、获取注解、允许方法</p><h3 id="9-1获取class对象"><a href="#9-1获取class对象" class="headerlink" title="9.1获取class对象"></a>9.1获取class对象</h3><p>获取class对象的三种方式：</p><ul><li>Class.forName(“全类名”)；</li><li>类名.class</li><li>对象.getClass()；</li></ul><p><mark>源代码阶段</mark>：Java文件 A.java →  class文件 A.class    第一种方式</p><p><mark>加载阶段</mark>：将A.class放到内存中  第二种方式</p><p><mark>运行阶段</mark>：A a &#x3D; new ( )；第三种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取class对象的三种方式：</span></span><br><span class="line"><span class="comment">        1 Class.forName(&quot;全类名&quot;)；</span></span><br><span class="line"><span class="comment">        2 类名.class</span></span><br><span class="line"><span class="comment">        3 对象.getClass()；</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.Class.forName() 最为常用</span></span><br><span class="line">        <span class="comment">// 包名+类名</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.类名.class 当作参数来进行传递</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.对象.getClass() 当我们有了这个对象时才可以使用</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz == clazz3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Java中万物皆对象，Java中有<mark>Class</mark>用来描述字节码文件，这个类的对象就是字节码文件的对象，有<mark>Constructor</mark>来描述构造方法，这个类的对象就表示这个构造方法的对象，<mark>Field</mark>用来描述字段(成员变量)，这个类的对象就是成员变量的对象，<mark>Method</mark>用来描述成员方法，这个类的对象就是成员方法的对象</p><h3 id="9-2利用反射获取构造方法"><a href="#9-2利用反射获取构造方法" class="headerlink" title="9.2利用反射获取构造方法"></a>9.2利用反射获取构造方法</h3><p><strong>Class类中用于获取构造方法的方法</strong></p><ul><li>Constructor&lt;?&gt;[] getConstructors()；返回所有公共构造方法对象的数组</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors(); 返回所有构造方法对象的数组</li><li>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)；返回单个公共构造方法对象</li><li>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)；返回单个构造方法对象</li></ul><p><strong>Constructor类中用于创建对象的方法</strong></p><ul><li>T newInstance(Object… initargs)；根据指定的构造方法创建对象</li><li>setAccessible(boolean flag)；设置为true，表示取消访问检查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        **Class类中用于获取构造方法的方法**</span></span><br><span class="line"><span class="comment">        - Constructor&lt;?&gt;[] getConstructors()；返回所有公共构造方法对象的数组</span></span><br><span class="line"><span class="comment">        - Constructor&lt;?&gt;[] getDeclaredConstructors(); 返回所有构造方法对象的数组</span></span><br><span class="line"><span class="comment">        - Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;...parameterTypes)；返回单个公共构造方法对象</span></span><br><span class="line"><span class="comment">        - Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;...parameterTypes)；返回单个构造方法对象</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        **Constructor类中用于创建对象的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - T newInstance(Object... initargs)；根据指定的构造方法创建对象</span></span><br><span class="line"><span class="comment">        - setAccessible(boolean flag)；设置为true，表示取消访问检查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法</span></span><br><span class="line">        Constructor[] cons = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor[] cons2 = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons2)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con1</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        System.out.println(con1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con3</span> <span class="operator">=</span> clazz.getDeclaredConstructor(<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con3);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con4</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con4);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> con4.getModifiers(); <span class="comment">// public: 1 protected: 4 private: 2  获取权限修饰符</span></span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        Parameter[] parameters = con4.getParameters();<span class="comment">//获取参数</span></span><br><span class="line">        <span class="keyword">for</span>(Parameter parameter : parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//暴力反射，表示临时取消权限校验</span></span><br><span class="line">        con4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student)con4.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">14</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-3利用反射获取成员变量"><a href="#9-3利用反射获取成员变量" class="headerlink" title="9.3利用反射获取成员变量"></a>9.3利用反射获取成员变量</h3><p><strong>Class类中用于获取成员变量的方法</strong></p><ul><li>Field[] getFields()；返回所有公共成员变量对象的数组</li><li>Field[] getDeclaredFields()；返回所有成员变量对象的数组</li><li>Field getField(String name)；返回单个公共成员变量对象</li><li>Field getDeclaredField(String name)；返回单个成员变量对象</li></ul><p><strong>Filed类中用于创建对象的方法</strong></p><ul><li>void set(Object obj，Object value)；赋值</li><li>Object get(Object obj)；获取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        **Class类中用于获取成员变量的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - Field[] getFields()；返回所有公共成员变量对象的数组</span></span><br><span class="line"><span class="comment">        - Field[] getDeclaredFields()；返回所有成员变量对象的数组</span></span><br><span class="line"><span class="comment">        - Field getField(String name)；返回单个公共成员变量对象</span></span><br><span class="line"><span class="comment">        - Field getDeclaredField(String name)；返回单个成员变量对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        **Filed类中用于创建对象的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - void set(Object obj，Object value)；赋值</span></span><br><span class="line"><span class="comment">        - Object get(Object obj)；获取值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员变量</span></span><br><span class="line">        <span class="comment">//获取所有成员变量</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields2)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单个成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">gender</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        System.out.println(gender);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取权限修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies</span> <span class="operator">=</span> name.getModifiers();</span><br><span class="line">        System.out.println(modifies);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies2</span> <span class="operator">=</span> gender.getModifiers();</span><br><span class="line">        System.out.println(modifies2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> name.getName();</span><br><span class="line">        System.out.println(n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据类型</span></span><br><span class="line">        Class&lt;?&gt; type = name.getType();</span><br><span class="line">        System.out.println(type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量的值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">29</span>);</span><br><span class="line">        <span class="comment">//临时取消权限检查</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> name.get(stu);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改成员变量的值</span></span><br><span class="line">      name.set(stu,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9-4利用反射获取成员方法"><a href="#9-4利用反射获取成员方法" class="headerlink" title="9.4利用反射获取成员方法"></a>9.4利用反射获取成员方法</h3><p><strong>Class类中用于获取成员方法的方法</strong></p><ul><li>Method[] getMethods();返回所有公共成员方法对象的数组，<mark>包括继承的</mark></li><li>Method[] getDeclaredMethods();返回所有成员方法的数组，<mark>不包括继承的</mark></li><li>Method getMethod(String name,Class<T>… parameterTypes);返回单个公共成员对象方法</li><li>Method getDeclaredMethod(String name,Class<T>… parameterTypes);返回单个成员方法</li></ul><p><strong>Method类中用于创建对象的方法</strong></p><p>Object invoke(Object obj，Object… args); 运行方法</p><p>参数一：用obj对象调用方法</p><p>参数二：调用方法的传递参数(如果没有就不写)</p><p>返回值：方法的返回值(如果没有就不写)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        **Class类中用于获取成员方法的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - Method[] getMethods();返回所有公共成员方法对象的数组，&lt;mark&gt;包括继承的&lt;/mark&gt;</span></span><br><span class="line"><span class="comment">        - Method[] getDeclaredMethods();返回所有成员方法的数组，==不包括继承的==</span></span><br><span class="line"><span class="comment">        - Method getMethod(String name,Class&lt;T&gt;... parameterTypes);返回单个公共成员对象方法</span></span><br><span class="line"><span class="comment">        - Method getDeclaredMethod(String name,Class&lt;T&gt;... parameterTypes);返回单个成员方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        **Method类中用于创建对象的方法**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Object invoke(Object obj，Object... args); 运行方法</span></span><br><span class="line"><span class="comment">        参数一：用obj对象调用方法</span></span><br><span class="line"><span class="comment">        参数二：调用方法的传递参数(如果没有就不写)</span></span><br><span class="line"><span class="comment">        返回值：方法的返回值(如果没有就不写)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员方法</span></span><br><span class="line">        <span class="comment">//获取里面的所有公共成员方法对象(包括父类的所有公共方法)</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取里面的所有的成员方法(不能获取父类的，但是可以获取本类中的私有方法)</span></span><br><span class="line">        Method[] methods1 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods1)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取单一指定方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">        System.out.println(method1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">        <span class="type">int</span> <span class="variable">modifies2</span> <span class="operator">=</span> method1.getModifiers();</span><br><span class="line">        System.out.println(modifies);</span><br><span class="line">        System.out.println(modifies2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> method1.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取形参</span></span><br><span class="line">        Parameter[] parameters = method1.getParameters();</span><br><span class="line">        <span class="keyword">for</span>(Parameter parameter:parameters)&#123;</span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法抛出的异常</span></span><br><span class="line">        Class[] exceptionTypes = method1.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span>(Class exceptionType:exceptionTypes)&#123;</span><br><span class="line">            System.out.println(exceptionType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法运行</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//参数一s:表示方法的调用者</span></span><br><span class="line">        <span class="comment">//参数二&quot;水果&quot;:表示在调用方法时传递的实际参数</span></span><br><span class="line">        method1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method1.invoke(s,<span class="string">&quot;水果&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法的返回值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method1.invoke(s,<span class="string">&quot;水果&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>反射的作用</strong></p><ol><li>获取一个类里面的所有信息，获取到之后，再执行其他的业务逻辑</li><li>结合配置文件，动态的创建对象并调用方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2024/02/04/%E5%9B%BE%E8%AE%BA/"/>
      <url>/2024/02/04/%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="图算法专题"><a href="#图算法专题" class="headerlink" title="图算法专题"></a>图算法专题</h1><h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><ul><li>邻接矩阵</li><li>邻接表</li></ul><p>邻接矩阵可以采用一个二维数组G[][]来进行存取数据，而邻接表可以采用链表形式或者vector数组来实现</p><p>一般来说对于点数较少的图采用邻接矩阵方式比较方便，而对于点数较多的密集图采用邻接表形式比较方便</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="深度优先搜素（DFS）"><a href="#深度优先搜素（DFS）" class="headerlink" title="深度优先搜素（DFS）"></a>深度优先搜素（DFS）</h3><ul><li>邻接矩阵版</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; result; <span class="comment">// 收集符合条件的路径</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; path; <span class="comment">// 1节点到终点的路径</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span> <span class="params">(<span class="type">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 当前遍历的节点x 到达节点n </span></span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123; <span class="comment">// 找到符合条件的一条路径</span></span><br><span class="line">        result.push_back(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">// 遍历节点x链接的所有节点</span></span><br><span class="line">        <span class="keyword">if</span> (graph[x][i] == <span class="number">1</span>) &#123; <span class="comment">// 找到 x链接的节点</span></span><br><span class="line">            path.push_back(i); <span class="comment">// 遍历到的节点加入到路径中来</span></span><br><span class="line">            dfs(graph, i, n); <span class="comment">// 进入下一层递归</span></span><br><span class="line">            path.pop_back(); <span class="comment">// 回溯，撤销本节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 节点编号从1到n，所以申请 n+1 这么大的数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;&gt; graph(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="comment">// 使用邻接矩阵 表示无线图，1 表示 s 与 t 是相连的</span></span><br><span class="line">        graph[s][t] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    path.push_back(<span class="number">1</span>); <span class="comment">// 无论什么路径已经是从1节点出发</span></span><br><span class="line">    dfs(graph, <span class="number">1</span>, n); <span class="comment">// 开始遍历</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">if</span> (result.size() == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// for (const vector&lt;int&gt; &amp;pa : result) &#123;</span></span><br><span class="line">    <span class="comment">//     for (int i = 0; i &lt; pa.size() - 1; i++) &#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; pa[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; pa[pa.size() - 1]  &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;result.size();++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;result[i].size() - <span class="number">1</span>;++j) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;result[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;result[i][result[i].size() - <span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>邻接表版</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result; <span class="comment">// 收集符合条件的路径</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; path; <span class="comment">// 1节点到终点的路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span> <span class="params">(<span class="type">const</span> vector&lt;list&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == n) &#123; <span class="comment">// 找到符合条件的一条路径</span></span><br><span class="line">        result.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : graph[x]) &#123; <span class="comment">// 找到 x指向的节点</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(i); <span class="comment">// 遍历到的节点加入到路径中来</span></span><br><span class="line">        <span class="built_in">dfs</span>(graph, i, n); <span class="comment">// 进入下一层递归</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯，撤销本节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, s, t;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点编号从1到n，所以申请 n+1 这么大的数组</span></span><br><span class="line">    vector&lt;list&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(n + <span class="number">1</span>); <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="comment">// 使用邻接表 ，表示 s -&gt; t 是相连的</span></span><br><span class="line">        graph[s].<span class="built_in">push_back</span>(t);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    path.<span class="built_in">push_back</span>(<span class="number">1</span>); <span class="comment">// 无论什么路径已经是从0节点出发</span></span><br><span class="line">    <span class="built_in">dfs</span>(graph, <span class="number">1</span>, n); <span class="comment">// 开始遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">if</span> (result.<span class="built_in">size</span>() == <span class="number">0</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;pa : result) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pa.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            cout &lt;&lt; pa[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; pa[pa.<span class="built_in">size</span>() - <span class="number">1</span>]  &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="广度优先搜素（BFS）"><a href="#广度优先搜素（BFS）" class="headerlink" title="广度优先搜素（BFS）"></a>广度优先搜素（BFS）</h3><ol><li>邻接矩阵版</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 10000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 10000000</span></span><br><span class="line"><span class="type">int</span> n,G[N][N];<span class="comment">//n为顶点数</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> u)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.push(u);</span><br><span class="line">vis[u]=<span class="literal">true</span>;<span class="comment">//标记已入队</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;n;v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>&amp;&amp;g[u][v]!=INF)</span><br><span class="line">&#123;</span><br><span class="line">q.push(v);</span><br><span class="line">vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTrave</span><span class="params">()</span><span class="comment">//遍历整个图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">BFS(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>邻接表版</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000000</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;Adj[N];<span class="comment">//图G</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//顶点数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> u)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.push(u);</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;Adj[u].size();v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z=Adj[u][v];</span><br><span class="line"><span class="keyword">if</span>(vis[z]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(z);</span><br><span class="line">vis[z]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTrave</span><span class="params">()</span> <span class="comment">//遍历整个图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;n;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">BFS(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n, s, t;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inDegree</span><span class="params">(n, <span class="number">0</span>)</span></span>; <span class="comment">// 记录每个文件的入度</span></span><br><span class="line"> </span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; umap;<span class="comment">// 记录文件依赖关系</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result; <span class="comment">// 记录结果</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="comment">// s-&gt;t，先有s才能有t</span></span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        inDegree[t]++; <span class="comment">// t的入度加一</span></span><br><span class="line">        umap[s].<span class="built_in">push_back</span>(t); <span class="comment">// 记录s指向哪些文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 入度为0的文件，可以作为开头，先加入队列</span></span><br><span class="line">        <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) que.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; inDegree[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int count = 0;</span></span><br><span class="line">    <span class="keyword">while</span> (que.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span>  cur = que.<span class="built_in">front</span>(); <span class="comment">// 当前选中的文件</span></span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//count++;</span></span><br><span class="line">        result.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; files = umap[cur]; <span class="comment">//获取该文件指向的文件</span></span><br><span class="line">        <span class="keyword">if</span> (files.<span class="built_in">size</span>()) &#123; <span class="comment">// cur有后续文件</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; files.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                inDegree[files[i]] --; <span class="comment">// cur的指向的文件入度-1</span></span><br><span class="line">                <span class="keyword">if</span>(inDegree[files[i]] == <span class="number">0</span>) que.<span class="built_in">push</span>(files[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="built_in">size</span>() == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) cout &lt;&lt; result[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; result[n - <span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O（n+m）,空间复杂度O（n） n为顶点数，m为边数</p><p>用途：</p><ol><li>计算工序最短用时（经典拓扑+dp）</li><li>有向无环图（DAG）判环</li><li>分级（排序、分层）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, x, index, ans;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];    <span class="comment">//邻接链表存图</span></span><br><span class="line"><span class="type">int</span> f[maxn], t[maxn];    <span class="comment">//记录总时长，单位时长</span></span><br><span class="line"><span class="type">int</span> indegree[maxn]; <span class="comment">//记录入度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!indegree[i]) &#123;  <span class="comment">//入度为0，入队</span></span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            f[i] = t[i];  <span class="comment">//初始化时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">//先计算该点的时间</span></span><br><span class="line">        <span class="type">int</span> temp = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[temp].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            --indegree[G[temp][i]]; <span class="comment">//子节点的入度全部-1</span></span><br><span class="line">            f[G[temp][i]] = <span class="built_in">max</span>(f[G[temp][i]], f[temp] + t[G[temp][i]]); <span class="comment">//更新子节点的工序用时</span></span><br><span class="line">            <span class="keyword">if</span> (!indegree[G[temp][i]]) q.<span class="built_in">push</span>(G[temp][i]);   <span class="comment">//分层</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">//顶点个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; index; <span class="comment">//工程序号</span></span><br><span class="line">        cin &gt;&gt; t[index];</span><br><span class="line">        <span class="keyword">while</span> (cin &gt;&gt; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            G[x].<span class="built_in">push_back</span>(index);  <span class="comment">//建图</span></span><br><span class="line">            ++indegree[index];  <span class="comment">//入度+1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Topo_sort</span>();</span><br><span class="line">    <span class="comment">//找出最终答案</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans = <span class="built_in">max</span>(ans, f[i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAG判环：只需要新建一个cnt变量来记录队列中pop出来的顶点的个数，设总顶点数为N，若cnt&#x3D;&#x3D;N，则表明无环，若cnt!&#x3D;N，则表示有环。</p><p><strong>拓扑排序的稳定性</strong></p><p>拓扑排序时，若每一次入队的顶点数量均为1，则代表拓扑排序的结果只有一个，排序是稳定的；若每一次入队的顶点的数量不为1，则表示同一阶段有多个入度为0的顶点，这几个顶点的顺序是不固定的，故排序是不稳定的。<br>题目中若对排序有较严格要求，需要特别注意拓扑排序的稳定性。</p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">1005</span>; <span class="comment">// n根据题目中节点数量而定，一般比节点数量大一点就好</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; father = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n, <span class="number">0</span>); <span class="comment">// C++里的一种数组结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 并查集里寻根的过程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u == father[u] ? u : father[u] = <span class="built_in">find</span>(father[u]); <span class="comment">// 路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断 u 和 v是否找到同一个根</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSame</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">find</span>(u);</span><br><span class="line">    v = <span class="built_in">find</span>(v);</span><br><span class="line">    <span class="keyword">return</span> u == v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将v-&gt;u 这条边加入并查集</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">find</span>(u); <span class="comment">// 寻找u的根</span></span><br><span class="line">    v = <span class="built_in">find</span>(v); <span class="comment">// 寻找v的根</span></span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> ; <span class="comment">// 如果发现根相同，则说明在一个集合，不用两个节点相连直接返回</span></span><br><span class="line">    father[v] = u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><h3 id="Dijkstra算法（处理单源最短路径）"><a href="#Dijkstra算法（处理单源最短路径）" class="headerlink" title="Dijkstra算法（处理单源最短路径）"></a>Dijkstra算法（处理单源最短路径）</h3><p>​       Dijkstra算法用来解决单源最短路径问题，即给定一个图G和起点s，通过算法求出点s到达图中其他顶点的最短路径。其基本思想是对图G（V,E)设置集合S,存放已访问的顶点，然后每次从V-S中选择与顶点s最短距离最小的一个顶点（记为u)，访问并加入集合S。之后，令顶点u为中介点，优化起点s与所有从u所能到达的顶点v之间的最短距离。这样执行n次（n为顶点个数）,知道集合S中包含图中所有起点。</p><ul><li>邻接矩阵版</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> G[N][N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> vis[N] = &#123;<span class="literal">false</span>&#125;; <span class="comment">// 标记数组</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1000000005</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span> &#123;</span><br><span class="line">fill(d,d+N,INF);</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line"><span class="type">int</span> u = <span class="number">-1</span>,MIN = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="literal">false</span> &amp;&amp; d[j] &lt; MIN) &#123;</span><br><span class="line">u = j;</span><br><span class="line">MIN = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找不到小于INF的d[u],说明剩下的顶点与s不连通</span></span><br><span class="line"><span class="keyword">if</span>(u == <span class="number">-1</span>)<span class="keyword">return</span> ;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">1</span>;v&lt;=n;++v) &#123;</span><br><span class="line"><span class="comment">// 如果v未被访问并且能到达v且使得到达起点s的距离更小</span></span><br><span class="line"><span class="keyword">if</span>(vis[v] == <span class="literal">false</span> &amp;&amp; G[u][v] != INF &amp;&amp; d[u] + G[u][v] &lt; d[v]) &#123;</span><br><span class="line">d[v] = d[u] + G[u][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="comment">// 初始化，慎用memset </span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j) &#123;</span><br><span class="line">G[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">G[u][v] = w; </span><br><span class="line">&#125; </span><br><span class="line">Dijkstra(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(d[n] == INF)<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;d[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>邻接表版</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">//顶点数 边数</span></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//记录起点s到达图中各顶点的最短距离</span></span><br><span class="line"><span class="type">bool</span> vis[N]=&#123;<span class="literal">false</span>&#125;;<span class="comment">//标记数组，判断顶点是否访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> v;<span class="comment">//v为边的终点</span></span><br><span class="line">  <span class="type">int</span> weight;<span class="comment">//边的权值</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt;Adj[N]; <span class="comment">//图G Adj[u]存放从顶点u出发可以到达的所有顶点</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span><span class="comment">//s为起点</span></span><br><span class="line">&#123;</span><br><span class="line"> fill(d,d+N,INF);<span class="comment">//fill函数将整个d数组赋值为INF（慎用memset) </span></span><br><span class="line"> d[s]=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">-1</span>,MIN=INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;d[j]&lt;MIN)</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">MIN=d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找不到小于INF的d[u]，说明剩下的顶点和s不连通</span></span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">-1</span>)<span class="keyword">return</span> ;</span><br><span class="line">vis[u]=<span class="literal">true</span>;<span class="comment">//标记已访问</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;Adj[u].size();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v=Adj[u][j].v;</span><br><span class="line"><span class="keyword">if</span>(vis[v]==<span class="literal">false</span>&amp;&amp;Adj[u][j].weight+d[u]&lt;d[v])</span><br><span class="line">&#123;</span><br><span class="line">d[v]=d[u]+Adj[u][j].weight;<span class="comment">//松弛</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">Node nd;</span><br><span class="line">nd.v=y;nd.weight=<span class="number">1</span>;<span class="comment">//边的权重</span></span><br><span class="line">Adj[x].push_back(nd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">Dijkstra(i);</span><br><span class="line"><span class="type">int</span> maxn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">           <span class="keyword">if</span>(d[j]!=INF)</span><br><span class="line">           &#123;</span><br><span class="line">           maxn=max(j,maxn);<span class="comment">//找每个顶点能够到达的最大编号顶点</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxn&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>堆优化版</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,u,v,w;<span class="comment">//顶点数 边数  源点</span></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//记录起点s到达图中各顶点的最短距离</span></span><br><span class="line"><span class="type">bool</span> vis[N]= &#123;<span class="literal">false</span>&#125;; <span class="comment">//标记数组，判断顶点是否访问</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v;<span class="comment">//v为边的到达点</span></span><br><span class="line"><span class="type">int</span> weight;<span class="comment">//边的权值</span></span><br><span class="line"><span class="built_in">Node</span>(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">v=a;</span><br><span class="line">weight=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Node&gt;Adj[N]; <span class="comment">//图G Adj[u]存放从顶点u出发可以到达的所有顶点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意优先级队列的优先级定义，小根堆要用大于号</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node n1,Node n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n1.weight==n2.weight)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n1.v&gt;n2.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> n1.weight&gt;n2.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span><span class="comment">//s为起点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fill</span>(d,d+N,INF);<span class="comment">//fill函数将整个d数组赋值为INF（慎用memset)</span></span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">priority_queue&lt;Node,vector&lt;Node&gt;,cmp&gt;q;<span class="comment">//优先级队列的自定义语法</span></span><br><span class="line"><span class="function">Node <span class="title">n1</span><span class="params">(s,<span class="number">0</span>)</span></span>;</span><br><span class="line">q.<span class="built_in">push</span>(n1);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">Node M=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//特判两种情况</span></span><br><span class="line"><span class="keyword">if</span>(vis[M.v]==<span class="literal">true</span>)<span class="keyword">continue</span>;<span class="comment">//已访问过的结点不需要再访问</span></span><br><span class="line"><span class="keyword">if</span>(d[M.v]==INF)<span class="keyword">break</span>;<span class="comment">//不连通</span></span><br><span class="line">vis[M.v]=<span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> v=M.v;</span><br><span class="line"><span class="comment">//松弛</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; Adj[v].<span class="built_in">size</span>(); ++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d[Adj[v][w].v] &gt; d[v] + Adj[v][w].weight)</span><br><span class="line">&#123;</span><br><span class="line">d[Adj[v][w].v] = d[v] + Adj[v][w].weight;</span><br><span class="line"><span class="function">Node <span class="title">K</span><span class="params">(Adj[v][w].v, d[Adj[v][w].v])</span></span>;</span><br><span class="line">q.<span class="built_in">push</span>(K);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="function">Node <span class="title">temp</span><span class="params">(y,z)</span></span>;</span><br><span class="line">Adj[x].<span class="built_in">push_back</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Dijkstra</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;d[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd算法（解决全源最短路径）"><a href="#Floyd算法（解决全源最短路径）" class="headerlink" title="Floyd算法（解决全源最短路径）"></a>Floyd算法（解决全源最短路径）</h3><p>该算法用于求任意两点之间的最短路径，也可以来求解一个点是否能到达另一个点。dis[][]数组用于存图。算法核心在于中转站的选择，意为在前v个中转站被允许参与中转的情况下，任意两点可以到达的最短路径，枚举中转站的时候也可以用来判断该点是否位于最短路径当中。注意先初始化dis[][]为INF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200</span>;<span class="comment">// 最大定点数 </span></span><br><span class="line"><span class="type">int</span> dis[N][N];<span class="comment">// dis[i][j] 表示i到j的最短距离 </span></span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">// 顶点数 边数 </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Floyd</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;++k) &#123;<span class="comment">// k作为中介节点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i][k] != INF &amp;&amp; dis[k][j] != INF &amp;&amp; dis[i][j] &lt; dis[i][k] + dis[k][j]) &#123;</span><br><span class="line">dis[i][j] = dis[i][k] + dis[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line">fill(dis[<span class="number">0</span>],dis[<span class="number">0</span>] + N * N, INF);<span class="comment">// 初始化</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)dis[i][i] = <span class="number">0</span>;<span class="comment">// i 到 i 的距离初始化为0 </span></span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">dis[u][v] = w;<span class="comment">// 有向图为例 </span></span><br><span class="line">&#125; </span><br><span class="line">Floyd();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求路径</p><p>Floyd算法可以多开一个path的二位数组来存放中转站标号，只需要在dp的时候在下面多加一句path[u][w]&#x3D;v;即可。<br>在求路径的时候需要用到递归。限制条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; dis[i][j];</span><br><span class="line">        path[i][j] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Floyd算法求任意两点最短路径长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>; w &lt;= n; ++w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[u][w] &gt; dis[u][v] + dis[v][w]) &#123;</span><br><span class="line">                dis[u][w] = min(dis[u][w], dis[u][v] + dis[v][w]);</span><br><span class="line">                <span class="comment">//  path[u][w]=v;   //记录路径</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPath</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paht[u][v] == <span class="number">-1</span>) &#123;    <span class="comment">//u与v之间已经没有任何中转站，二者已经直接相连了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span> &lt;&lt; u &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = path[u][v]; <span class="comment">//中转站</span></span><br><span class="line">        <span class="built_in">printPath</span>(u, mid);   <span class="comment">//左递归打印u到中转站的路径</span></span><br><span class="line">        <span class="built_in">printPath</span>(mid, v);   <span class="comment">//有递归打印中转站到v的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h3><p>Bellman-Ford算法使用于求解单源最短路，该算法可以允许负权值边的存在。Bellman-Ford算法算法思想为进行n - 1次松弛操作，每一次松弛操作都枚举每一条边，对该边的两端顶点路径长度进行修改。以此求出最短路径，但是无法解决存在负权回路的情况，因此还可以检测是否包含负权回路。 时间复杂度为O（nm），其中n为顶点数，m为边数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>;<span class="comment">// 顶点</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e4</span>+<span class="number">10</span>;<span class="comment">// 边 </span></span><br><span class="line"><span class="type">int</span> dis[N], u[M], v[M], w[M];<span class="comment">// 最短距离 M边的起点 M边的终点 M边的权重 </span></span><br><span class="line"><span class="type">int</span> n,m;<span class="comment">// 顶点数 边数 </span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;  <span class="comment">// 无向图需要记录边数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;++i) &#123;</span><br><span class="line"><span class="type">int</span> check = <span class="number">0</span>;<span class="comment">// 标记 </span></span><br><span class="line"><span class="comment">// 枚举每一条边 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u[j]] + w[j] &lt; dis[v[j]]) &#123;</span><br><span class="line">dis[v[j]] = dis[u[j]] + w[j];</span><br><span class="line">check = <span class="number">1</span>;<span class="comment">// 1说明修改了边 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(check == <span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">// 0说明不需要继续松弛 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在下面再进行一次循环，如果还存在dis[u[j]] + w[j] &lt; dis[[v]j]则说明存在负权回路 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line"><span class="type">int</span> x,y,z; <span class="comment">// 输入边</span></span><br><span class="line"><span class="comment">// 无向图 </span></span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z; </span><br><span class="line">u[cnt] = x, v[cnt] = y, w[cnt] = z;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="comment">// 有向图则不需要cnt以及下面的两条语句 </span></span><br><span class="line">u[cnt] = y, v[cnt] = x, w[cnt] = z;</span><br><span class="line">cnt++; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">Bellman_Ford</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">cout&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><p>SPFA（Shortest Path Faster Algorithm）算法，是Bellman-Ford算法的队列优化版，时间复杂度较为玄学，O（km），k为常数，平均值为2。理论上讲SPFA可以对Bellman-Ford进行常数级别的优化，但是在算法竞赛当中可能出现卡SPFA时间复杂度使其时间复杂度退化为O（nm）的情况，对于不存在负权值边的图来讲，Dijkstra算法在优先队列优化过后效果稳定且时间复杂度优秀，优先选用Dijkstra。但是对于存在负权值边的图来讲，Dijkstra算法会失效，所以还得使用SPFA。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, s, a, b, w;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> v, <span class="type">int</span> w) &#123;</span><br><span class="line">vertex = v, weight = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vertex, weight;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; G[maxn];   <span class="comment">//邻接链表存图</span></span><br><span class="line"><span class="type">int</span> dis[maxn];  <span class="comment">//记录最终的距离数组</span></span><br><span class="line"><span class="type">bool</span> mark[maxn];<span class="comment">//记录顶点是否存在于队列之中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPFA</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化距离为无穷大，原点为0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dis[i] = INF;</span><br><span class="line">dis[start] = <span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line">mark[start] = <span class="number">1</span>;<span class="comment">//该顶点已经入队</span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> v = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">mark[v] = <span class="number">0</span>;<span class="comment">//该顶点出队</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; G[v].<span class="built_in">size</span>(); ++w) &#123;  <span class="comment">//松弛</span></span><br><span class="line"><span class="keyword">if</span> (dis[G[v][w].vertex] &gt; dis[v] + G[v][w].weight) &#123;</span><br><span class="line">dis[G[v][w].vertex] = dis[v] + G[v][w].weight;</span><br><span class="line"><span class="keyword">if</span> (!mark[G[v][w].vertex]) &#123;<span class="comment">//可以松弛并且该顶点没有在队列里面</span></span><br><span class="line">mark[G[v][w].vertex] = <span class="number">1</span>;<span class="comment">//顶点入队并且进行mark的记录</span></span><br><span class="line">q.<span class="built_in">push</span>(G[v][w].vertex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SPFA算法判断是否存在负环"><a href="#SPFA算法判断是否存在负环" class="headerlink" title="SPFA算法判断是否存在负环"></a>SPFA算法判断是否存在负环</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n; <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx; <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N], cnt[N]; <span class="comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span></span><br><span class="line"><span class="type">bool</span> st[N]; <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"><span class="comment">// 如果存在负环，则返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 不需要初始化dist数组</span></span><br><span class="line"><span class="comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理</span></span><br><span class="line">一定有两个点相同，所以存在环。</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">st[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">st[t] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = dist[t] + w[i];</span><br><span class="line">cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span></span><br><span class="line"><span class="keyword">if</span> (!st[j])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(j);</span><br><span class="line">st[j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> v, <span class="type">int</span> w) &#123;</span><br><span class="line">        vertex = v, weight = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> vertex, weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node n1, node n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1.weight &gt; n2.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, a, b, w, ans;</span><br><span class="line"><span class="type">bool</span> mark[maxn];<span class="comment">//标记数组</span></span><br><span class="line"><span class="type">int</span> dis[maxn];  <span class="comment">//存与顶点相连的边的长度</span></span><br><span class="line">vector&lt;node&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Prim</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dis[i] = INF;</span><br><span class="line">    dis[start] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node, vector&lt;node&gt;, cmp&gt; q;</span><br><span class="line">    <span class="function">node <span class="title">N</span><span class="params">(start, <span class="number">0</span>)</span></span>;</span><br><span class="line">    q.<span class="built_in">push</span>(N);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node M = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//特判</span></span><br><span class="line">        <span class="keyword">if</span> (mark[M.vertex]) <span class="keyword">continue</span>;    <span class="comment">//已访问过的节点不需要再访问</span></span><br><span class="line">        <span class="keyword">if</span> (dis[M.vertex] == INF) <span class="keyword">break</span>;   <span class="comment">//图不连通</span></span><br><span class="line">        mark[M.vertex] = <span class="number">1</span>;   <span class="comment">//标记已访问</span></span><br><span class="line">        <span class="type">int</span> v = M.vertex;</span><br><span class="line">        <span class="comment">//松弛</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[v].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="comment">//需要特判是否重复选择</span></span><br><span class="line">            <span class="keyword">if</span> (dis[G[v][i].vertex] &gt; G[v][i].weight &amp;&amp; !mark[G[v][i].vertex]) &#123;</span><br><span class="line">                dis[G[v][i].vertex] = G[v][i].weight;</span><br><span class="line">                <span class="function">node <span class="title">P</span><span class="params">(G[v][i].vertex, G[v][i].weight)</span></span>;</span><br><span class="line">                q.<span class="built_in">push</span>(P);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;    <span class="comment">//创建边结构体</span></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> _u, <span class="type">int</span> _v, <span class="type">int</span> _w) &#123;</span><br><span class="line">        u = _u, v = _v, w = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge e1, edge e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e1.w &lt; e2.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, a, b, w, cnt, ans;</span><br><span class="line">vector&lt;edge&gt; E; <span class="comment">//存储图的所有边</span></span><br><span class="line"><span class="type">int</span> father[maxn];   <span class="comment">//并查集</span></span><br><span class="line"><span class="type">int</span> _find(<span class="type">int</span> s) &#123; <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">while</span> (father[s] != s) s = father[s];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> s1, <span class="type">int</span> s2)</span> </span>&#123;    <span class="comment">//并</span></span><br><span class="line">    <span class="type">int</span> f1 = _find(s1), f2 = _find(s2);</span><br><span class="line">    father[<span class="built_in">max</span>(f1, f2)] = father[<span class="built_in">min</span>(f1, f2)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) father[i] = i;    <span class="comment">//初始化每一条边为自己的父亲</span></span><br><span class="line">    <span class="comment">//按照每一条边的权重排序</span></span><br><span class="line">    <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; E.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">//枚举每一条边</span></span><br><span class="line">        <span class="type">int</span> _u = E[i].u, _v = E[i].v, _w = E[i].w;</span><br><span class="line">        <span class="keyword">if</span> (_find(_u) != _find(_v)) &#123;</span><br><span class="line">            cnt++;    <span class="comment">//计数器，如果最终cnt!=n-1则图不连通</span></span><br><span class="line">            ans += _w;</span><br><span class="line">            <span class="built_in">merge</span>(_u, _v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">//全部的边找到了就截断函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h2><h3 id="强连通分量（Strongly-Connected-Components）"><a href="#强连通分量（Strongly-Connected-Components）" class="headerlink" title="强连通分量（Strongly Connected Components）"></a>强连通分量（Strongly Connected Components）</h3><ul><li><p>若有向图中有两个点 i 与 j 可以相互到达，则称这两个点强连通，如果图中任意两个点都强连通，则该图称为强连通图。任意一个点自己和自己是强连通的。</p></li><li><p>非强连通有向图的极大强连通子图称为该图的强连通分量。</p></li><li><p>根据定义，两个点一定是强连通的，当且仅当它们在同一个环内。环上所有的点都互相强连通。</p></li></ul><p><strong>算法思路</strong></p><p>该算法有两个数组比较重要，第一个是时间戳数组dfn[]，该数组是用来记录对应节点第一次被访问的顺序。另一个是追溯值数组low[]，该数组表示了从对应节点出发，所能够访问到的最早时间戳，以便方便我们进行强连通分量的判断。</p><p>算法分三步：</p><ol><li>入：指从 x 节点发起Tarjan算法时，记录 x 对应的时间戳，并将 x 入栈。</li><li>回：我们对 x 发起Tarjan算法，对 x 的子节点 y 进行遍历，分以下三种情况：<ul><li>如果 y 还未被访问，则继续对 y 进行深搜。回溯到 x 的时候，我们需要利用 y 的low值来更新 x 的low值。</li><li>如果 y 已经被访问并且 y 在栈中，说明了 y 是 x 的祖先节点或者左子树节点，这个时候我们直接利用 y 的dfn值来更新 x 的low值。</li><li>如果 y 已经访问并且不在栈中，表示 y 已经是属于另一个强连通分量，不需要对其进行其他处理了。</li></ul></li><li>离：在处理完 x 之后，判断 x 是否为一个强连通分量的入口，如果是，则出栈，并且记录相对应的强连通分量。</li><li>根据算法过程容易注意到，因为回溯，所以越往后搜索到的点强连通分量编号越靠前。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];<span class="comment">//邻接表存图</span></span><br><span class="line"><span class="type">bool</span> instk[maxn];<span class="comment">//判断元素是否在栈中</span></span><br><span class="line"><span class="type">int</span> stk[maxn], top;<span class="comment">//stk为手写栈，top为栈顶指针</span></span><br><span class="line"><span class="type">int</span> dfn[maxn], low[maxn], tot;<span class="comment">//时间戳，low值，对应的标记</span></span><br><span class="line"><span class="type">int</span> scc[maxn], siz[maxn], cnt;<span class="comment">//对应的节点属于哪一个强连通分量，对应的强连通分量的大小，强连通分量的编号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">//入</span></span><br><span class="line">dfn[x] = low[x] = ++tot;<span class="comment">//初始化时间戳和追溯值</span></span><br><span class="line">stk[++top] = x, instk[x] = <span class="number">1</span>;<span class="comment">//元素入栈</span></span><br><span class="line"><span class="comment">//回</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[x].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line"><span class="type">int</span> y = G[x][i];</span><br><span class="line"><span class="keyword">if</span> (!dfn[y]) &#123;<span class="comment">//子节点没被访问，访问子节点</span></span><br><span class="line"><span class="built_in">Tarjan</span>(y);</span><br><span class="line">low[x] = <span class="built_in">min</span>(low[x], low[y]);<span class="comment">//利用子节点的追溯值来更新自己的追溯值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instk[y]) &#123;<span class="comment">//子节点已经在栈中</span></span><br><span class="line">low[x] = <span class="built_in">min</span>(low[x], dfn[y]);<span class="comment">//子节点的时间戳来更新自己的追溯值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//离</span></span><br><span class="line"><span class="keyword">if</span> (dfn[x] == low[x]) &#123;<span class="comment">//如果该节点是某一个SCC的入口，则对这个SCC进行处理</span></span><br><span class="line"><span class="type">int</span> tmp; ++cnt;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">tmp = stk[top--]; instk[tmp] = <span class="number">0</span>;<span class="comment">//取栈顶元素，出栈</span></span><br><span class="line">scc[tmp] = cnt;<span class="comment">//该顶点属于第cnt个SCC</span></span><br><span class="line">++siz[cnt];<span class="comment">//第cnt个SCC的大小加1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (tmp != x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!dfn[i]) <span class="built_in">Tarjan</span>(i);<span class="comment">//如果这个顶点没被访问过，就从它开始发起Tarjan算法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (siz[i] &gt; <span class="number">1</span>) ++ans;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tarjan算法缩点"><a href="#Tarjan算法缩点" class="headerlink" title="Tarjan算法缩点"></a>Tarjan算法缩点</h3><p>Tarjan算法的缩点一般是在利用Tarjan算法求出SCC之后进行的操作，通常是对一个节点 i 访问它的子节点 j ，而后判断两个节点是否属于同一个SCC，如果不属于同一个SCC，则记录相应的入度出度，或者直接建新图。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩点处理出度入度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (scc[i] != scc[G[i][j]]) &#123;</span><br><span class="line">din[scc[G[i][j]]]++;<span class="comment">//入度++</span></span><br><span class="line">dout[scc[i]]++;<span class="comment">//出度++</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩点建新图</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G[i].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (scc[i] != scc[G[i][j]])</span><br><span class="line">new_G[scc[i]].<span class="built_in">push_back</span>(scc[G[i][j]]);<span class="comment">//建新图</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hierholzer算法"><a href="#Hierholzer算法" class="headerlink" title="Hierholzer算法"></a>Hierholzer算法</h2><p>又称插入回路法，用于求解欧拉路和欧拉路径。</p><p>时间复杂度O（n+m），空间复杂度O（n），n为顶点数，m为边数。</p><p>求解欧拉路的时候需要提前判明该图是否存在欧拉路。判定条件如下：</p><p>有向图：</p><ul><li>欧拉回路：所有顶点出度入度一致。</li><li>欧拉路径：恰好有一个点的出度比入度多1（起点），恰好有一个点的入度比出度多1（终点）。</li></ul><p>无向图：</p><ul><li>欧拉回路：所有顶点的度数为偶数。</li><li>欧拉路径：恰好有两个顶点的度数为奇数。</li></ul><h3 id="有向图欧拉路"><a href="#有向图欧拉路" class="headerlink" title="有向图欧拉路"></a>有向图欧拉路</h3><p>接下来以邻接链表有向图的欧拉路求解算法进行演示（字典序最小的欧拉路）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000005</span>;</span><br><span class="line"><span class="type">int</span> n, m, u, v, start = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>; <span class="comment">//判定图是否满足要求，默认满足欧拉图要求</span></span><br><span class="line"><span class="type">int</span> indegree[maxn], outdegree[maxn]; <span class="comment">//入度出度</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];    <span class="comment">//邻接链表存图</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; ans; <span class="comment">//存路径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge_path</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;  <span class="comment">//出度比入度多的顶点个数，入度比出度多的顶点个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegree[i] == outdegree[i]) <span class="keyword">continue</span>; <span class="comment">//出度入度相等</span></span><br><span class="line">        <span class="keyword">if</span> (indegree[i] + <span class="number">1</span> == outdegree[i]) &#123;   <span class="comment">//起点</span></span><br><span class="line">            cnt1++;</span><br><span class="line">            start = i;    <span class="comment">//记录起点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (indegree[i] == outdegree[i] + <span class="number">1</span>) cnt2++;    <span class="comment">//终点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;  <span class="comment">//其他条件不满足欧拉图要求</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!((cnt1 == <span class="number">1</span> &amp;&amp; cnt2 == <span class="number">1</span>) || (cnt1 == <span class="number">0</span> &amp;&amp; cnt2 == <span class="number">0</span>))) flag = <span class="literal">false</span>;   <span class="comment">//欧拉路径和欧拉回路情况判定</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = G[s].<span class="built_in">begin</span>(); it != G[s].<span class="built_in">end</span>();) &#123;</span><br><span class="line">        <span class="type">int</span> next = *it;   <span class="comment">//取点</span></span><br><span class="line">        it = G[s].<span class="built_in">erase</span>(it);  <span class="comment">//删边</span></span><br><span class="line">        <span class="built_in">dfs</span>(next);  <span class="comment">//深搜继续</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">push</span>(s);    <span class="comment">//无法再搜索了，此时记录节点，回溯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;  <span class="comment">//点数和边数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);  <span class="comment">//建图</span></span><br><span class="line">        ++outdegree[u]; <span class="comment">//记录出度</span></span><br><span class="line">        ++indegree[v];  <span class="comment">//记录入度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">juede_path</span>();   <span class="comment">//判定该图是否为欧拉图</span></span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(G[i].<span class="built_in">begin</span>(), G[i].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> temp = ans.<span class="built_in">top</span>();</span><br><span class="line">        cout &lt;&lt; temp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无向图欧拉路"><a href="#无向图欧拉路" class="headerlink" title="无向图欧拉路"></a>无向图欧拉路</h3><p>无向图欧拉路，使用了并查集特判图是否连通。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, start = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>; <span class="comment">//默认满足欧拉图要求</span></span><br><span class="line"><span class="type">int</span> degree[maxn], father[maxn];    <span class="comment">//顶点的度，father为并查集，用于判断图是否连通</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[maxn];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;    <span class="comment">//边结构体，用于记录无向边的信息</span></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> _u, <span class="type">int</span> _v) &#123; u = _u, v = _v; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(edge e1)<span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == e1.u) <span class="keyword">return</span> v &lt; e1.v;</span><br><span class="line">        <span class="keyword">return</span> u &lt; e1.u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;edge&gt; E;    <span class="comment">//储存边的信息</span></span><br><span class="line"><span class="type">int</span> _find(<span class="type">int</span> s) &#123;    <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">while</span> (father[s] != s) s = father[s];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _merge(<span class="type">int</span> s1, <span class="type">int</span> s2) &#123;        <span class="comment">//并</span></span><br><span class="line">    <span class="type">int</span> f1 = _find(s1), f2 = _find(s2);</span><br><span class="line">    father[<span class="built_in">max</span>(f1, f2)] = father[<span class="built_in">min</span>(f1, f2)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge_path</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        father[i] = i;    <span class="comment">//初始化并查集数组</span></span><br><span class="line">        <span class="keyword">if</span> (degree[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            cnt++;  <span class="comment">//度数为奇数的点</span></span><br><span class="line">            start = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (set&lt;edge&gt;::iterator it = E.<span class="built_in">begin</span>(); it != E.<span class="built_in">end</span>(); it++) &#123;    <span class="comment">//并</span></span><br><span class="line">        edge tmp = *it;</span><br><span class="line">        _merge(tmp.u, tmp.v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> f = _find(i);</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="number">1</span>) &#123;    <span class="comment">//判断图不连通</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(cnt == <span class="number">0</span> || cnt == <span class="number">2</span>)) flag = <span class="literal">false</span>;    <span class="comment">//度数有除了0和2以外的，不是欧拉图</span></span><br><span class="line"><span class="comment">//    if (cnt == 2 &amp;&amp; !(degree[1] &amp; 1)) flag = false;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[start].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        edge _find(<span class="built_in">min</span>(start, G[start][i]), <span class="built_in">max</span>(start, G[start][i]));</span><br><span class="line">        set&lt;edge&gt;::iterator it = E.<span class="built_in">find</span>(_find);</span><br><span class="line">        <span class="keyword">if</span> (it != E.<span class="built_in">end</span>()) &#123;   <span class="comment">//边存在</span></span><br><span class="line">            E.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="built_in">dfs</span>(G[start][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">push</span>(start);    <span class="comment">//回溯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        G[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">        E.<span class="built_in">insert</span>(<span class="built_in">edge</span>(<span class="built_in">min</span>(a, b), <span class="built_in">max</span>(a, b)));    <span class="comment">//储存边</span></span><br><span class="line">        degree[a]++;</span><br><span class="line">        degree[b]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">judge_path</span>();</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;    <span class="comment">//无法画出欧拉路</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//排序，保证路径的字典序最小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(G[i].<span class="built_in">begin</span>(), G[i].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(start);</span><br><span class="line">        <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> temp = ans.<span class="built_in">top</span>();</span><br><span class="line">            cout &lt;&lt; temp &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            ans.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学问题</title>
      <link href="/2024/02/03/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/03/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="位运算以及优化技巧"><a href="#位运算以及优化技巧" class="headerlink" title="位运算以及优化技巧"></a>位运算以及优化技巧</h2><h3 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>; <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求n的第k位数字: n &gt;&gt; k &amp; <span class="number">1</span></span><br><span class="line">返回n的最后一位<span class="number">1</span>：<span class="built_in">lowbit</span>(n) = n &amp; -n</span><br></pre></td></tr></table></figure><h2 id="一、高精度"><a href="#一、高精度" class="headerlink" title="一、高精度"></a>一、高精度</h2><h3 id="1-高精度加法"><a href="#1-高精度加法" class="headerlink" title="1.高精度加法"></a>1.高精度加法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//高精度加法计算</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str1;</span><br><span class="line">    string str2;</span><br><span class="line">    cin &gt;&gt; str1;<span class="comment">//输入第一个数</span></span><br><span class="line">    cin &gt;&gt; str2;<span class="comment">//输入第二个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str1.<span class="built_in">size</span>(); i ++)<span class="comment">//逆序输入</span></span><br><span class="line">        a[str1.<span class="built_in">size</span>()<span class="number">-1</span> - i] = str1[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str2.<span class="built_in">size</span>(); i ++)<span class="comment">//逆序输入</span></span><br><span class="line">        b[str2.<span class="built_in">size</span>()<span class="number">-1</span> - i] = str2[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">max</span>(str1.<span class="built_in">size</span>(), str2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        c[i+<span class="number">1</span>] += c[i] / <span class="number">10</span>;<span class="comment">//若大于10，进1</span></span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (c[len<span class="number">-1</span>] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">        cout &lt;&lt; c[len<span class="number">-1</span>-i];<span class="comment">//逆序输出数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-高精度减法"><a href="#2-高精度减法" class="headerlink" title="2.高精度减法"></a>2.高精度减法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;String&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1, s2;</span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; s2;    <span class="comment">//输入两个数字</span></span><br><span class="line"><span class="comment">//判断相减之后是否为负数</span></span><br><span class="line"><span class="keyword">if</span> (s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>() || s1.<span class="built_in">size</span>() == s2.<span class="built_in">size</span>() &amp;&amp; s1 &lt; s2) &#123;</span><br><span class="line">    <span class="built_in">swap</span>(s1, s2);    <span class="comment">//交换s1和s2，保证使用s1-s2</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">max</span>(s1.<span class="built_in">size</span>(), s2.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    a[s1.<span class="built_in">size</span>() - <span class="number">1</span> - i] = s1[i] - <span class="string">&#x27;0&#x27;</span>;    <span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s2.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    b[s2.<span class="built_in">size</span>() - <span class="number">1</span> - i] = s2[i] - <span class="string">&#x27;0&#x27;</span>;    <span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理相减</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; b[i]) &#123; <span class="comment">//不够减向上借一位</span></span><br><span class="line">        a[i + <span class="number">1</span>]--;</span><br><span class="line">        a[i] += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c[i] = a[i] - b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;   <span class="comment">//逆序输出</span></span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-高精度乘低精度"><a href="#3-高精度乘低精度" class="headerlink" title="3.高精度乘低精度"></a>3.高精度乘低精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N],b,c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;b;<span class="comment">//输入大数字 小数字</span></span><br><span class="line"><span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[len<span class="number">-1</span>-i]=s[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理相乘</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]+=a[i]*b;</span><br><span class="line">c[i+<span class="number">1</span>]+=c[i]/<span class="number">10</span>;</span><br><span class="line">c[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求出数组最终长度</span></span><br><span class="line"><span class="keyword">while</span>(c[len]&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[len+<span class="number">1</span>]+=c[len]/<span class="number">10</span>;</span><br><span class="line">c[len]%=<span class="number">10</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">while</span>(c[len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//逆序输出</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-高精度乘高精度"><a href="#4-高精度乘高精度" class="headerlink" title="4.高精度乘高精度"></a>4.高精度乘高精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1,s2;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    a[s1.<span class="built_in">size</span>()<span class="number">-1</span>-i]=s1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s2.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">b[s2.<span class="built_in">size</span>()<span class="number">-1</span>-i]=s2[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//逆序输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理相乘</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;s2.<span class="built_in">size</span>();j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k=i+j;</span><br><span class="line">c[k]+=a[i]*b[j];</span><br><span class="line">c[k+<span class="number">1</span>]+=c[k]/<span class="number">10</span>;</span><br><span class="line">c[k]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断进位进到哪里，两个数相乘，位数最多是x+y位，所以从x+y+1位那里开始判断</span></span><br><span class="line"><span class="type">int</span> len=s1.<span class="built_in">size</span>()+s2.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(c[len<span class="number">-1</span>]&gt;<span class="number">0</span>)len++;</span><br><span class="line"><span class="comment">//删除前导0</span></span><br><span class="line"><span class="keyword">while</span>(c[len<span class="number">-1</span>]==<span class="number">0</span>&amp;&amp;len&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;c[i];<span class="comment">//逆序输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-低精度除法高精商"><a href="#5-低精度除法高精商" class="headerlink" title="5.低精度除法高精商"></a>5.低精度除法高精商</h3><p>a除以b，要求输出小数点后n位</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a, b, n, c[<span class="number">100</span>];</span><br><span class="line">c[<span class="number">0</span>] = a / b;   <span class="comment">//整数部分</span></span><br><span class="line"><span class="type">int</span> t = a % b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    c[i] = t * <span class="number">10</span> / b;</span><br><span class="line">    t = t * <span class="number">10</span> - c[i] * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先输出小数点前的数字以及小数点</span></span><br><span class="line">cout &lt;&lt; c[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="comment">//然后再来输出小数点后面的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    cout &lt;&lt; c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-高精度除法低精度商"><a href="#6-高精度除法低精度商" class="headerlink" title="6.高精度除法低精度商"></a>6.高精度除法低精度商</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//除数用s1存放，被除数用int b存放，余数用int t存放，商用s2存放</span></span><br><span class="line">string s1, s2;</span><br><span class="line"><span class="type">int</span> b, t, x;</span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; b;</span><br><span class="line"><span class="comment">//高精度除法用正序转存s1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    a[i] = s1[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商暂时存在数组c中，长度存在int x中</span></span><br><span class="line">t = x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//代入计算的时候要注意余数t的参与</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    c[i] = (t * <span class="number">10</span> + a[i]) / b; <span class="comment">//记得加上上一个数作除法之后留下的余数</span></span><br><span class="line">    t = (t * <span class="number">10</span> + a[i]) % b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理前导0</span></span><br><span class="line"><span class="keyword">while</span> (c[x] == <span class="number">0</span> &amp;&amp; x &lt; s1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将商存到s2中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; s1.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    s2 += c[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出商和余数</span></span><br><span class="line">cout &lt;&lt; s2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; t;</span><br></pre></td></tr></table></figure><h2 id="二、分数计算"><a href="#二、分数计算" class="headerlink" title="二、分数计算"></a>二、分数计算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分数运算</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Frac</span><span class="comment">//分数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> up;<span class="comment">//分子</span></span><br><span class="line"><span class="type">int</span> down;<span class="comment">//分母</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//约分</span></span><br><span class="line"><span class="function">Frac <span class="title">reduction</span><span class="params">(Frac result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result.down&lt;<span class="number">0</span>)<span class="comment">//分母为负数，分子分母变相反数</span></span><br><span class="line">&#123;</span><br><span class="line">result.up=-result.up;<span class="comment">//符号位放在分母上</span></span><br><span class="line">     result.down=-result.down;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result.up==<span class="number">0</span>)<span class="comment">//分子为0</span></span><br><span class="line">&#123;</span><br><span class="line">result.down=<span class="number">1</span>;<span class="comment">//分母为1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">gcd</span>(<span class="built_in">abs</span>(result.up),<span class="built_in">abs</span>(result.down));<span class="comment">//约分</span></span><br><span class="line">result.up/=d;</span><br><span class="line">result.down/=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="function">Frac <span class="title">multi</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.up;</span><br><span class="line">result.down=f1.down*f2.down;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="function">Frac <span class="title">divide</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.down;</span><br><span class="line">result.down=f1.down*f2.up;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function">Frac <span class="title">add</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.down+f1.down*f2.up;</span><br><span class="line">result.down=f1.down*f2.down;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="function">Frac <span class="title">minu</span><span class="params">(Frac f1,Frac f2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Frac result;</span><br><span class="line">result.up=f1.up*f2.down-f1.down*f2.up;</span><br><span class="line">result.down=f1.down*f2.down;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reduction</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(Frac r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r=<span class="built_in">reduction</span>(r);</span><br><span class="line"><span class="keyword">if</span>(r.down==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,r.up);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(r.up)&gt;r.down)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d/%d\n&quot;</span>,r.up/r.down,<span class="built_in">abs</span>(r.up)%r.down,r.down);<span class="comment">//假分数表示形式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d/%d\n&quot;</span>,r.up,r.down);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,d;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">Frac f,e,r;</span><br><span class="line">f.up=a;e.up=c;</span><br><span class="line">f.down=b;e.down=d;</span><br><span class="line"><span class="built_in">show</span>(f);</span><br><span class="line"><span class="built_in">show</span>(e);</span><br><span class="line">r=<span class="built_in">add</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line">r=<span class="built_in">minu</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line">r=<span class="built_in">multi</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line">r=<span class="built_in">divide</span>(f,e);</span><br><span class="line"><span class="built_in">show</span>(r);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、前缀和"><a href="#三、前缀和" class="headerlink" title="三、前缀和"></a>三、前缀和</h2><p>1.一维前缀和</p><p>dp[i]表示从下标1开始到下标i的一维数组元素之和，若计算区间[a,b]的数组元素之和，其中递推式sum&#x3D;dp[j]-dp[i-1].</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> arr[N],dp[N];<span class="comment">//dp[i]表示从下标1开始到下标i的数组元素之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=dp[i<span class="number">-1</span>]+arr[i];<span class="comment">//计算前缀和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.二维前缀和</p><p>s(i,j)表示从（1,1)开始到（i，j)位置的二维数组所有元素之和，其中递推式为s(i,j)+&#x3D;s(i-1,j)+s(i,j-1)-s(i-1,j-1),则从（a+1,b+1)到（c，d)的和为s[a,b]+s[c,d]-s[a,d]-s[b,c].</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二维前缀和</span></span><br><span class="line"><span class="comment">//s[i][j]表示从arr[1][1]到arr[i][j]的和</span></span><br><span class="line"><span class="type">int</span> n,l,r,t,arr[<span class="number">605</span>][<span class="number">605</span>],count,sum[<span class="number">605</span>][<span class="number">605</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 16 1 6</span></span><br><span class="line"><span class="comment">0 1 2 3</span></span><br><span class="line"><span class="comment">4 5 6 7</span></span><br><span class="line"><span class="comment">8 9 10 11</span></span><br><span class="line"><span class="comment">12 13 14 15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> sumval=<span class="number">0</span>;<span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> left=<span class="built_in">max</span>(<span class="number">1</span>,x-r),right=<span class="built_in">min</span>(n,x+r);<span class="comment">//左右边界</span></span><br><span class="line"><span class="type">int</span> down=<span class="built_in">max</span>(<span class="number">1</span>,y-r),up=<span class="built_in">min</span>(n,y+r);<span class="comment">//上下边界</span></span><br><span class="line">sumval = sum[right][up] - sum[right][down<span class="number">-1</span>] - sum[left<span class="number">-1</span>][up] + sum[left<span class="number">-1</span>][down<span class="number">-1</span>];</span><br><span class="line">num=(right-left+<span class="number">1</span>)*(up-down+<span class="number">1</span>);</span><br><span class="line"><span class="type">double</span> ave=sumval*<span class="number">1.00</span>/num;</span><br><span class="line"><span class="keyword">if</span>(ave&lt;=t)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;l&gt;&gt;r&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i][j];<span class="comment">//读入数据</span></span><br><span class="line">sum[i][j]=arr[i][j];</span><br><span class="line">sum[i][j] += sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] ;<span class="comment">//计算前缀和</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">judge</span>(i,j))count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、差分"><a href="#四、差分" class="headerlink" title="四、差分"></a>四、差分</h2><p>差分是求前缀和的逆操作，对于原数组a[n],构造出一个b[n]数组中，使a[n]为b[n]的前缀和。一般用于快速对整个数组进行操作，比如将a数组中[l,r]部分的数据全部加上c.使用暴力的方法，则时间复杂度至少为O（n),而使用差分算法时间复杂度降低到O（1）.</p><p><strong>1.一维差分</strong><br>创建一数组b，使得数组a为数组b的前缀和，数组b为数组a的差分</p><p>构造方法：b[i] &#x3D; a[i] - a[i - 1]</p><p>此处使用了一个虚拟的构造方式(在数组一个位置加上一个数，那么在它的下一个位置减去这一数)</p><p>应用：对于a数组的任意区间[l, r]，令其加上一个数，而不改变其它值</p><p>b[l] +&#x3D; c, b[r + 1] -&#x3D; c</p><p>差分操作和前缀和一样数组下标都从1开始。</p><p>b[l]+c后，l后面的数组都会加c。r后面的数据也会被改变，要改回来就得b[r+1]-c.</p><p><strong>模板题如下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">输入一个长度为 n 的整数序列。接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。</span><br><span class="line">请你输出进行完所有操作后的序列。输入格式</span><br><span class="line">第一行包含两个整数 n 和 m。</span><br><span class="line">第二行包含 n 个整数，表示整数序列。</span><br><span class="line">接下来 m 行，每行包含三个整数 l，r，c，表示一个操作。输出格式</span><br><span class="line">共一行，包含 n 个整数，表示最终序列。数据范围</span><br><span class="line"><span class="number">1</span>≤n,m≤<span class="number">100000</span>,</span><br><span class="line"><span class="number">1</span>≤l≤r≤n,</span><br><span class="line">−<span class="number">1000</span>≤c≤<span class="number">1000</span>,</span><br><span class="line">−<span class="number">1000</span>≤整数序列中元素的值≤<span class="number">1000</span></span><br><span class="line">输入样例：</span><br><span class="line"><span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line">输出样例：</span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )cin&gt;&gt;a[i];<span class="comment">//读入数据</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        b[j]=a[j]-a[j<span class="number">-1</span>];<span class="comment">//进行差分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l,r,c;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        b[l]=b[l]+c;</span><br><span class="line">        b[r+<span class="number">1</span>]=b[r+<span class="number">1</span>]-c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        sum=sum+b[i];</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.二维差分</strong><br>直接得出公式<code>b[i][j] += c, b[i + 1][j] -= c, b[i][j + 1] -= c, b[i + 1][j + 1] += c</code><br>每次对b数组执行以上操作，等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i=x1;i&lt;=x2;i++)</span><br><span class="line">  <span class="keyword">for</span>(int j=y1;j&lt;=y2;j++)</span><br><span class="line">    a[i][j]+=c;</span><br></pre></td></tr></table></figure><p><strong>模板题如下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。</span><br><span class="line">每个操作都要将选中的子矩阵中的每个元素的值加上 c。</span><br><span class="line">请你将进行完所有操作后的矩阵输出。输入格式</span><br><span class="line">第一行包含整数 n,m,q。</span><br><span class="line">接下来 n 行，每行包含 m 个整数，表示整数矩阵。</span><br><span class="line">接下来 q 行，每行包含 <span class="number">5</span> 个整数 x1,y1,x2,y2,c，表示一个操作。</span><br><span class="line">输出格式</span><br><span class="line">共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。数据范围</span><br><span class="line"><span class="number">1</span>≤n,m≤<span class="number">1000</span>,</span><br><span class="line"><span class="number">1</span>≤q≤<span class="number">100000</span>,</span><br><span class="line"><span class="number">1</span>≤x1≤x2≤n,</span><br><span class="line"><span class="number">1</span>≤y1≤y2≤m,</span><br><span class="line">−<span class="number">1000</span>≤c≤<span class="number">1000</span>,</span><br><span class="line">−<span class="number">1000</span>≤矩阵内元素的值≤<span class="number">1000</span></span><br><span class="line">输入样例：</span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">输出样例：</span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], b[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] += c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">insert</span>(i, j, i, j, a[i][j]);      <span class="comment">//构建差分数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, c;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class="line">        <span class="built_in">insert</span>(x1, y1, x2, y2, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i][j] += b[i - <span class="number">1</span>][j] + b[i][j - <span class="number">1</span>] - b[i - <span class="number">1</span>][j - <span class="number">1</span>];  <span class="comment">//二维前缀和</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">           cout&lt;&lt;b[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="五、二分"><a href="#五、二分" class="headerlink" title="五、二分"></a>五、二分</h2><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a><strong>整数二分</strong></h3><p>对lower_bound来说，它寻找的就是第一个满足条件“值大于等于x”的元素的位置；对</p><p>upper_bound函数来说，它寻找的是第一个满足“值大于 x”的元素的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid; <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>;<span class="comment">//左加右减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;<span class="comment">//如果下方else后面是l则这里加1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;<span class="comment">//左加右减</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a><strong>浮点数二分</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>; <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line"><span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//递归的终止情况</span></span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//选取分界线。这里选数组中间那个数</span></span><br><span class="line"><span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="comment">//划分成左右两个部分</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line"><span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对左右部分排序</span></span><br><span class="line"><span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>边界问题</strong></p><p>因为边界问题只有这两种组合，不能随意搭配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x不能取q[l]和q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">quick_sort</span>(q,l,i<span class="number">-1</span>),<span class="built_in">quick_sort</span>(q,i,r);</span><br><span class="line"></span><br><span class="line">x不能取q[r]和q[(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">quick_sort</span>(q,l,j),<span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r);</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//递归的终止情况</span></span><br><span class="line"><span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//第一步：分成子问题</span></span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">//第二步：递归处理子问题</span></span><br><span class="line"><span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line"><span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="comment">//第三步：合并子问题</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line"><span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line"><span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line"><span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"><span class="comment">//第四步：复制回原数组</span></span><br><span class="line"><span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、数学问题"><a href="#七、数学问题" class="headerlink" title="七、数学问题"></a>七、数学问题</h2><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll</span></span><br><span class="line"><span class="function">ll <span class="title">binaryPow</span><span class="params">(ll a,ll b)</span><span class="comment">//计算a^b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ll ans=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(b)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans*=a;<span class="comment">//如果b的二进制末尾是1或者b%2==1,即b是奇数</span></span><br><span class="line">    b&gt;&gt;=<span class="number">1</span>;<span class="comment">//将b的二进制右移一位，即b=b&gt;&gt;1或b/=2;</span></span><br><span class="line">    a*=a;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数筛法"><a href="#素数筛法" class="headerlink" title="素数筛法"></a>素数筛法</h3><h4 id="1-朴素筛法"><a href="#1-朴素筛法" class="headerlink" title="1.朴素筛法"></a>1.朴素筛法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)<span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-埃氏（Eratosthenes）筛法"><a href="#2-埃氏（Eratosthenes）筛法" class="headerlink" title="2.埃氏（Eratosthenes）筛法"></a>2.埃氏（Eratosthenes）筛法</h4><p>假设要筛2-n内的素数，则先将2的倍数从里面剔除，再将3的倍数从里面剔除，以此类推……时间复杂度为O（nloglogn），已经非常接近线性了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//素数表获取</span></span><br><span class="line"><span class="comment">//埃式筛法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> prime[maxn],pnum=<span class="number">0</span>;<span class="comment">//数组来记录素数元素，pnum来记录素数个数</span></span><br><span class="line"><span class="type">bool</span> p[maxn];<span class="comment">//素数判断 false 则说明为素数，否则不为素数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">prime[pnum++]=i;<span class="comment">//记录素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;maxn;j+=i)<span class="comment">//将素数的倍数标记为非素数</span></span><br><span class="line">&#123;</span><br><span class="line">p[j]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find_prime</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pnum;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;prime[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-欧拉（Euler）筛法"><a href="#3-欧拉（Euler）筛法" class="headerlink" title="3.欧拉（Euler）筛法"></a>3.欧拉（Euler）筛法</h4><p>欧拉筛法是埃氏筛法的改进，埃氏筛法终究会出现一个数被多个数筛掉的情况。例如因为120 &#x3D; 2^3 x 3 x 5，因为2，3，5是120的质因子，所以120会被2筛一次，被3筛一次，被5筛一次，共3次。</p><p>而欧拉筛法保证了每一个合数都被其最小质因子筛去，保证不会重复筛除。故遍历一次就好，时间复杂度为O（n）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//欧拉筛法</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="type">bool</span> p[N];<span class="comment">//素数判断 false为素数 </span></span><br><span class="line"><span class="type">int</span> prime[N],pnum=<span class="number">0</span>;<span class="comment">//数组记录素数元素，pnum记录素数个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">prime[pnum++]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;pnum&amp;&amp;i*prime[j]&lt;=N;j++)<span class="comment">//防止数组越界</span></span><br><span class="line">&#123;</span><br><span class="line">p[i*prime[j]]=<span class="literal">true</span>;<span class="comment">//最小质因子筛合数</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">find_prime</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pnum;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;prime[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、试除法分解质因子"><a href="#4、试除法分解质因子" class="headerlink" title="4、试除法分解质因子"></a>4、试除法分解质因子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s ++ ;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合数求解"><a href="#组合数求解" class="headerlink" title="组合数求解"></a>组合数求解</h3><p>公式：<br>$$<br>C_n^m&#x3D;1(m&#x3D;0或m&#x3D;n)\<br>c_n^m&#x3D;c_{n-1}^m+c_{n-1}^{m-1}(n&gt;m&gt;0)<br>$$</p><p>所以，我们可以使用动态规划来求解组合数，直接上代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    dp[i][i] = dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">        dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察到每一行的组合数都只需要用到上一行组合数的数值，所以可以进行<strong>状态压缩</strong>，注意倒序处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; --j) &#123;    <span class="comment">//倒序处理</span></span><br><span class="line">        <span class="keyword">if</span> (j == i || j == <span class="number">0</span>) dp[j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[j] = dp[j] + dp[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">//进制转化</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;mp1;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">char</span>&gt;mp2;</span><br><span class="line"><span class="type">int</span> num,temp;</span><br><span class="line"><span class="type">char</span> ans[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">mp1[i+<span class="string">&#x27;0&#x27;</span>]=i;</span><br><span class="line">mp2[i]=i+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> i=<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;F&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">mp1[i]=i-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>;</span><br><span class="line">mp2[i-<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d;<span class="comment">//初始进制</span></span><br><span class="line">cin&gt;&gt;d;</span><br><span class="line">string str;<span class="comment">//读入数据</span></span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//转化为10进制</span></span><br><span class="line">temp=temp*d+mp1[str[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a;<span class="comment">//转化后的进制</span></span><br><span class="line">cin&gt;&gt;a;</span><br><span class="line"><span class="keyword">while</span>(temp)</span><br><span class="line">&#123;</span><br><span class="line">ans[num++]=mp2[temp%a];</span><br><span class="line">temp/=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;ans[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数与最小公倍数"><a href="#最大公约数与最小公倍数" class="headerlink" title="最大公约数与最小公倍数"></a>最大公约数与最小公倍数</h3><p>辗转相除法（欧几里得算法）最大公约数</p><p>时间复杂度为O（logb）</p><p>定理</p><p>当a与b都为正整数且a&gt;b时，记gcd(a,b)为a与b的最大公约数，则有gcd（a,b）&#x3D;gcd（b, a mod b）</p><p>证明</p><p>a可以表示成 a &#x3D; kb + r（a，b，k，r皆为正整数，且r不为0）</p><p>假设d是a，b的一个公约数，则有d|a，d|b，即a和b都可以被d整除。（x|y意为kx &#x3D; y，k为正整数）</p><p>而r &#x3D; a - kb，两边同时除以d，r&#x2F;d &#x3D; a&#x2F;d - kb&#x2F;d，由等式右边可知m &#x3D; r&#x2F;d为整数，因此d|r</p><p>因此d也是b，a mod b的公约数</p><p>故（a,b）与（b, a mod b）的公约数相等，则其最大公约数也相等，得证。</p><p>举例</p><p>假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：<br>1997 &#x2F; 615 &#x3D; 3 （余 152）<br>615 &#x2F; 152 &#x3D; 4（余7）<br>152 &#x2F; 7 &#x3D; 21（余5）<br>7 &#x2F; 5 &#x3D; 1 （余2）<br>5 &#x2F; 2 &#x3D; 2 （余1）<br>2 &#x2F; 1 &#x3D; 2 （余0）<br>至此，最大公约数为1。</p><h4 id="1-递归版"><a href="#1-递归版" class="headerlink" title="1.递归版"></a>1.递归版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-循环版"><a href="#2-循环版" class="headerlink" title="2.循环版"></a>2.循环版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="keyword">while</span>(a % b != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       c = a % b;</span><br><span class="line">       a = b;</span><br><span class="line">       b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3.内置函数"></a>3.内置函数</h4><p>C++可以使用内置函数__gcd（a,b）来求两数的最大公约数，使用时需包含头文件algorithm。</p><h4 id="4-求最大公倍数"><a href="#4-求最大公倍数" class="headerlink" title="4.求最大公倍数"></a>4.求最大公倍数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a/<span class="built_in">gcd</span>(a,b)*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>给定两个整数a和b，求一组整数解（x,y)使得ax+by&#x3D;gcd(a,b)成立，其中gcd(a,b)表示a和b的最大公约数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> g=<span class="built_in">exgcd</span>(b,a%b,x,y);<span class="comment">//递归计算exgcd(b,a%b)</span></span><br><span class="line">    <span class="type">int</span> temp=x;<span class="comment">//存放x的值</span></span><br><span class="line">    x=y;<span class="comment">//更新x=y(old)</span></span><br><span class="line">    y=temp-a/b*y;  <span class="comment">//更新y=x(old)-a/b*y(old)</span></span><br><span class="line">    <span class="keyword">return</span> g;  <span class="comment">//g是gcd</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求欧拉函数"><a href="#求欧拉函数" class="headerlink" title="求欧拉函数"></a>求欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = res / i * (i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学问题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
